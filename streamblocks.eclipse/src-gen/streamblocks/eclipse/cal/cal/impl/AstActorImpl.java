/**
 * generated by Xtext 2.21.0
 */
package streamblocks.eclipse.cal.cal.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import streamblocks.eclipse.cal.cal.AstAction;
import streamblocks.eclipse.cal.cal.AstActor;
import streamblocks.eclipse.cal.cal.AstInvariant;
import streamblocks.eclipse.cal.cal.AstPriority;
import streamblocks.eclipse.cal.cal.AstProcessDescription;
import streamblocks.eclipse.cal.cal.AstSchedule;
import streamblocks.eclipse.cal.cal.AstVariable;
import streamblocks.eclipse.cal.cal.CalPackage;
import streamblocks.eclipse.cal.cal.RegExp;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Ast Actor</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link streamblocks.eclipse.cal.cal.impl.AstActorImpl#getFunctions <em>Functions</em>}</li>
 *   <li>{@link streamblocks.eclipse.cal.cal.impl.AstActorImpl#getProcedures <em>Procedures</em>}</li>
 *   <li>{@link streamblocks.eclipse.cal.cal.impl.AstActorImpl#getInvariants <em>Invariants</em>}</li>
 *   <li>{@link streamblocks.eclipse.cal.cal.impl.AstActorImpl#getActions <em>Actions</em>}</li>
 *   <li>{@link streamblocks.eclipse.cal.cal.impl.AstActorImpl#getProcesses <em>Processes</em>}</li>
 *   <li>{@link streamblocks.eclipse.cal.cal.impl.AstActorImpl#getInitializes <em>Initializes</em>}</li>
 *   <li>{@link streamblocks.eclipse.cal.cal.impl.AstActorImpl#getStateVariables <em>State Variables</em>}</li>
 *   <li>{@link streamblocks.eclipse.cal.cal.impl.AstActorImpl#getSchedules <em>Schedules</em>}</li>
 *   <li>{@link streamblocks.eclipse.cal.cal.impl.AstActorImpl#getScheduleRegExp <em>Schedule Reg Exp</em>}</li>
 *   <li>{@link streamblocks.eclipse.cal.cal.impl.AstActorImpl#getPriorities <em>Priorities</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AstActorImpl extends AstAbstractActorImpl implements AstActor
{
  /**
   * The cached value of the '{@link #getFunctions() <em>Functions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunctions()
   * @generated
   * @ordered
   */
  protected EList<AstVariable> functions;

  /**
   * The cached value of the '{@link #getProcedures() <em>Procedures</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProcedures()
   * @generated
   * @ordered
   */
  protected EList<AstVariable> procedures;

  /**
   * The cached value of the '{@link #getInvariants() <em>Invariants</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInvariants()
   * @generated
   * @ordered
   */
  protected EList<AstInvariant> invariants;

  /**
   * The cached value of the '{@link #getActions() <em>Actions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActions()
   * @generated
   * @ordered
   */
  protected EList<AstAction> actions;

  /**
   * The cached value of the '{@link #getProcesses() <em>Processes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProcesses()
   * @generated
   * @ordered
   */
  protected EList<AstProcessDescription> processes;

  /**
   * The cached value of the '{@link #getInitializes() <em>Initializes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInitializes()
   * @generated
   * @ordered
   */
  protected EList<AstAction> initializes;

  /**
   * The cached value of the '{@link #getStateVariables() <em>State Variables</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStateVariables()
   * @generated
   * @ordered
   */
  protected EList<AstVariable> stateVariables;

  /**
   * The cached value of the '{@link #getSchedules() <em>Schedules</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSchedules()
   * @generated
   * @ordered
   */
  protected AstSchedule schedules;

  /**
   * The cached value of the '{@link #getScheduleRegExp() <em>Schedule Reg Exp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getScheduleRegExp()
   * @generated
   * @ordered
   */
  protected RegExp scheduleRegExp;

  /**
   * The cached value of the '{@link #getPriorities() <em>Priorities</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPriorities()
   * @generated
   * @ordered
   */
  protected EList<AstPriority> priorities;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AstActorImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CalPackage.Literals.AST_ACTOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AstVariable> getFunctions()
  {
    if (functions == null)
    {
      functions = new EObjectContainmentEList<AstVariable>(AstVariable.class, this, CalPackage.AST_ACTOR__FUNCTIONS);
    }
    return functions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AstVariable> getProcedures()
  {
    if (procedures == null)
    {
      procedures = new EObjectContainmentEList<AstVariable>(AstVariable.class, this, CalPackage.AST_ACTOR__PROCEDURES);
    }
    return procedures;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AstInvariant> getInvariants()
  {
    if (invariants == null)
    {
      invariants = new EObjectContainmentEList<AstInvariant>(AstInvariant.class, this, CalPackage.AST_ACTOR__INVARIANTS);
    }
    return invariants;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AstAction> getActions()
  {
    if (actions == null)
    {
      actions = new EObjectContainmentEList<AstAction>(AstAction.class, this, CalPackage.AST_ACTOR__ACTIONS);
    }
    return actions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AstProcessDescription> getProcesses()
  {
    if (processes == null)
    {
      processes = new EObjectContainmentEList<AstProcessDescription>(AstProcessDescription.class, this, CalPackage.AST_ACTOR__PROCESSES);
    }
    return processes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AstAction> getInitializes()
  {
    if (initializes == null)
    {
      initializes = new EObjectContainmentEList<AstAction>(AstAction.class, this, CalPackage.AST_ACTOR__INITIALIZES);
    }
    return initializes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AstVariable> getStateVariables()
  {
    if (stateVariables == null)
    {
      stateVariables = new EObjectContainmentEList<AstVariable>(AstVariable.class, this, CalPackage.AST_ACTOR__STATE_VARIABLES);
    }
    return stateVariables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstSchedule getSchedules()
  {
    return schedules;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSchedules(AstSchedule newSchedules, NotificationChain msgs)
  {
    AstSchedule oldSchedules = schedules;
    schedules = newSchedules;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CalPackage.AST_ACTOR__SCHEDULES, oldSchedules, newSchedules);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSchedules(AstSchedule newSchedules)
  {
    if (newSchedules != schedules)
    {
      NotificationChain msgs = null;
      if (schedules != null)
        msgs = ((InternalEObject)schedules).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CalPackage.AST_ACTOR__SCHEDULES, null, msgs);
      if (newSchedules != null)
        msgs = ((InternalEObject)newSchedules).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CalPackage.AST_ACTOR__SCHEDULES, null, msgs);
      msgs = basicSetSchedules(newSchedules, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CalPackage.AST_ACTOR__SCHEDULES, newSchedules, newSchedules));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RegExp getScheduleRegExp()
  {
    return scheduleRegExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetScheduleRegExp(RegExp newScheduleRegExp, NotificationChain msgs)
  {
    RegExp oldScheduleRegExp = scheduleRegExp;
    scheduleRegExp = newScheduleRegExp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CalPackage.AST_ACTOR__SCHEDULE_REG_EXP, oldScheduleRegExp, newScheduleRegExp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setScheduleRegExp(RegExp newScheduleRegExp)
  {
    if (newScheduleRegExp != scheduleRegExp)
    {
      NotificationChain msgs = null;
      if (scheduleRegExp != null)
        msgs = ((InternalEObject)scheduleRegExp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CalPackage.AST_ACTOR__SCHEDULE_REG_EXP, null, msgs);
      if (newScheduleRegExp != null)
        msgs = ((InternalEObject)newScheduleRegExp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CalPackage.AST_ACTOR__SCHEDULE_REG_EXP, null, msgs);
      msgs = basicSetScheduleRegExp(newScheduleRegExp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CalPackage.AST_ACTOR__SCHEDULE_REG_EXP, newScheduleRegExp, newScheduleRegExp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AstPriority> getPriorities()
  {
    if (priorities == null)
    {
      priorities = new EObjectContainmentEList<AstPriority>(AstPriority.class, this, CalPackage.AST_ACTOR__PRIORITIES);
    }
    return priorities;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CalPackage.AST_ACTOR__FUNCTIONS:
        return ((InternalEList<?>)getFunctions()).basicRemove(otherEnd, msgs);
      case CalPackage.AST_ACTOR__PROCEDURES:
        return ((InternalEList<?>)getProcedures()).basicRemove(otherEnd, msgs);
      case CalPackage.AST_ACTOR__INVARIANTS:
        return ((InternalEList<?>)getInvariants()).basicRemove(otherEnd, msgs);
      case CalPackage.AST_ACTOR__ACTIONS:
        return ((InternalEList<?>)getActions()).basicRemove(otherEnd, msgs);
      case CalPackage.AST_ACTOR__PROCESSES:
        return ((InternalEList<?>)getProcesses()).basicRemove(otherEnd, msgs);
      case CalPackage.AST_ACTOR__INITIALIZES:
        return ((InternalEList<?>)getInitializes()).basicRemove(otherEnd, msgs);
      case CalPackage.AST_ACTOR__STATE_VARIABLES:
        return ((InternalEList<?>)getStateVariables()).basicRemove(otherEnd, msgs);
      case CalPackage.AST_ACTOR__SCHEDULES:
        return basicSetSchedules(null, msgs);
      case CalPackage.AST_ACTOR__SCHEDULE_REG_EXP:
        return basicSetScheduleRegExp(null, msgs);
      case CalPackage.AST_ACTOR__PRIORITIES:
        return ((InternalEList<?>)getPriorities()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CalPackage.AST_ACTOR__FUNCTIONS:
        return getFunctions();
      case CalPackage.AST_ACTOR__PROCEDURES:
        return getProcedures();
      case CalPackage.AST_ACTOR__INVARIANTS:
        return getInvariants();
      case CalPackage.AST_ACTOR__ACTIONS:
        return getActions();
      case CalPackage.AST_ACTOR__PROCESSES:
        return getProcesses();
      case CalPackage.AST_ACTOR__INITIALIZES:
        return getInitializes();
      case CalPackage.AST_ACTOR__STATE_VARIABLES:
        return getStateVariables();
      case CalPackage.AST_ACTOR__SCHEDULES:
        return getSchedules();
      case CalPackage.AST_ACTOR__SCHEDULE_REG_EXP:
        return getScheduleRegExp();
      case CalPackage.AST_ACTOR__PRIORITIES:
        return getPriorities();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CalPackage.AST_ACTOR__FUNCTIONS:
        getFunctions().clear();
        getFunctions().addAll((Collection<? extends AstVariable>)newValue);
        return;
      case CalPackage.AST_ACTOR__PROCEDURES:
        getProcedures().clear();
        getProcedures().addAll((Collection<? extends AstVariable>)newValue);
        return;
      case CalPackage.AST_ACTOR__INVARIANTS:
        getInvariants().clear();
        getInvariants().addAll((Collection<? extends AstInvariant>)newValue);
        return;
      case CalPackage.AST_ACTOR__ACTIONS:
        getActions().clear();
        getActions().addAll((Collection<? extends AstAction>)newValue);
        return;
      case CalPackage.AST_ACTOR__PROCESSES:
        getProcesses().clear();
        getProcesses().addAll((Collection<? extends AstProcessDescription>)newValue);
        return;
      case CalPackage.AST_ACTOR__INITIALIZES:
        getInitializes().clear();
        getInitializes().addAll((Collection<? extends AstAction>)newValue);
        return;
      case CalPackage.AST_ACTOR__STATE_VARIABLES:
        getStateVariables().clear();
        getStateVariables().addAll((Collection<? extends AstVariable>)newValue);
        return;
      case CalPackage.AST_ACTOR__SCHEDULES:
        setSchedules((AstSchedule)newValue);
        return;
      case CalPackage.AST_ACTOR__SCHEDULE_REG_EXP:
        setScheduleRegExp((RegExp)newValue);
        return;
      case CalPackage.AST_ACTOR__PRIORITIES:
        getPriorities().clear();
        getPriorities().addAll((Collection<? extends AstPriority>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CalPackage.AST_ACTOR__FUNCTIONS:
        getFunctions().clear();
        return;
      case CalPackage.AST_ACTOR__PROCEDURES:
        getProcedures().clear();
        return;
      case CalPackage.AST_ACTOR__INVARIANTS:
        getInvariants().clear();
        return;
      case CalPackage.AST_ACTOR__ACTIONS:
        getActions().clear();
        return;
      case CalPackage.AST_ACTOR__PROCESSES:
        getProcesses().clear();
        return;
      case CalPackage.AST_ACTOR__INITIALIZES:
        getInitializes().clear();
        return;
      case CalPackage.AST_ACTOR__STATE_VARIABLES:
        getStateVariables().clear();
        return;
      case CalPackage.AST_ACTOR__SCHEDULES:
        setSchedules((AstSchedule)null);
        return;
      case CalPackage.AST_ACTOR__SCHEDULE_REG_EXP:
        setScheduleRegExp((RegExp)null);
        return;
      case CalPackage.AST_ACTOR__PRIORITIES:
        getPriorities().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CalPackage.AST_ACTOR__FUNCTIONS:
        return functions != null && !functions.isEmpty();
      case CalPackage.AST_ACTOR__PROCEDURES:
        return procedures != null && !procedures.isEmpty();
      case CalPackage.AST_ACTOR__INVARIANTS:
        return invariants != null && !invariants.isEmpty();
      case CalPackage.AST_ACTOR__ACTIONS:
        return actions != null && !actions.isEmpty();
      case CalPackage.AST_ACTOR__PROCESSES:
        return processes != null && !processes.isEmpty();
      case CalPackage.AST_ACTOR__INITIALIZES:
        return initializes != null && !initializes.isEmpty();
      case CalPackage.AST_ACTOR__STATE_VARIABLES:
        return stateVariables != null && !stateVariables.isEmpty();
      case CalPackage.AST_ACTOR__SCHEDULES:
        return schedules != null;
      case CalPackage.AST_ACTOR__SCHEDULE_REG_EXP:
        return scheduleRegExp != null;
      case CalPackage.AST_ACTOR__PRIORITIES:
        return priorities != null && !priorities.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //AstActorImpl

/**
 * generated by Xtext 2.21.0
 */
package streamblocks.eclipse.cal.cal.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import streamblocks.eclipse.cal.cal.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class CalFactoryImpl extends EFactoryImpl implements CalFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static CalFactory init()
  {
    try
    {
      CalFactory theCalFactory = (CalFactory)EPackage.Registry.INSTANCE.getEFactory(CalPackage.eNS_URI);
      if (theCalFactory != null)
      {
        return theCalFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new CalFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CalFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case CalPackage.COMPILATION_UNIT: return createCompilationUnit();
      case CalPackage.AST_PACKAGE: return createAstPackage();
      case CalPackage.AST_UNIT: return createAstUnit();
      case CalPackage.AST_NAMESPACE: return createAstNamespace();
      case CalPackage.AST_ENTITY: return createAstEntity();
      case CalPackage.AST_ABSTRACT_ACTOR: return createAstAbstractActor();
      case CalPackage.IMPORT: return createImport();
      case CalPackage.RVC_IMPORT: return createRvcImport();
      case CalPackage.GROUP_IMPORT_TAIL: return createGroupImportTail();
      case CalPackage.SINGLE_IMPORT_TAIL: return createSingleImportTail();
      case CalPackage.AST_NETWORK: return createAstNetwork();
      case CalPackage.AST_ENTITY_VARIABLE: return createAstEntityVariable();
      case CalPackage.AST_ENTITY_EXPR: return createAstEntityExpr();
      case CalPackage.AST_ENTITY_INSTANCE_EXPR: return createAstEntityInstanceExpr();
      case CalPackage.AST_ASSIGN_PARAMETER: return createAstAssignParameter();
      case CalPackage.AST_ENTITY_IF_EXPR: return createAstEntityIfExpr();
      case CalPackage.AST_ENTITY_LIST_EXPR: return createAstEntityListExpr();
      case CalPackage.AST_STRUCTURE: return createAstStructure();
      case CalPackage.AST_STRUCTURE_STATEMENT: return createAstStructureStatement();
      case CalPackage.AST_STRUCTURE_STATEMENT_CONNECTION: return createAstStructureStatementConnection();
      case CalPackage.AST_ENTITY_VARIABLE_REFERENCE: return createAstEntityVariableReference();
      case CalPackage.AST_CONNECTION_ATTRIBUTE: return createAstConnectionAttribute();
      case CalPackage.AST_STRUCTURE_STATEMENT_FOREACH: return createAstStructureStatementForeach();
      case CalPackage.AST_STRUCTURE_STATEMENT_IF: return createAstStructureStatementIf();
      case CalPackage.AST_STRUCTURE_STATEMENT_ELSIF: return createAstStructureStatementElsif();
      case CalPackage.AST_VARIABLE: return createAstVariable();
      case CalPackage.AST_TYPE_USER: return createAstTypeUser();
      case CalPackage.AST_TYPE_DEFINITION_PARAMETER: return createAstTypeDefinitionParameter();
      case CalPackage.AST_TAGGED_TUPLE: return createAstTaggedTuple();
      case CalPackage.AST_ACTOR: return createAstActor();
      case CalPackage.AST_PROCESS_DESCRIPTION: return createAstProcessDescription();
      case CalPackage.AST_PORT: return createAstPort();
      case CalPackage.AST_EXTERNAL_FUNCTION: return createAstExternalFunction();
      case CalPackage.AST_EXTERNAL_PROCEDURE: return createAstExternalProcedure();
      case CalPackage.AST_TAG: return createAstTag();
      case CalPackage.AST_INVARIANT: return createAstInvariant();
      case CalPackage.AST_EXTERNAL_ACTOR: return createAstExternalActor();
      case CalPackage.AST_INEQUALITY: return createAstInequality();
      case CalPackage.AST_PRIORITY: return createAstPriority();
      case CalPackage.AST_SCHEDULE: return createAstSchedule();
      case CalPackage.AST_TRANSITION: return createAstTransition();
      case CalPackage.AST_STATE: return createAstState();
      case CalPackage.REG_EXP: return createRegExp();
      case CalPackage.AST_ACTION: return createAstAction();
      case CalPackage.AST_INPUT_PATTERN: return createAstInputPattern();
      case CalPackage.AST_OUTPUT_EXPRESSION: return createAstOutputExpression();
      case CalPackage.AST_STATEMENT_ASSIGN: return createAstStatementAssign();
      case CalPackage.AST_STATEMENT_CALL: return createAstStatementCall();
      case CalPackage.AST_STATEMENT_FOREACH: return createAstStatementForeach();
      case CalPackage.AST_FOREACH_GENERATOR: return createAstForeachGenerator();
      case CalPackage.AST_STATEMENT_BLOCK: return createAstStatementBlock();
      case CalPackage.AST_STATEMENT_IF: return createAstStatementIf();
      case CalPackage.AST_STATEMENT_ELSIF: return createAstStatementElsif();
      case CalPackage.AST_STATEMENT_WHILE: return createAstStatementWhile();
      case CalPackage.AST_STATEMENT_READ: return createAstStatementRead();
      case CalPackage.AST_STATEMENT_WRITE: return createAstStatementWrite();
      case CalPackage.AST_LVALUE: return createAstLValue();
      case CalPackage.AST_STATEMENT_CASE: return createAstStatementCase();
      case CalPackage.AST_STATEMENT_ALTERNATIVE: return createAstStatementAlternative();
      case CalPackage.AST_STATEMENT: return createAstStatement();
      case CalPackage.AST_EXPRESSION: return createAstExpression();
      case CalPackage.AST_EXPRESSION_SYMBOL_REFERENCE: return createAstExpressionSymbolReference();
      case CalPackage.AST_EXPRESSION_IF: return createAstExpressionIf();
      case CalPackage.AST_EXPRESSION_ELSIF: return createAstExpressionElsif();
      case CalPackage.AST_EXPRESSION_LIST: return createAstExpressionList();
      case CalPackage.AST_GENERATOR: return createAstGenerator();
      case CalPackage.AST_EXPRESSION_SET: return createAstExpressionSet();
      case CalPackage.AST_EXPRESSION_MAP: return createAstExpressionMap();
      case CalPackage.MAPPING: return createMapping();
      case CalPackage.AST_EXPRESSION_LET: return createAstExpressionLet();
      case CalPackage.AST_EXPRESSION_LAMBDA: return createAstExpressionLambda();
      case CalPackage.AST_EXPRESSION_PROC: return createAstExpressionProc();
      case CalPackage.AST_EXPRESSION_CASE: return createAstExpressionCase();
      case CalPackage.AST_EXPRESSION_ALTERNATIVE: return createAstExpressionAlternative();
      case CalPackage.AST_EXPRESSION_LITERAL: return createAstExpressionLiteral();
      case CalPackage.AST_EXPRESSION_BOOLEAN: return createAstExpressionBoolean();
      case CalPackage.AST_EXPRESSION_FLOAT: return createAstExpressionFloat();
      case CalPackage.AST_EXPRESSION_INTEGER: return createAstExpressionInteger();
      case CalPackage.AST_EXPRESSION_STRING: return createAstExpressionString();
      case CalPackage.AST_PATTERN: return createAstPattern();
      case CalPackage.AST_TYPE: return createAstType();
      case CalPackage.AST_TYPE_PARAMETER_LIST: return createAstTypeParameterList();
      case CalPackage.AST_TYPE_PARAM: return createAstTypeParam();
      case CalPackage.AST_MEMBER_ACCESS: return createAstMemberAccess();
      case CalPackage.AST_ANNOTATION: return createAstAnnotation();
      case CalPackage.AST_ANNOTATION_ARGUMENT: return createAstAnnotationArgument();
      case CalPackage.AST_TUPLE: return createAstTuple();
      case CalPackage.AST_FUNCTION: return createAstFunction();
      case CalPackage.AST_PROCEDURE: return createAstProcedure();
      case CalPackage.REG_EXP_BINARY: return createRegExpBinary();
      case CalPackage.REG_EXP_UNARY: return createRegExpUnary();
      case CalPackage.REG_EXP_TAG: return createRegExpTag();
      case CalPackage.AST_INITIALIZE: return createAstInitialize();
      case CalPackage.AST_EXPRESSION_BINARY: return createAstExpressionBinary();
      case CalPackage.AST_EXPRESSION_UNARY: return createAstExpressionUnary();
      case CalPackage.AST_EXPRESSION_ASSERTION: return createAstExpressionAssertion();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case CalPackage.IMPORT_KIND:
        return createImportKindFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case CalPackage.IMPORT_KIND:
        return convertImportKindToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CompilationUnit createCompilationUnit()
  {
    CompilationUnitImpl compilationUnit = new CompilationUnitImpl();
    return compilationUnit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstPackage createAstPackage()
  {
    AstPackageImpl astPackage = new AstPackageImpl();
    return astPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstUnit createAstUnit()
  {
    AstUnitImpl astUnit = new AstUnitImpl();
    return astUnit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstNamespace createAstNamespace()
  {
    AstNamespaceImpl astNamespace = new AstNamespaceImpl();
    return astNamespace;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstEntity createAstEntity()
  {
    AstEntityImpl astEntity = new AstEntityImpl();
    return astEntity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstAbstractActor createAstAbstractActor()
  {
    AstAbstractActorImpl astAbstractActor = new AstAbstractActorImpl();
    return astAbstractActor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RvcImport createRvcImport()
  {
    RvcImportImpl rvcImport = new RvcImportImpl();
    return rvcImport;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GroupImportTail createGroupImportTail()
  {
    GroupImportTailImpl groupImportTail = new GroupImportTailImpl();
    return groupImportTail;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SingleImportTail createSingleImportTail()
  {
    SingleImportTailImpl singleImportTail = new SingleImportTailImpl();
    return singleImportTail;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstNetwork createAstNetwork()
  {
    AstNetworkImpl astNetwork = new AstNetworkImpl();
    return astNetwork;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstEntityVariable createAstEntityVariable()
  {
    AstEntityVariableImpl astEntityVariable = new AstEntityVariableImpl();
    return astEntityVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstEntityExpr createAstEntityExpr()
  {
    AstEntityExprImpl astEntityExpr = new AstEntityExprImpl();
    return astEntityExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstEntityInstanceExpr createAstEntityInstanceExpr()
  {
    AstEntityInstanceExprImpl astEntityInstanceExpr = new AstEntityInstanceExprImpl();
    return astEntityInstanceExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstAssignParameter createAstAssignParameter()
  {
    AstAssignParameterImpl astAssignParameter = new AstAssignParameterImpl();
    return astAssignParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstEntityIfExpr createAstEntityIfExpr()
  {
    AstEntityIfExprImpl astEntityIfExpr = new AstEntityIfExprImpl();
    return astEntityIfExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstEntityListExpr createAstEntityListExpr()
  {
    AstEntityListExprImpl astEntityListExpr = new AstEntityListExprImpl();
    return astEntityListExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstStructure createAstStructure()
  {
    AstStructureImpl astStructure = new AstStructureImpl();
    return astStructure;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstStructureStatement createAstStructureStatement()
  {
    AstStructureStatementImpl astStructureStatement = new AstStructureStatementImpl();
    return astStructureStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstStructureStatementConnection createAstStructureStatementConnection()
  {
    AstStructureStatementConnectionImpl astStructureStatementConnection = new AstStructureStatementConnectionImpl();
    return astStructureStatementConnection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstEntityVariableReference createAstEntityVariableReference()
  {
    AstEntityVariableReferenceImpl astEntityVariableReference = new AstEntityVariableReferenceImpl();
    return astEntityVariableReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstConnectionAttribute createAstConnectionAttribute()
  {
    AstConnectionAttributeImpl astConnectionAttribute = new AstConnectionAttributeImpl();
    return astConnectionAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstStructureStatementForeach createAstStructureStatementForeach()
  {
    AstStructureStatementForeachImpl astStructureStatementForeach = new AstStructureStatementForeachImpl();
    return astStructureStatementForeach;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstStructureStatementIf createAstStructureStatementIf()
  {
    AstStructureStatementIfImpl astStructureStatementIf = new AstStructureStatementIfImpl();
    return astStructureStatementIf;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstStructureStatementElsif createAstStructureStatementElsif()
  {
    AstStructureStatementElsifImpl astStructureStatementElsif = new AstStructureStatementElsifImpl();
    return astStructureStatementElsif;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstVariable createAstVariable()
  {
    AstVariableImpl astVariable = new AstVariableImpl();
    return astVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstTypeUser createAstTypeUser()
  {
    AstTypeUserImpl astTypeUser = new AstTypeUserImpl();
    return astTypeUser;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstTypeDefinitionParameter createAstTypeDefinitionParameter()
  {
    AstTypeDefinitionParameterImpl astTypeDefinitionParameter = new AstTypeDefinitionParameterImpl();
    return astTypeDefinitionParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstTaggedTuple createAstTaggedTuple()
  {
    AstTaggedTupleImpl astTaggedTuple = new AstTaggedTupleImpl();
    return astTaggedTuple;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstActor createAstActor()
  {
    AstActorImpl astActor = new AstActorImpl();
    return astActor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstProcessDescription createAstProcessDescription()
  {
    AstProcessDescriptionImpl astProcessDescription = new AstProcessDescriptionImpl();
    return astProcessDescription;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstPort createAstPort()
  {
    AstPortImpl astPort = new AstPortImpl();
    return astPort;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstExternalFunction createAstExternalFunction()
  {
    AstExternalFunctionImpl astExternalFunction = new AstExternalFunctionImpl();
    return astExternalFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstExternalProcedure createAstExternalProcedure()
  {
    AstExternalProcedureImpl astExternalProcedure = new AstExternalProcedureImpl();
    return astExternalProcedure;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstTag createAstTag()
  {
    AstTagImpl astTag = new AstTagImpl();
    return astTag;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstInvariant createAstInvariant()
  {
    AstInvariantImpl astInvariant = new AstInvariantImpl();
    return astInvariant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstExternalActor createAstExternalActor()
  {
    AstExternalActorImpl astExternalActor = new AstExternalActorImpl();
    return astExternalActor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstInequality createAstInequality()
  {
    AstInequalityImpl astInequality = new AstInequalityImpl();
    return astInequality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstPriority createAstPriority()
  {
    AstPriorityImpl astPriority = new AstPriorityImpl();
    return astPriority;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstSchedule createAstSchedule()
  {
    AstScheduleImpl astSchedule = new AstScheduleImpl();
    return astSchedule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstTransition createAstTransition()
  {
    AstTransitionImpl astTransition = new AstTransitionImpl();
    return astTransition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstState createAstState()
  {
    AstStateImpl astState = new AstStateImpl();
    return astState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RegExp createRegExp()
  {
    RegExpImpl regExp = new RegExpImpl();
    return regExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstAction createAstAction()
  {
    AstActionImpl astAction = new AstActionImpl();
    return astAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstInputPattern createAstInputPattern()
  {
    AstInputPatternImpl astInputPattern = new AstInputPatternImpl();
    return astInputPattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstOutputExpression createAstOutputExpression()
  {
    AstOutputExpressionImpl astOutputExpression = new AstOutputExpressionImpl();
    return astOutputExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstStatementAssign createAstStatementAssign()
  {
    AstStatementAssignImpl astStatementAssign = new AstStatementAssignImpl();
    return astStatementAssign;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstStatementCall createAstStatementCall()
  {
    AstStatementCallImpl astStatementCall = new AstStatementCallImpl();
    return astStatementCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstStatementForeach createAstStatementForeach()
  {
    AstStatementForeachImpl astStatementForeach = new AstStatementForeachImpl();
    return astStatementForeach;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstForeachGenerator createAstForeachGenerator()
  {
    AstForeachGeneratorImpl astForeachGenerator = new AstForeachGeneratorImpl();
    return astForeachGenerator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstStatementBlock createAstStatementBlock()
  {
    AstStatementBlockImpl astStatementBlock = new AstStatementBlockImpl();
    return astStatementBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstStatementIf createAstStatementIf()
  {
    AstStatementIfImpl astStatementIf = new AstStatementIfImpl();
    return astStatementIf;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstStatementElsif createAstStatementElsif()
  {
    AstStatementElsifImpl astStatementElsif = new AstStatementElsifImpl();
    return astStatementElsif;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstStatementWhile createAstStatementWhile()
  {
    AstStatementWhileImpl astStatementWhile = new AstStatementWhileImpl();
    return astStatementWhile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstStatementRead createAstStatementRead()
  {
    AstStatementReadImpl astStatementRead = new AstStatementReadImpl();
    return astStatementRead;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstStatementWrite createAstStatementWrite()
  {
    AstStatementWriteImpl astStatementWrite = new AstStatementWriteImpl();
    return astStatementWrite;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstLValue createAstLValue()
  {
    AstLValueImpl astLValue = new AstLValueImpl();
    return astLValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstStatementCase createAstStatementCase()
  {
    AstStatementCaseImpl astStatementCase = new AstStatementCaseImpl();
    return astStatementCase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstStatementAlternative createAstStatementAlternative()
  {
    AstStatementAlternativeImpl astStatementAlternative = new AstStatementAlternativeImpl();
    return astStatementAlternative;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstStatement createAstStatement()
  {
    AstStatementImpl astStatement = new AstStatementImpl();
    return astStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstExpression createAstExpression()
  {
    AstExpressionImpl astExpression = new AstExpressionImpl();
    return astExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstExpressionSymbolReference createAstExpressionSymbolReference()
  {
    AstExpressionSymbolReferenceImpl astExpressionSymbolReference = new AstExpressionSymbolReferenceImpl();
    return astExpressionSymbolReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstExpressionIf createAstExpressionIf()
  {
    AstExpressionIfImpl astExpressionIf = new AstExpressionIfImpl();
    return astExpressionIf;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstExpressionElsif createAstExpressionElsif()
  {
    AstExpressionElsifImpl astExpressionElsif = new AstExpressionElsifImpl();
    return astExpressionElsif;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstExpressionList createAstExpressionList()
  {
    AstExpressionListImpl astExpressionList = new AstExpressionListImpl();
    return astExpressionList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstGenerator createAstGenerator()
  {
    AstGeneratorImpl astGenerator = new AstGeneratorImpl();
    return astGenerator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstExpressionSet createAstExpressionSet()
  {
    AstExpressionSetImpl astExpressionSet = new AstExpressionSetImpl();
    return astExpressionSet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstExpressionMap createAstExpressionMap()
  {
    AstExpressionMapImpl astExpressionMap = new AstExpressionMapImpl();
    return astExpressionMap;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Mapping createMapping()
  {
    MappingImpl mapping = new MappingImpl();
    return mapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstExpressionLet createAstExpressionLet()
  {
    AstExpressionLetImpl astExpressionLet = new AstExpressionLetImpl();
    return astExpressionLet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstExpressionLambda createAstExpressionLambda()
  {
    AstExpressionLambdaImpl astExpressionLambda = new AstExpressionLambdaImpl();
    return astExpressionLambda;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstExpressionProc createAstExpressionProc()
  {
    AstExpressionProcImpl astExpressionProc = new AstExpressionProcImpl();
    return astExpressionProc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstExpressionCase createAstExpressionCase()
  {
    AstExpressionCaseImpl astExpressionCase = new AstExpressionCaseImpl();
    return astExpressionCase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstExpressionAlternative createAstExpressionAlternative()
  {
    AstExpressionAlternativeImpl astExpressionAlternative = new AstExpressionAlternativeImpl();
    return astExpressionAlternative;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstExpressionLiteral createAstExpressionLiteral()
  {
    AstExpressionLiteralImpl astExpressionLiteral = new AstExpressionLiteralImpl();
    return astExpressionLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstExpressionBoolean createAstExpressionBoolean()
  {
    AstExpressionBooleanImpl astExpressionBoolean = new AstExpressionBooleanImpl();
    return astExpressionBoolean;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstExpressionFloat createAstExpressionFloat()
  {
    AstExpressionFloatImpl astExpressionFloat = new AstExpressionFloatImpl();
    return astExpressionFloat;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstExpressionInteger createAstExpressionInteger()
  {
    AstExpressionIntegerImpl astExpressionInteger = new AstExpressionIntegerImpl();
    return astExpressionInteger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstExpressionString createAstExpressionString()
  {
    AstExpressionStringImpl astExpressionString = new AstExpressionStringImpl();
    return astExpressionString;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstPattern createAstPattern()
  {
    AstPatternImpl astPattern = new AstPatternImpl();
    return astPattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstType createAstType()
  {
    AstTypeImpl astType = new AstTypeImpl();
    return astType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstTypeParameterList createAstTypeParameterList()
  {
    AstTypeParameterListImpl astTypeParameterList = new AstTypeParameterListImpl();
    return astTypeParameterList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstTypeParam createAstTypeParam()
  {
    AstTypeParamImpl astTypeParam = new AstTypeParamImpl();
    return astTypeParam;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstMemberAccess createAstMemberAccess()
  {
    AstMemberAccessImpl astMemberAccess = new AstMemberAccessImpl();
    return astMemberAccess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstAnnotation createAstAnnotation()
  {
    AstAnnotationImpl astAnnotation = new AstAnnotationImpl();
    return astAnnotation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstAnnotationArgument createAstAnnotationArgument()
  {
    AstAnnotationArgumentImpl astAnnotationArgument = new AstAnnotationArgumentImpl();
    return astAnnotationArgument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstTuple createAstTuple()
  {
    AstTupleImpl astTuple = new AstTupleImpl();
    return astTuple;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstFunction createAstFunction()
  {
    AstFunctionImpl astFunction = new AstFunctionImpl();
    return astFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstProcedure createAstProcedure()
  {
    AstProcedureImpl astProcedure = new AstProcedureImpl();
    return astProcedure;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RegExpBinary createRegExpBinary()
  {
    RegExpBinaryImpl regExpBinary = new RegExpBinaryImpl();
    return regExpBinary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RegExpUnary createRegExpUnary()
  {
    RegExpUnaryImpl regExpUnary = new RegExpUnaryImpl();
    return regExpUnary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RegExpTag createRegExpTag()
  {
    RegExpTagImpl regExpTag = new RegExpTagImpl();
    return regExpTag;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstInitialize createAstInitialize()
  {
    AstInitializeImpl astInitialize = new AstInitializeImpl();
    return astInitialize;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstExpressionBinary createAstExpressionBinary()
  {
    AstExpressionBinaryImpl astExpressionBinary = new AstExpressionBinaryImpl();
    return astExpressionBinary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstExpressionUnary createAstExpressionUnary()
  {
    AstExpressionUnaryImpl astExpressionUnary = new AstExpressionUnaryImpl();
    return astExpressionUnary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AstExpressionAssertion createAstExpressionAssertion()
  {
    AstExpressionAssertionImpl astExpressionAssertion = new AstExpressionAssertionImpl();
    return astExpressionAssertion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImportKind createImportKindFromString(EDataType eDataType, String initialValue)
  {
    ImportKind result = ImportKind.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertImportKindToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CalPackage getCalPackage()
  {
    return (CalPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static CalPackage getPackage()
  {
    return CalPackage.eINSTANCE;
  }

} //CalFactoryImpl

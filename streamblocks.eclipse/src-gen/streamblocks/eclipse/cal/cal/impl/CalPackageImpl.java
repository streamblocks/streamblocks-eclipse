/**
 * generated by Xtext 2.21.0
 */
package streamblocks.eclipse.cal.cal.impl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import streamblocks.eclipse.cal.cal.AstAbstractActor;
import streamblocks.eclipse.cal.cal.AstAction;
import streamblocks.eclipse.cal.cal.AstActor;
import streamblocks.eclipse.cal.cal.AstAnnotation;
import streamblocks.eclipse.cal.cal.AstAnnotationArgument;
import streamblocks.eclipse.cal.cal.AstAssignParameter;
import streamblocks.eclipse.cal.cal.AstConnectionAttribute;
import streamblocks.eclipse.cal.cal.AstEntity;
import streamblocks.eclipse.cal.cal.AstEntityExpr;
import streamblocks.eclipse.cal.cal.AstEntityIfExpr;
import streamblocks.eclipse.cal.cal.AstEntityInstanceExpr;
import streamblocks.eclipse.cal.cal.AstEntityListExpr;
import streamblocks.eclipse.cal.cal.AstEntityVariable;
import streamblocks.eclipse.cal.cal.AstEntityVariableReference;
import streamblocks.eclipse.cal.cal.AstExpression;
import streamblocks.eclipse.cal.cal.AstExpressionAlternative;
import streamblocks.eclipse.cal.cal.AstExpressionAssertion;
import streamblocks.eclipse.cal.cal.AstExpressionBinary;
import streamblocks.eclipse.cal.cal.AstExpressionBoolean;
import streamblocks.eclipse.cal.cal.AstExpressionCase;
import streamblocks.eclipse.cal.cal.AstExpressionElsif;
import streamblocks.eclipse.cal.cal.AstExpressionFloat;
import streamblocks.eclipse.cal.cal.AstExpressionIf;
import streamblocks.eclipse.cal.cal.AstExpressionInteger;
import streamblocks.eclipse.cal.cal.AstExpressionLambda;
import streamblocks.eclipse.cal.cal.AstExpressionLet;
import streamblocks.eclipse.cal.cal.AstExpressionList;
import streamblocks.eclipse.cal.cal.AstExpressionLiteral;
import streamblocks.eclipse.cal.cal.AstExpressionMap;
import streamblocks.eclipse.cal.cal.AstExpressionProc;
import streamblocks.eclipse.cal.cal.AstExpressionSet;
import streamblocks.eclipse.cal.cal.AstExpressionString;
import streamblocks.eclipse.cal.cal.AstExpressionSymbolReference;
import streamblocks.eclipse.cal.cal.AstExpressionUnary;
import streamblocks.eclipse.cal.cal.AstExternalActor;
import streamblocks.eclipse.cal.cal.AstExternalFunction;
import streamblocks.eclipse.cal.cal.AstExternalProcedure;
import streamblocks.eclipse.cal.cal.AstForeachGenerator;
import streamblocks.eclipse.cal.cal.AstFunction;
import streamblocks.eclipse.cal.cal.AstGenerator;
import streamblocks.eclipse.cal.cal.AstInequality;
import streamblocks.eclipse.cal.cal.AstInitialize;
import streamblocks.eclipse.cal.cal.AstInputPattern;
import streamblocks.eclipse.cal.cal.AstInvariant;
import streamblocks.eclipse.cal.cal.AstLValue;
import streamblocks.eclipse.cal.cal.AstMemberAccess;
import streamblocks.eclipse.cal.cal.AstNamespace;
import streamblocks.eclipse.cal.cal.AstNetwork;
import streamblocks.eclipse.cal.cal.AstOutputExpression;
import streamblocks.eclipse.cal.cal.AstPackage;
import streamblocks.eclipse.cal.cal.AstPattern;
import streamblocks.eclipse.cal.cal.AstPort;
import streamblocks.eclipse.cal.cal.AstPriority;
import streamblocks.eclipse.cal.cal.AstProcedure;
import streamblocks.eclipse.cal.cal.AstProcessDescription;
import streamblocks.eclipse.cal.cal.AstSchedule;
import streamblocks.eclipse.cal.cal.AstState;
import streamblocks.eclipse.cal.cal.AstStatement;
import streamblocks.eclipse.cal.cal.AstStatementAlternative;
import streamblocks.eclipse.cal.cal.AstStatementAssign;
import streamblocks.eclipse.cal.cal.AstStatementBlock;
import streamblocks.eclipse.cal.cal.AstStatementCall;
import streamblocks.eclipse.cal.cal.AstStatementCase;
import streamblocks.eclipse.cal.cal.AstStatementElsif;
import streamblocks.eclipse.cal.cal.AstStatementForeach;
import streamblocks.eclipse.cal.cal.AstStatementIf;
import streamblocks.eclipse.cal.cal.AstStatementRead;
import streamblocks.eclipse.cal.cal.AstStatementWhile;
import streamblocks.eclipse.cal.cal.AstStatementWrite;
import streamblocks.eclipse.cal.cal.AstStructure;
import streamblocks.eclipse.cal.cal.AstStructureStatement;
import streamblocks.eclipse.cal.cal.AstStructureStatementConnection;
import streamblocks.eclipse.cal.cal.AstStructureStatementElsif;
import streamblocks.eclipse.cal.cal.AstStructureStatementForeach;
import streamblocks.eclipse.cal.cal.AstStructureStatementIf;
import streamblocks.eclipse.cal.cal.AstTag;
import streamblocks.eclipse.cal.cal.AstTaggedTuple;
import streamblocks.eclipse.cal.cal.AstTransition;
import streamblocks.eclipse.cal.cal.AstTuple;
import streamblocks.eclipse.cal.cal.AstType;
import streamblocks.eclipse.cal.cal.AstTypeDefinitionParameter;
import streamblocks.eclipse.cal.cal.AstTypeParam;
import streamblocks.eclipse.cal.cal.AstTypeParameterList;
import streamblocks.eclipse.cal.cal.AstTypeUser;
import streamblocks.eclipse.cal.cal.AstUnit;
import streamblocks.eclipse.cal.cal.AstVariable;
import streamblocks.eclipse.cal.cal.CalFactory;
import streamblocks.eclipse.cal.cal.CalPackage;
import streamblocks.eclipse.cal.cal.CompilationUnit;
import streamblocks.eclipse.cal.cal.GroupImportTail;
import streamblocks.eclipse.cal.cal.Import;
import streamblocks.eclipse.cal.cal.ImportKind;
import streamblocks.eclipse.cal.cal.Mapping;
import streamblocks.eclipse.cal.cal.RegExp;
import streamblocks.eclipse.cal.cal.RegExpBinary;
import streamblocks.eclipse.cal.cal.RegExpTag;
import streamblocks.eclipse.cal.cal.RegExpUnary;
import streamblocks.eclipse.cal.cal.RvcImport;
import streamblocks.eclipse.cal.cal.SingleImportTail;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class CalPackageImpl extends EPackageImpl implements CalPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass compilationUnitEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astPackageEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astUnitEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astNamespaceEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astEntityEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astAbstractActorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass importEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass rvcImportEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass groupImportTailEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass singleImportTailEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astNetworkEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astEntityVariableEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astEntityExprEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astEntityInstanceExprEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astAssignParameterEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astEntityIfExprEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astEntityListExprEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astStructureEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astStructureStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astStructureStatementConnectionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astEntityVariableReferenceEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astConnectionAttributeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astStructureStatementForeachEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astStructureStatementIfEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astStructureStatementElsifEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astVariableEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astTypeUserEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astTypeDefinitionParameterEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astTaggedTupleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astActorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astProcessDescriptionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astPortEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astExternalFunctionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astExternalProcedureEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astTagEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astInvariantEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astExternalActorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astInequalityEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astPriorityEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astScheduleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astTransitionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astStateEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass regExpEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astActionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astInputPatternEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astOutputExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astStatementAssignEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astStatementCallEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astStatementForeachEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astForeachGeneratorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astStatementBlockEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astStatementIfEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astStatementElsifEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astStatementWhileEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astStatementReadEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astStatementWriteEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astLValueEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astStatementCaseEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astStatementAlternativeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astExpressionSymbolReferenceEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astExpressionIfEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astExpressionElsifEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astExpressionListEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astGeneratorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astExpressionSetEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astExpressionMapEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass mappingEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astExpressionLetEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astExpressionLambdaEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astExpressionProcEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astExpressionCaseEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astExpressionAlternativeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astExpressionLiteralEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astExpressionBooleanEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astExpressionFloatEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astExpressionIntegerEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astExpressionStringEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astPatternEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astTypeParameterListEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astTypeParamEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astMemberAccessEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astAnnotationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astAnnotationArgumentEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astTupleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astFunctionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astProcedureEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass regExpBinaryEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass regExpUnaryEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass regExpTagEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astInitializeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astExpressionBinaryEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astExpressionUnaryEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass astExpressionAssertionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum importKindEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see streamblocks.eclipse.cal.cal.CalPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private CalPackageImpl()
  {
    super(eNS_URI, CalFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link CalPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static CalPackage init()
  {
    if (isInited) return (CalPackage)EPackage.Registry.INSTANCE.getEPackage(CalPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredCalPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    CalPackageImpl theCalPackage = registeredCalPackage instanceof CalPackageImpl ? (CalPackageImpl)registeredCalPackage : new CalPackageImpl();

    isInited = true;

    // Create package meta-data objects
    theCalPackage.createPackageContents();

    // Initialize created meta-data
    theCalPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theCalPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(CalPackage.eNS_URI, theCalPackage);
    return theCalPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCompilationUnit()
  {
    return compilationUnitEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstPackage()
  {
    return astPackageEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstUnit()
  {
    return astUnitEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstNamespace()
  {
    return astNamespaceEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAstNamespace_Rvc()
  {
    return (EAttribute)astNamespaceEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAstNamespace_Name()
  {
    return (EAttribute)astNamespaceEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstNamespace_Entities()
  {
    return (EReference)astNamespaceEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstNamespace_Imports()
  {
    return (EReference)astNamespaceEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstNamespace_Units()
  {
    return (EReference)astNamespaceEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstNamespace_Functions()
  {
    return (EReference)astNamespaceEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstNamespace_Procedures()
  {
    return (EReference)astNamespaceEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstNamespace_Variables()
  {
    return (EReference)astNamespaceEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstNamespace_Externals()
  {
    return (EReference)astNamespaceEClass.getEStructuralFeatures().get(8);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstNamespace_Annotations()
  {
    return (EReference)astNamespaceEClass.getEStructuralFeatures().get(9);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstNamespace_Typedefs()
  {
    return (EReference)astNamespaceEClass.getEStructuralFeatures().get(10);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstNamespace_Namespaces()
  {
    return (EReference)astNamespaceEClass.getEStructuralFeatures().get(11);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstEntity()
  {
    return astEntityEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstEntity_Annotations()
  {
    return (EReference)astEntityEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstEntity_Actor()
  {
    return (EReference)astEntityEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstAbstractActor()
  {
    return astAbstractActorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAstAbstractActor_Name()
  {
    return (EAttribute)astAbstractActorEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstAbstractActor_Parameters()
  {
    return (EReference)astAbstractActorEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstAbstractActor_Inputs()
  {
    return (EReference)astAbstractActorEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstAbstractActor_Outputs()
  {
    return (EReference)astAbstractActorEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getImport()
  {
    return importEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getImport_Kind()
  {
    return (EAttribute)importEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getImport_ImportedNamespace()
  {
    return (EAttribute)importEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRvcImport()
  {
    return rvcImportEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getRvcImport_ImportedNamespace()
  {
    return (EAttribute)rvcImportEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getGroupImportTail()
  {
    return groupImportTailEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSingleImportTail()
  {
    return singleImportTailEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSingleImportTail_LocalNameToken()
  {
    return (EAttribute)singleImportTailEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstNetwork()
  {
    return astNetworkEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstNetwork_Variables()
  {
    return (EReference)astNetworkEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstNetwork_Entities()
  {
    return (EReference)astNetworkEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstNetwork_Structure()
  {
    return (EReference)astNetworkEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstEntityVariable()
  {
    return astEntityVariableEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAstEntityVariable_Name()
  {
    return (EAttribute)astEntityVariableEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstEntityVariable_Entity()
  {
    return (EReference)astEntityVariableEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstEntityExpr()
  {
    return astEntityExprEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstEntityInstanceExpr()
  {
    return astEntityInstanceExprEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstEntityInstanceExpr_Type()
  {
    return (EReference)astEntityInstanceExprEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstEntityInstanceExpr_Parameters()
  {
    return (EReference)astEntityInstanceExprEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstAssignParameter()
  {
    return astAssignParameterEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAstAssignParameter_Name()
  {
    return (EAttribute)astAssignParameterEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstAssignParameter_Value()
  {
    return (EReference)astAssignParameterEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstEntityIfExpr()
  {
    return astEntityIfExprEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstEntityIfExpr_Condition()
  {
    return (EReference)astEntityIfExprEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstEntityIfExpr_TrueEntity()
  {
    return (EReference)astEntityIfExprEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstEntityIfExpr_FalseEntity()
  {
    return (EReference)astEntityIfExprEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstEntityListExpr()
  {
    return astEntityListExprEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstEntityListExpr_Exprs()
  {
    return (EReference)astEntityListExprEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstEntityListExpr_Generator()
  {
    return (EReference)astEntityListExprEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstStructure()
  {
    return astStructureEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStructure_Connections()
  {
    return (EReference)astStructureEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstStructureStatement()
  {
    return astStructureStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstStructureStatementConnection()
  {
    return astStructureStatementConnectionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStructureStatementConnection_From()
  {
    return (EReference)astStructureStatementConnectionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStructureStatementConnection_FromIndexes()
  {
    return (EReference)astStructureStatementConnectionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAstStructureStatementConnection_OutPort()
  {
    return (EAttribute)astStructureStatementConnectionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStructureStatementConnection_To()
  {
    return (EReference)astStructureStatementConnectionEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAstStructureStatementConnection_InPort()
  {
    return (EAttribute)astStructureStatementConnectionEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStructureStatementConnection_Attribute()
  {
    return (EReference)astStructureStatementConnectionEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstEntityVariableReference()
  {
    return astEntityVariableReferenceEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstEntityVariableReference_Variable()
  {
    return (EReference)astEntityVariableReferenceEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstConnectionAttribute()
  {
    return astConnectionAttributeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAstConnectionAttribute_Name()
  {
    return (EAttribute)astConnectionAttributeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstConnectionAttribute_Value()
  {
    return (EReference)astConnectionAttributeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstStructureStatementForeach()
  {
    return astStructureStatementForeachEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStructureStatementForeach_Generators()
  {
    return (EReference)astStructureStatementForeachEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStructureStatementForeach_Variables()
  {
    return (EReference)astStructureStatementForeachEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStructureStatementForeach_Statements()
  {
    return (EReference)astStructureStatementForeachEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstStructureStatementIf()
  {
    return astStructureStatementIfEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStructureStatementIf_Condition()
  {
    return (EReference)astStructureStatementIfEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStructureStatementIf_Then()
  {
    return (EReference)astStructureStatementIfEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStructureStatementIf_Elsifs()
  {
    return (EReference)astStructureStatementIfEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStructureStatementIf_Else()
  {
    return (EReference)astStructureStatementIfEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstStructureStatementElsif()
  {
    return astStructureStatementElsifEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStructureStatementElsif_Condition()
  {
    return (EReference)astStructureStatementElsifEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStructureStatementElsif_Then()
  {
    return (EReference)astStructureStatementElsifEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstVariable()
  {
    return astVariableEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAstVariable_Constant()
  {
    return (EAttribute)astVariableEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstVariable_Value()
  {
    return (EReference)astVariableEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAstVariable_Name()
  {
    return (EAttribute)astVariableEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstVariable_Annotations()
  {
    return (EReference)astVariableEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstVariable_Type()
  {
    return (EReference)astVariableEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstVariable_Dimensions()
  {
    return (EReference)astVariableEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstTypeUser()
  {
    return astTypeUserEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAstTypeUser_Definition()
  {
    return (EAttribute)astTypeUserEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstTypeUser_Parameters()
  {
    return (EReference)astTypeUserEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstTypeUser_Tuples()
  {
    return (EReference)astTypeUserEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAstTypeUser_Variable()
  {
    return (EAttribute)astTypeUserEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstTypeDefinitionParameter()
  {
    return astTypeDefinitionParameterEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstTypeDefinitionParameter_Value()
  {
    return (EReference)astTypeDefinitionParameterEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstTypeDefinitionParameter_Type()
  {
    return (EReference)astTypeDefinitionParameterEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstTaggedTuple()
  {
    return astTaggedTupleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAstTaggedTuple_Name()
  {
    return (EAttribute)astTaggedTupleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstTaggedTuple_Fields()
  {
    return (EReference)astTaggedTupleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstActor()
  {
    return astActorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstActor_Functions()
  {
    return (EReference)astActorEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstActor_Procedures()
  {
    return (EReference)astActorEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstActor_Invariants()
  {
    return (EReference)astActorEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstActor_Actions()
  {
    return (EReference)astActorEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstActor_Processes()
  {
    return (EReference)astActorEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstActor_Initializes()
  {
    return (EReference)astActorEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstActor_StateVariables()
  {
    return (EReference)astActorEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstActor_Schedules()
  {
    return (EReference)astActorEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstActor_ScheduleRegExp()
  {
    return (EReference)astActorEClass.getEStructuralFeatures().get(8);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstActor_Priorities()
  {
    return (EReference)astActorEClass.getEStructuralFeatures().get(9);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstProcessDescription()
  {
    return astProcessDescriptionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAstProcessDescription_Repeated()
  {
    return (EAttribute)astProcessDescriptionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstProcessDescription_Statements()
  {
    return (EReference)astProcessDescriptionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstPort()
  {
    return astPortEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstPort_Annotations()
  {
    return (EReference)astPortEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstPort_Type()
  {
    return (EReference)astPortEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAstPort_Name()
  {
    return (EAttribute)astPortEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstExternalFunction()
  {
    return astExternalFunctionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstExternalProcedure()
  {
    return astExternalProcedureEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstTag()
  {
    return astTagEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAstTag_Identifiers()
  {
    return (EAttribute)astTagEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstInvariant()
  {
    return astInvariantEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstInvariant_Invariants()
  {
    return (EReference)astInvariantEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstExternalActor()
  {
    return astExternalActorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstInequality()
  {
    return astInequalityEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstInequality_Tags()
  {
    return (EReference)astInequalityEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstPriority()
  {
    return astPriorityEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstPriority_Inequalities()
  {
    return (EReference)astPriorityEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstSchedule()
  {
    return astScheduleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstSchedule_InitialState()
  {
    return (EReference)astScheduleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstSchedule_Transitions()
  {
    return (EReference)astScheduleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstTransition()
  {
    return astTransitionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstTransition_Source()
  {
    return (EReference)astTransitionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstTransition_Tags()
  {
    return (EReference)astTransitionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstTransition_Target()
  {
    return (EReference)astTransitionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstState()
  {
    return astStateEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAstState_Name()
  {
    return (EAttribute)astStateEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRegExp()
  {
    return regExpEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getRegExp_Exp()
  {
    return (EReference)regExpEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstAction()
  {
    return astActionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstAction_Annotations()
  {
    return (EReference)astActionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstAction_Tag()
  {
    return (EReference)astActionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstAction_Inputs()
  {
    return (EReference)astActionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstAction_Outputs()
  {
    return (EReference)astActionEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstAction_Guards()
  {
    return (EReference)astActionEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstAction_Variables()
  {
    return (EReference)astActionEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstAction_Statements()
  {
    return (EReference)astActionEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstInputPattern()
  {
    return astInputPatternEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstInputPattern_Port()
  {
    return (EReference)astInputPatternEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstInputPattern_Tokens()
  {
    return (EReference)astInputPatternEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstInputPattern_Repeat()
  {
    return (EReference)astInputPatternEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstOutputExpression()
  {
    return astOutputExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstOutputExpression_Port()
  {
    return (EReference)astOutputExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstOutputExpression_Values()
  {
    return (EReference)astOutputExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstOutputExpression_Repeat()
  {
    return (EReference)astOutputExpressionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstStatementAssign()
  {
    return astStatementAssignEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStatementAssign_Lvalue()
  {
    return (EReference)astStatementAssignEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStatementAssign_Value()
  {
    return (EReference)astStatementAssignEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstStatementCall()
  {
    return astStatementCallEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStatementCall_Annotations()
  {
    return (EReference)astStatementCallEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStatementCall_Procedure()
  {
    return (EReference)astStatementCallEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStatementCall_Parameters()
  {
    return (EReference)astStatementCallEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstStatementForeach()
  {
    return astStatementForeachEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStatementForeach_Generators()
  {
    return (EReference)astStatementForeachEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStatementForeach_Variables()
  {
    return (EReference)astStatementForeachEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStatementForeach_Statements()
  {
    return (EReference)astStatementForeachEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstForeachGenerator()
  {
    return astForeachGeneratorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstForeachGenerator_Variable()
  {
    return (EReference)astForeachGeneratorEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstForeachGenerator_Expression()
  {
    return (EReference)astForeachGeneratorEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstStatementBlock()
  {
    return astStatementBlockEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStatementBlock_Variables()
  {
    return (EReference)astStatementBlockEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStatementBlock_Statements()
  {
    return (EReference)astStatementBlockEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstStatementIf()
  {
    return astStatementIfEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStatementIf_Condition()
  {
    return (EReference)astStatementIfEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStatementIf_Then()
  {
    return (EReference)astStatementIfEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStatementIf_Elsifs()
  {
    return (EReference)astStatementIfEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStatementIf_Else()
  {
    return (EReference)astStatementIfEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstStatementElsif()
  {
    return astStatementElsifEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStatementElsif_Condition()
  {
    return (EReference)astStatementElsifEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStatementElsif_Then()
  {
    return (EReference)astStatementElsifEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstStatementWhile()
  {
    return astStatementWhileEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStatementWhile_Condition()
  {
    return (EReference)astStatementWhileEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStatementWhile_Statements()
  {
    return (EReference)astStatementWhileEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstStatementRead()
  {
    return astStatementReadEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStatementRead_Port()
  {
    return (EReference)astStatementReadEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStatementRead_Lvalues()
  {
    return (EReference)astStatementReadEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStatementRead_Repeat()
  {
    return (EReference)astStatementReadEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstStatementWrite()
  {
    return astStatementWriteEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStatementWrite_Port()
  {
    return (EReference)astStatementWriteEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStatementWrite_Values()
  {
    return (EReference)astStatementWriteEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStatementWrite_Repeat()
  {
    return (EReference)astStatementWriteEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstLValue()
  {
    return astLValueEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstLValue_Target()
  {
    return (EReference)astLValueEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstLValue_Indexes()
  {
    return (EReference)astLValueEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstLValue_Member()
  {
    return (EReference)astLValueEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstStatementCase()
  {
    return astStatementCaseEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStatementCase_Expression()
  {
    return (EReference)astStatementCaseEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStatementCase_Cases()
  {
    return (EReference)astStatementCaseEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStatementCase_Default()
  {
    return (EReference)astStatementCaseEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstStatementAlternative()
  {
    return astStatementAlternativeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStatementAlternative_Pattern()
  {
    return (EReference)astStatementAlternativeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStatementAlternative_Guards()
  {
    return (EReference)astStatementAlternativeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstStatementAlternative_Statements()
  {
    return (EReference)astStatementAlternativeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstStatement()
  {
    return astStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstExpression()
  {
    return astExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstExpressionSymbolReference()
  {
    return astExpressionSymbolReferenceEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstExpressionSymbolReference_Annotations()
  {
    return (EReference)astExpressionSymbolReferenceEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstExpressionSymbolReference_Symbol()
  {
    return (EReference)astExpressionSymbolReferenceEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstExpressionSymbolReference_Indexes()
  {
    return (EReference)astExpressionSymbolReferenceEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstExpressionSymbolReference_Member()
  {
    return (EReference)astExpressionSymbolReferenceEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAstExpressionSymbolReference_Ctor()
  {
    return (EAttribute)astExpressionSymbolReferenceEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAstExpressionSymbolReference_Call()
  {
    return (EAttribute)astExpressionSymbolReferenceEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstExpressionSymbolReference_Parameters()
  {
    return (EReference)astExpressionSymbolReferenceEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstExpressionIf()
  {
    return astExpressionIfEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstExpressionIf_Condition()
  {
    return (EReference)astExpressionIfEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstExpressionIf_Then()
  {
    return (EReference)astExpressionIfEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstExpressionIf_Elsifs()
  {
    return (EReference)astExpressionIfEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstExpressionIf_Else()
  {
    return (EReference)astExpressionIfEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstExpressionElsif()
  {
    return astExpressionElsifEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstExpressionElsif_Condition()
  {
    return (EReference)astExpressionElsifEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstExpressionElsif_Then()
  {
    return (EReference)astExpressionElsifEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstExpressionList()
  {
    return astExpressionListEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstExpressionList_Expressions()
  {
    return (EReference)astExpressionListEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstExpressionList_Generators()
  {
    return (EReference)astExpressionListEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstGenerator()
  {
    return astGeneratorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstGenerator_Variable()
  {
    return (EReference)astGeneratorEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstGenerator_Expression()
  {
    return (EReference)astGeneratorEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstGenerator_Filter()
  {
    return (EReference)astGeneratorEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstExpressionSet()
  {
    return astExpressionSetEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstExpressionSet_Exprs()
  {
    return (EReference)astExpressionSetEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstExpressionSet_Generator()
  {
    return (EReference)astExpressionSetEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstExpressionMap()
  {
    return astExpressionMapEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstExpressionMap_Mappings()
  {
    return (EReference)astExpressionMapEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstExpressionMap_Generator()
  {
    return (EReference)astExpressionMapEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMapping()
  {
    return mappingEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMapping_Key()
  {
    return (EReference)mappingEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMapping_Value()
  {
    return (EReference)mappingEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstExpressionLet()
  {
    return astExpressionLetEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstExpressionLet_Variables()
  {
    return (EReference)astExpressionLetEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstExpressionLet_Expr()
  {
    return (EReference)astExpressionLetEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstExpressionLambda()
  {
    return astExpressionLambdaEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAstExpressionLambda_Name()
  {
    return (EAttribute)astExpressionLambdaEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstExpressionLambda_Parameters()
  {
    return (EReference)astExpressionLambdaEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstExpressionLambda_Type()
  {
    return (EReference)astExpressionLambdaEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstExpressionLambda_Variables()
  {
    return (EReference)astExpressionLambdaEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstExpressionLambda_Expression()
  {
    return (EReference)astExpressionLambdaEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstExpressionProc()
  {
    return astExpressionProcEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAstExpressionProc_Name()
  {
    return (EAttribute)astExpressionProcEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstExpressionProc_Parameters()
  {
    return (EReference)astExpressionProcEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstExpressionProc_Variables()
  {
    return (EReference)astExpressionProcEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstExpressionProc_Statements()
  {
    return (EReference)astExpressionProcEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstExpressionCase()
  {
    return astExpressionCaseEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstExpressionCase_Expression()
  {
    return (EReference)astExpressionCaseEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstExpressionCase_Cases()
  {
    return (EReference)astExpressionCaseEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstExpressionCase_Default()
  {
    return (EReference)astExpressionCaseEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstExpressionAlternative()
  {
    return astExpressionAlternativeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstExpressionAlternative_Pattern()
  {
    return (EReference)astExpressionAlternativeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstExpressionAlternative_Guards()
  {
    return (EReference)astExpressionAlternativeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstExpressionAlternative_Expression()
  {
    return (EReference)astExpressionAlternativeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstExpressionLiteral()
  {
    return astExpressionLiteralEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstExpressionBoolean()
  {
    return astExpressionBooleanEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAstExpressionBoolean_Value()
  {
    return (EAttribute)astExpressionBooleanEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstExpressionFloat()
  {
    return astExpressionFloatEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAstExpressionFloat_Value()
  {
    return (EAttribute)astExpressionFloatEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstExpressionInteger()
  {
    return astExpressionIntegerEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAstExpressionInteger_Value()
  {
    return (EAttribute)astExpressionIntegerEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstExpressionString()
  {
    return astExpressionStringEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAstExpressionString_Value()
  {
    return (EAttribute)astExpressionStringEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstPattern()
  {
    return astPatternEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstPattern_Variable()
  {
    return (EReference)astPatternEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstPattern_Patterns()
  {
    return (EReference)astPatternEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstPattern_Alias()
  {
    return (EReference)astPatternEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstPattern_Expression()
  {
    return (EReference)astPatternEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstPattern_Literal()
  {
    return (EReference)astPatternEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAstPattern_Name()
  {
    return (EAttribute)astPatternEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstType()
  {
    return astTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAstType_Builtin()
  {
    return (EAttribute)astTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstType_TypeParams()
  {
    return (EReference)astTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstType_Dimensions()
  {
    return (EReference)astTypeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstType_Name()
  {
    return (EReference)astTypeEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstType_Domain()
  {
    return (EReference)astTypeEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstType_Codomain()
  {
    return (EReference)astTypeEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstTypeParameterList()
  {
    return astTypeParameterListEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstTypeParameterList_Params()
  {
    return (EReference)astTypeParameterListEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstTypeParam()
  {
    return astTypeParamEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAstTypeParam_Name()
  {
    return (EAttribute)astTypeParamEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstTypeParam_Value()
  {
    return (EReference)astTypeParamEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstTypeParam_Type()
  {
    return (EReference)astTypeParamEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstMemberAccess()
  {
    return astMemberAccessEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAstMemberAccess_Name()
  {
    return (EAttribute)astMemberAccessEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstMemberAccess_MemberIndex()
  {
    return (EReference)astMemberAccessEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstAnnotation()
  {
    return astAnnotationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAstAnnotation_Name()
  {
    return (EAttribute)astAnnotationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstAnnotation_Arguments()
  {
    return (EReference)astAnnotationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstAnnotationArgument()
  {
    return astAnnotationArgumentEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAstAnnotationArgument_Name()
  {
    return (EAttribute)astAnnotationArgumentEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAstAnnotationArgument_Value()
  {
    return (EAttribute)astAnnotationArgumentEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstTuple()
  {
    return astTupleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstFunction()
  {
    return astFunctionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstFunction_Parameters()
  {
    return (EReference)astFunctionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstFunction_Variables()
  {
    return (EReference)astFunctionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstFunction_Expression()
  {
    return (EReference)astFunctionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstProcedure()
  {
    return astProcedureEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstProcedure_Parameters()
  {
    return (EReference)astProcedureEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstProcedure_Variables()
  {
    return (EReference)astProcedureEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstProcedure_Statements()
  {
    return (EReference)astProcedureEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRegExpBinary()
  {
    return regExpBinaryEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getRegExpBinary_Left()
  {
    return (EReference)regExpBinaryEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getRegExpBinary_Operator()
  {
    return (EAttribute)regExpBinaryEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getRegExpBinary_Right()
  {
    return (EReference)regExpBinaryEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRegExpUnary()
  {
    return regExpUnaryEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getRegExpUnary_Child()
  {
    return (EReference)regExpUnaryEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getRegExpUnary_UnaryOperator()
  {
    return (EAttribute)regExpUnaryEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRegExpTag()
  {
    return regExpTagEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getRegExpTag_Tag()
  {
    return (EReference)regExpTagEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstInitialize()
  {
    return astInitializeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstExpressionBinary()
  {
    return astExpressionBinaryEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstExpressionBinary_Left()
  {
    return (EReference)astExpressionBinaryEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAstExpressionBinary_Operator()
  {
    return (EAttribute)astExpressionBinaryEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstExpressionBinary_Right()
  {
    return (EReference)astExpressionBinaryEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstExpressionUnary()
  {
    return astExpressionUnaryEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAstExpressionUnary_UnaryOperator()
  {
    return (EAttribute)astExpressionUnaryEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstExpressionUnary_Expression()
  {
    return (EReference)astExpressionUnaryEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAstExpressionAssertion()
  {
    return astExpressionAssertionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstExpressionAssertion_Target()
  {
    return (EReference)astExpressionAssertionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAstExpressionAssertion_Type()
  {
    return (EReference)astExpressionAssertionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getImportKind()
  {
    return importKindEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CalFactory getCalFactory()
  {
    return (CalFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    compilationUnitEClass = createEClass(COMPILATION_UNIT);

    astPackageEClass = createEClass(AST_PACKAGE);

    astUnitEClass = createEClass(AST_UNIT);

    astNamespaceEClass = createEClass(AST_NAMESPACE);
    createEAttribute(astNamespaceEClass, AST_NAMESPACE__RVC);
    createEAttribute(astNamespaceEClass, AST_NAMESPACE__NAME);
    createEReference(astNamespaceEClass, AST_NAMESPACE__ENTITIES);
    createEReference(astNamespaceEClass, AST_NAMESPACE__IMPORTS);
    createEReference(astNamespaceEClass, AST_NAMESPACE__UNITS);
    createEReference(astNamespaceEClass, AST_NAMESPACE__FUNCTIONS);
    createEReference(astNamespaceEClass, AST_NAMESPACE__PROCEDURES);
    createEReference(astNamespaceEClass, AST_NAMESPACE__VARIABLES);
    createEReference(astNamespaceEClass, AST_NAMESPACE__EXTERNALS);
    createEReference(astNamespaceEClass, AST_NAMESPACE__ANNOTATIONS);
    createEReference(astNamespaceEClass, AST_NAMESPACE__TYPEDEFS);
    createEReference(astNamespaceEClass, AST_NAMESPACE__NAMESPACES);

    astEntityEClass = createEClass(AST_ENTITY);
    createEReference(astEntityEClass, AST_ENTITY__ANNOTATIONS);
    createEReference(astEntityEClass, AST_ENTITY__ACTOR);

    astAbstractActorEClass = createEClass(AST_ABSTRACT_ACTOR);
    createEAttribute(astAbstractActorEClass, AST_ABSTRACT_ACTOR__NAME);
    createEReference(astAbstractActorEClass, AST_ABSTRACT_ACTOR__PARAMETERS);
    createEReference(astAbstractActorEClass, AST_ABSTRACT_ACTOR__INPUTS);
    createEReference(astAbstractActorEClass, AST_ABSTRACT_ACTOR__OUTPUTS);

    importEClass = createEClass(IMPORT);
    createEAttribute(importEClass, IMPORT__KIND);
    createEAttribute(importEClass, IMPORT__IMPORTED_NAMESPACE);

    rvcImportEClass = createEClass(RVC_IMPORT);
    createEAttribute(rvcImportEClass, RVC_IMPORT__IMPORTED_NAMESPACE);

    groupImportTailEClass = createEClass(GROUP_IMPORT_TAIL);

    singleImportTailEClass = createEClass(SINGLE_IMPORT_TAIL);
    createEAttribute(singleImportTailEClass, SINGLE_IMPORT_TAIL__LOCAL_NAME_TOKEN);

    astNetworkEClass = createEClass(AST_NETWORK);
    createEReference(astNetworkEClass, AST_NETWORK__VARIABLES);
    createEReference(astNetworkEClass, AST_NETWORK__ENTITIES);
    createEReference(astNetworkEClass, AST_NETWORK__STRUCTURE);

    astEntityVariableEClass = createEClass(AST_ENTITY_VARIABLE);
    createEAttribute(astEntityVariableEClass, AST_ENTITY_VARIABLE__NAME);
    createEReference(astEntityVariableEClass, AST_ENTITY_VARIABLE__ENTITY);

    astEntityExprEClass = createEClass(AST_ENTITY_EXPR);

    astEntityInstanceExprEClass = createEClass(AST_ENTITY_INSTANCE_EXPR);
    createEReference(astEntityInstanceExprEClass, AST_ENTITY_INSTANCE_EXPR__TYPE);
    createEReference(astEntityInstanceExprEClass, AST_ENTITY_INSTANCE_EXPR__PARAMETERS);

    astAssignParameterEClass = createEClass(AST_ASSIGN_PARAMETER);
    createEAttribute(astAssignParameterEClass, AST_ASSIGN_PARAMETER__NAME);
    createEReference(astAssignParameterEClass, AST_ASSIGN_PARAMETER__VALUE);

    astEntityIfExprEClass = createEClass(AST_ENTITY_IF_EXPR);
    createEReference(astEntityIfExprEClass, AST_ENTITY_IF_EXPR__CONDITION);
    createEReference(astEntityIfExprEClass, AST_ENTITY_IF_EXPR__TRUE_ENTITY);
    createEReference(astEntityIfExprEClass, AST_ENTITY_IF_EXPR__FALSE_ENTITY);

    astEntityListExprEClass = createEClass(AST_ENTITY_LIST_EXPR);
    createEReference(astEntityListExprEClass, AST_ENTITY_LIST_EXPR__EXPRS);
    createEReference(astEntityListExprEClass, AST_ENTITY_LIST_EXPR__GENERATOR);

    astStructureEClass = createEClass(AST_STRUCTURE);
    createEReference(astStructureEClass, AST_STRUCTURE__CONNECTIONS);

    astStructureStatementEClass = createEClass(AST_STRUCTURE_STATEMENT);

    astStructureStatementConnectionEClass = createEClass(AST_STRUCTURE_STATEMENT_CONNECTION);
    createEReference(astStructureStatementConnectionEClass, AST_STRUCTURE_STATEMENT_CONNECTION__FROM);
    createEReference(astStructureStatementConnectionEClass, AST_STRUCTURE_STATEMENT_CONNECTION__FROM_INDEXES);
    createEAttribute(astStructureStatementConnectionEClass, AST_STRUCTURE_STATEMENT_CONNECTION__OUT_PORT);
    createEReference(astStructureStatementConnectionEClass, AST_STRUCTURE_STATEMENT_CONNECTION__TO);
    createEAttribute(astStructureStatementConnectionEClass, AST_STRUCTURE_STATEMENT_CONNECTION__IN_PORT);
    createEReference(astStructureStatementConnectionEClass, AST_STRUCTURE_STATEMENT_CONNECTION__ATTRIBUTE);

    astEntityVariableReferenceEClass = createEClass(AST_ENTITY_VARIABLE_REFERENCE);
    createEReference(astEntityVariableReferenceEClass, AST_ENTITY_VARIABLE_REFERENCE__VARIABLE);

    astConnectionAttributeEClass = createEClass(AST_CONNECTION_ATTRIBUTE);
    createEAttribute(astConnectionAttributeEClass, AST_CONNECTION_ATTRIBUTE__NAME);
    createEReference(astConnectionAttributeEClass, AST_CONNECTION_ATTRIBUTE__VALUE);

    astStructureStatementForeachEClass = createEClass(AST_STRUCTURE_STATEMENT_FOREACH);
    createEReference(astStructureStatementForeachEClass, AST_STRUCTURE_STATEMENT_FOREACH__GENERATORS);
    createEReference(astStructureStatementForeachEClass, AST_STRUCTURE_STATEMENT_FOREACH__VARIABLES);
    createEReference(astStructureStatementForeachEClass, AST_STRUCTURE_STATEMENT_FOREACH__STATEMENTS);

    astStructureStatementIfEClass = createEClass(AST_STRUCTURE_STATEMENT_IF);
    createEReference(astStructureStatementIfEClass, AST_STRUCTURE_STATEMENT_IF__CONDITION);
    createEReference(astStructureStatementIfEClass, AST_STRUCTURE_STATEMENT_IF__THEN);
    createEReference(astStructureStatementIfEClass, AST_STRUCTURE_STATEMENT_IF__ELSIFS);
    createEReference(astStructureStatementIfEClass, AST_STRUCTURE_STATEMENT_IF__ELSE);

    astStructureStatementElsifEClass = createEClass(AST_STRUCTURE_STATEMENT_ELSIF);
    createEReference(astStructureStatementElsifEClass, AST_STRUCTURE_STATEMENT_ELSIF__CONDITION);
    createEReference(astStructureStatementElsifEClass, AST_STRUCTURE_STATEMENT_ELSIF__THEN);

    astVariableEClass = createEClass(AST_VARIABLE);
    createEAttribute(astVariableEClass, AST_VARIABLE__CONSTANT);
    createEReference(astVariableEClass, AST_VARIABLE__VALUE);
    createEAttribute(astVariableEClass, AST_VARIABLE__NAME);
    createEReference(astVariableEClass, AST_VARIABLE__ANNOTATIONS);
    createEReference(astVariableEClass, AST_VARIABLE__TYPE);
    createEReference(astVariableEClass, AST_VARIABLE__DIMENSIONS);

    astTypeUserEClass = createEClass(AST_TYPE_USER);
    createEAttribute(astTypeUserEClass, AST_TYPE_USER__DEFINITION);
    createEReference(astTypeUserEClass, AST_TYPE_USER__PARAMETERS);
    createEReference(astTypeUserEClass, AST_TYPE_USER__TUPLES);
    createEAttribute(astTypeUserEClass, AST_TYPE_USER__VARIABLE);

    astTypeDefinitionParameterEClass = createEClass(AST_TYPE_DEFINITION_PARAMETER);
    createEReference(astTypeDefinitionParameterEClass, AST_TYPE_DEFINITION_PARAMETER__VALUE);
    createEReference(astTypeDefinitionParameterEClass, AST_TYPE_DEFINITION_PARAMETER__TYPE);

    astTaggedTupleEClass = createEClass(AST_TAGGED_TUPLE);
    createEAttribute(astTaggedTupleEClass, AST_TAGGED_TUPLE__NAME);
    createEReference(astTaggedTupleEClass, AST_TAGGED_TUPLE__FIELDS);

    astActorEClass = createEClass(AST_ACTOR);
    createEReference(astActorEClass, AST_ACTOR__FUNCTIONS);
    createEReference(astActorEClass, AST_ACTOR__PROCEDURES);
    createEReference(astActorEClass, AST_ACTOR__INVARIANTS);
    createEReference(astActorEClass, AST_ACTOR__ACTIONS);
    createEReference(astActorEClass, AST_ACTOR__PROCESSES);
    createEReference(astActorEClass, AST_ACTOR__INITIALIZES);
    createEReference(astActorEClass, AST_ACTOR__STATE_VARIABLES);
    createEReference(astActorEClass, AST_ACTOR__SCHEDULES);
    createEReference(astActorEClass, AST_ACTOR__SCHEDULE_REG_EXP);
    createEReference(astActorEClass, AST_ACTOR__PRIORITIES);

    astProcessDescriptionEClass = createEClass(AST_PROCESS_DESCRIPTION);
    createEAttribute(astProcessDescriptionEClass, AST_PROCESS_DESCRIPTION__REPEATED);
    createEReference(astProcessDescriptionEClass, AST_PROCESS_DESCRIPTION__STATEMENTS);

    astPortEClass = createEClass(AST_PORT);
    createEReference(astPortEClass, AST_PORT__ANNOTATIONS);
    createEReference(astPortEClass, AST_PORT__TYPE);
    createEAttribute(astPortEClass, AST_PORT__NAME);

    astExternalFunctionEClass = createEClass(AST_EXTERNAL_FUNCTION);

    astExternalProcedureEClass = createEClass(AST_EXTERNAL_PROCEDURE);

    astTagEClass = createEClass(AST_TAG);
    createEAttribute(astTagEClass, AST_TAG__IDENTIFIERS);

    astInvariantEClass = createEClass(AST_INVARIANT);
    createEReference(astInvariantEClass, AST_INVARIANT__INVARIANTS);

    astExternalActorEClass = createEClass(AST_EXTERNAL_ACTOR);

    astInequalityEClass = createEClass(AST_INEQUALITY);
    createEReference(astInequalityEClass, AST_INEQUALITY__TAGS);

    astPriorityEClass = createEClass(AST_PRIORITY);
    createEReference(astPriorityEClass, AST_PRIORITY__INEQUALITIES);

    astScheduleEClass = createEClass(AST_SCHEDULE);
    createEReference(astScheduleEClass, AST_SCHEDULE__INITIAL_STATE);
    createEReference(astScheduleEClass, AST_SCHEDULE__TRANSITIONS);

    astTransitionEClass = createEClass(AST_TRANSITION);
    createEReference(astTransitionEClass, AST_TRANSITION__SOURCE);
    createEReference(astTransitionEClass, AST_TRANSITION__TAGS);
    createEReference(astTransitionEClass, AST_TRANSITION__TARGET);

    astStateEClass = createEClass(AST_STATE);
    createEAttribute(astStateEClass, AST_STATE__NAME);

    regExpEClass = createEClass(REG_EXP);
    createEReference(regExpEClass, REG_EXP__EXP);

    astActionEClass = createEClass(AST_ACTION);
    createEReference(astActionEClass, AST_ACTION__ANNOTATIONS);
    createEReference(astActionEClass, AST_ACTION__TAG);
    createEReference(astActionEClass, AST_ACTION__INPUTS);
    createEReference(astActionEClass, AST_ACTION__OUTPUTS);
    createEReference(astActionEClass, AST_ACTION__GUARDS);
    createEReference(astActionEClass, AST_ACTION__VARIABLES);
    createEReference(astActionEClass, AST_ACTION__STATEMENTS);

    astInputPatternEClass = createEClass(AST_INPUT_PATTERN);
    createEReference(astInputPatternEClass, AST_INPUT_PATTERN__PORT);
    createEReference(astInputPatternEClass, AST_INPUT_PATTERN__TOKENS);
    createEReference(astInputPatternEClass, AST_INPUT_PATTERN__REPEAT);

    astOutputExpressionEClass = createEClass(AST_OUTPUT_EXPRESSION);
    createEReference(astOutputExpressionEClass, AST_OUTPUT_EXPRESSION__PORT);
    createEReference(astOutputExpressionEClass, AST_OUTPUT_EXPRESSION__VALUES);
    createEReference(astOutputExpressionEClass, AST_OUTPUT_EXPRESSION__REPEAT);

    astStatementAssignEClass = createEClass(AST_STATEMENT_ASSIGN);
    createEReference(astStatementAssignEClass, AST_STATEMENT_ASSIGN__LVALUE);
    createEReference(astStatementAssignEClass, AST_STATEMENT_ASSIGN__VALUE);

    astStatementCallEClass = createEClass(AST_STATEMENT_CALL);
    createEReference(astStatementCallEClass, AST_STATEMENT_CALL__ANNOTATIONS);
    createEReference(astStatementCallEClass, AST_STATEMENT_CALL__PROCEDURE);
    createEReference(astStatementCallEClass, AST_STATEMENT_CALL__PARAMETERS);

    astStatementForeachEClass = createEClass(AST_STATEMENT_FOREACH);
    createEReference(astStatementForeachEClass, AST_STATEMENT_FOREACH__GENERATORS);
    createEReference(astStatementForeachEClass, AST_STATEMENT_FOREACH__VARIABLES);
    createEReference(astStatementForeachEClass, AST_STATEMENT_FOREACH__STATEMENTS);

    astForeachGeneratorEClass = createEClass(AST_FOREACH_GENERATOR);
    createEReference(astForeachGeneratorEClass, AST_FOREACH_GENERATOR__VARIABLE);
    createEReference(astForeachGeneratorEClass, AST_FOREACH_GENERATOR__EXPRESSION);

    astStatementBlockEClass = createEClass(AST_STATEMENT_BLOCK);
    createEReference(astStatementBlockEClass, AST_STATEMENT_BLOCK__VARIABLES);
    createEReference(astStatementBlockEClass, AST_STATEMENT_BLOCK__STATEMENTS);

    astStatementIfEClass = createEClass(AST_STATEMENT_IF);
    createEReference(astStatementIfEClass, AST_STATEMENT_IF__CONDITION);
    createEReference(astStatementIfEClass, AST_STATEMENT_IF__THEN);
    createEReference(astStatementIfEClass, AST_STATEMENT_IF__ELSIFS);
    createEReference(astStatementIfEClass, AST_STATEMENT_IF__ELSE);

    astStatementElsifEClass = createEClass(AST_STATEMENT_ELSIF);
    createEReference(astStatementElsifEClass, AST_STATEMENT_ELSIF__CONDITION);
    createEReference(astStatementElsifEClass, AST_STATEMENT_ELSIF__THEN);

    astStatementWhileEClass = createEClass(AST_STATEMENT_WHILE);
    createEReference(astStatementWhileEClass, AST_STATEMENT_WHILE__CONDITION);
    createEReference(astStatementWhileEClass, AST_STATEMENT_WHILE__STATEMENTS);

    astStatementReadEClass = createEClass(AST_STATEMENT_READ);
    createEReference(astStatementReadEClass, AST_STATEMENT_READ__PORT);
    createEReference(astStatementReadEClass, AST_STATEMENT_READ__LVALUES);
    createEReference(astStatementReadEClass, AST_STATEMENT_READ__REPEAT);

    astStatementWriteEClass = createEClass(AST_STATEMENT_WRITE);
    createEReference(astStatementWriteEClass, AST_STATEMENT_WRITE__PORT);
    createEReference(astStatementWriteEClass, AST_STATEMENT_WRITE__VALUES);
    createEReference(astStatementWriteEClass, AST_STATEMENT_WRITE__REPEAT);

    astLValueEClass = createEClass(AST_LVALUE);
    createEReference(astLValueEClass, AST_LVALUE__TARGET);
    createEReference(astLValueEClass, AST_LVALUE__INDEXES);
    createEReference(astLValueEClass, AST_LVALUE__MEMBER);

    astStatementCaseEClass = createEClass(AST_STATEMENT_CASE);
    createEReference(astStatementCaseEClass, AST_STATEMENT_CASE__EXPRESSION);
    createEReference(astStatementCaseEClass, AST_STATEMENT_CASE__CASES);
    createEReference(astStatementCaseEClass, AST_STATEMENT_CASE__DEFAULT);

    astStatementAlternativeEClass = createEClass(AST_STATEMENT_ALTERNATIVE);
    createEReference(astStatementAlternativeEClass, AST_STATEMENT_ALTERNATIVE__PATTERN);
    createEReference(astStatementAlternativeEClass, AST_STATEMENT_ALTERNATIVE__GUARDS);
    createEReference(astStatementAlternativeEClass, AST_STATEMENT_ALTERNATIVE__STATEMENTS);

    astStatementEClass = createEClass(AST_STATEMENT);

    astExpressionEClass = createEClass(AST_EXPRESSION);

    astExpressionSymbolReferenceEClass = createEClass(AST_EXPRESSION_SYMBOL_REFERENCE);
    createEReference(astExpressionSymbolReferenceEClass, AST_EXPRESSION_SYMBOL_REFERENCE__ANNOTATIONS);
    createEReference(astExpressionSymbolReferenceEClass, AST_EXPRESSION_SYMBOL_REFERENCE__SYMBOL);
    createEReference(astExpressionSymbolReferenceEClass, AST_EXPRESSION_SYMBOL_REFERENCE__INDEXES);
    createEReference(astExpressionSymbolReferenceEClass, AST_EXPRESSION_SYMBOL_REFERENCE__MEMBER);
    createEAttribute(astExpressionSymbolReferenceEClass, AST_EXPRESSION_SYMBOL_REFERENCE__CTOR);
    createEAttribute(astExpressionSymbolReferenceEClass, AST_EXPRESSION_SYMBOL_REFERENCE__CALL);
    createEReference(astExpressionSymbolReferenceEClass, AST_EXPRESSION_SYMBOL_REFERENCE__PARAMETERS);

    astExpressionIfEClass = createEClass(AST_EXPRESSION_IF);
    createEReference(astExpressionIfEClass, AST_EXPRESSION_IF__CONDITION);
    createEReference(astExpressionIfEClass, AST_EXPRESSION_IF__THEN);
    createEReference(astExpressionIfEClass, AST_EXPRESSION_IF__ELSIFS);
    createEReference(astExpressionIfEClass, AST_EXPRESSION_IF__ELSE);

    astExpressionElsifEClass = createEClass(AST_EXPRESSION_ELSIF);
    createEReference(astExpressionElsifEClass, AST_EXPRESSION_ELSIF__CONDITION);
    createEReference(astExpressionElsifEClass, AST_EXPRESSION_ELSIF__THEN);

    astExpressionListEClass = createEClass(AST_EXPRESSION_LIST);
    createEReference(astExpressionListEClass, AST_EXPRESSION_LIST__EXPRESSIONS);
    createEReference(astExpressionListEClass, AST_EXPRESSION_LIST__GENERATORS);

    astGeneratorEClass = createEClass(AST_GENERATOR);
    createEReference(astGeneratorEClass, AST_GENERATOR__VARIABLE);
    createEReference(astGeneratorEClass, AST_GENERATOR__EXPRESSION);
    createEReference(astGeneratorEClass, AST_GENERATOR__FILTER);

    astExpressionSetEClass = createEClass(AST_EXPRESSION_SET);
    createEReference(astExpressionSetEClass, AST_EXPRESSION_SET__EXPRS);
    createEReference(astExpressionSetEClass, AST_EXPRESSION_SET__GENERATOR);

    astExpressionMapEClass = createEClass(AST_EXPRESSION_MAP);
    createEReference(astExpressionMapEClass, AST_EXPRESSION_MAP__MAPPINGS);
    createEReference(astExpressionMapEClass, AST_EXPRESSION_MAP__GENERATOR);

    mappingEClass = createEClass(MAPPING);
    createEReference(mappingEClass, MAPPING__KEY);
    createEReference(mappingEClass, MAPPING__VALUE);

    astExpressionLetEClass = createEClass(AST_EXPRESSION_LET);
    createEReference(astExpressionLetEClass, AST_EXPRESSION_LET__VARIABLES);
    createEReference(astExpressionLetEClass, AST_EXPRESSION_LET__EXPR);

    astExpressionLambdaEClass = createEClass(AST_EXPRESSION_LAMBDA);
    createEAttribute(astExpressionLambdaEClass, AST_EXPRESSION_LAMBDA__NAME);
    createEReference(astExpressionLambdaEClass, AST_EXPRESSION_LAMBDA__PARAMETERS);
    createEReference(astExpressionLambdaEClass, AST_EXPRESSION_LAMBDA__TYPE);
    createEReference(astExpressionLambdaEClass, AST_EXPRESSION_LAMBDA__VARIABLES);
    createEReference(astExpressionLambdaEClass, AST_EXPRESSION_LAMBDA__EXPRESSION);

    astExpressionProcEClass = createEClass(AST_EXPRESSION_PROC);
    createEAttribute(astExpressionProcEClass, AST_EXPRESSION_PROC__NAME);
    createEReference(astExpressionProcEClass, AST_EXPRESSION_PROC__PARAMETERS);
    createEReference(astExpressionProcEClass, AST_EXPRESSION_PROC__VARIABLES);
    createEReference(astExpressionProcEClass, AST_EXPRESSION_PROC__STATEMENTS);

    astExpressionCaseEClass = createEClass(AST_EXPRESSION_CASE);
    createEReference(astExpressionCaseEClass, AST_EXPRESSION_CASE__EXPRESSION);
    createEReference(astExpressionCaseEClass, AST_EXPRESSION_CASE__CASES);
    createEReference(astExpressionCaseEClass, AST_EXPRESSION_CASE__DEFAULT);

    astExpressionAlternativeEClass = createEClass(AST_EXPRESSION_ALTERNATIVE);
    createEReference(astExpressionAlternativeEClass, AST_EXPRESSION_ALTERNATIVE__PATTERN);
    createEReference(astExpressionAlternativeEClass, AST_EXPRESSION_ALTERNATIVE__GUARDS);
    createEReference(astExpressionAlternativeEClass, AST_EXPRESSION_ALTERNATIVE__EXPRESSION);

    astExpressionLiteralEClass = createEClass(AST_EXPRESSION_LITERAL);

    astExpressionBooleanEClass = createEClass(AST_EXPRESSION_BOOLEAN);
    createEAttribute(astExpressionBooleanEClass, AST_EXPRESSION_BOOLEAN__VALUE);

    astExpressionFloatEClass = createEClass(AST_EXPRESSION_FLOAT);
    createEAttribute(astExpressionFloatEClass, AST_EXPRESSION_FLOAT__VALUE);

    astExpressionIntegerEClass = createEClass(AST_EXPRESSION_INTEGER);
    createEAttribute(astExpressionIntegerEClass, AST_EXPRESSION_INTEGER__VALUE);

    astExpressionStringEClass = createEClass(AST_EXPRESSION_STRING);
    createEAttribute(astExpressionStringEClass, AST_EXPRESSION_STRING__VALUE);

    astPatternEClass = createEClass(AST_PATTERN);
    createEReference(astPatternEClass, AST_PATTERN__VARIABLE);
    createEReference(astPatternEClass, AST_PATTERN__PATTERNS);
    createEReference(astPatternEClass, AST_PATTERN__ALIAS);
    createEReference(astPatternEClass, AST_PATTERN__EXPRESSION);
    createEReference(astPatternEClass, AST_PATTERN__LITERAL);
    createEAttribute(astPatternEClass, AST_PATTERN__NAME);

    astTypeEClass = createEClass(AST_TYPE);
    createEAttribute(astTypeEClass, AST_TYPE__BUILTIN);
    createEReference(astTypeEClass, AST_TYPE__TYPE_PARAMS);
    createEReference(astTypeEClass, AST_TYPE__DIMENSIONS);
    createEReference(astTypeEClass, AST_TYPE__NAME);
    createEReference(astTypeEClass, AST_TYPE__DOMAIN);
    createEReference(astTypeEClass, AST_TYPE__CODOMAIN);

    astTypeParameterListEClass = createEClass(AST_TYPE_PARAMETER_LIST);
    createEReference(astTypeParameterListEClass, AST_TYPE_PARAMETER_LIST__PARAMS);

    astTypeParamEClass = createEClass(AST_TYPE_PARAM);
    createEAttribute(astTypeParamEClass, AST_TYPE_PARAM__NAME);
    createEReference(astTypeParamEClass, AST_TYPE_PARAM__VALUE);
    createEReference(astTypeParamEClass, AST_TYPE_PARAM__TYPE);

    astMemberAccessEClass = createEClass(AST_MEMBER_ACCESS);
    createEAttribute(astMemberAccessEClass, AST_MEMBER_ACCESS__NAME);
    createEReference(astMemberAccessEClass, AST_MEMBER_ACCESS__MEMBER_INDEX);

    astAnnotationEClass = createEClass(AST_ANNOTATION);
    createEAttribute(astAnnotationEClass, AST_ANNOTATION__NAME);
    createEReference(astAnnotationEClass, AST_ANNOTATION__ARGUMENTS);

    astAnnotationArgumentEClass = createEClass(AST_ANNOTATION_ARGUMENT);
    createEAttribute(astAnnotationArgumentEClass, AST_ANNOTATION_ARGUMENT__NAME);
    createEAttribute(astAnnotationArgumentEClass, AST_ANNOTATION_ARGUMENT__VALUE);

    astTupleEClass = createEClass(AST_TUPLE);

    astFunctionEClass = createEClass(AST_FUNCTION);
    createEReference(astFunctionEClass, AST_FUNCTION__PARAMETERS);
    createEReference(astFunctionEClass, AST_FUNCTION__VARIABLES);
    createEReference(astFunctionEClass, AST_FUNCTION__EXPRESSION);

    astProcedureEClass = createEClass(AST_PROCEDURE);
    createEReference(astProcedureEClass, AST_PROCEDURE__PARAMETERS);
    createEReference(astProcedureEClass, AST_PROCEDURE__VARIABLES);
    createEReference(astProcedureEClass, AST_PROCEDURE__STATEMENTS);

    regExpBinaryEClass = createEClass(REG_EXP_BINARY);
    createEReference(regExpBinaryEClass, REG_EXP_BINARY__LEFT);
    createEAttribute(regExpBinaryEClass, REG_EXP_BINARY__OPERATOR);
    createEReference(regExpBinaryEClass, REG_EXP_BINARY__RIGHT);

    regExpUnaryEClass = createEClass(REG_EXP_UNARY);
    createEReference(regExpUnaryEClass, REG_EXP_UNARY__CHILD);
    createEAttribute(regExpUnaryEClass, REG_EXP_UNARY__UNARY_OPERATOR);

    regExpTagEClass = createEClass(REG_EXP_TAG);
    createEReference(regExpTagEClass, REG_EXP_TAG__TAG);

    astInitializeEClass = createEClass(AST_INITIALIZE);

    astExpressionBinaryEClass = createEClass(AST_EXPRESSION_BINARY);
    createEReference(astExpressionBinaryEClass, AST_EXPRESSION_BINARY__LEFT);
    createEAttribute(astExpressionBinaryEClass, AST_EXPRESSION_BINARY__OPERATOR);
    createEReference(astExpressionBinaryEClass, AST_EXPRESSION_BINARY__RIGHT);

    astExpressionUnaryEClass = createEClass(AST_EXPRESSION_UNARY);
    createEAttribute(astExpressionUnaryEClass, AST_EXPRESSION_UNARY__UNARY_OPERATOR);
    createEReference(astExpressionUnaryEClass, AST_EXPRESSION_UNARY__EXPRESSION);

    astExpressionAssertionEClass = createEClass(AST_EXPRESSION_ASSERTION);
    createEReference(astExpressionAssertionEClass, AST_EXPRESSION_ASSERTION__TARGET);
    createEReference(astExpressionAssertionEClass, AST_EXPRESSION_ASSERTION__TYPE);

    // Create enums
    importKindEEnum = createEEnum(IMPORT_KIND);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    astPackageEClass.getESuperTypes().add(this.getCompilationUnit());
    astNamespaceEClass.getESuperTypes().add(this.getCompilationUnit());
    astNamespaceEClass.getESuperTypes().add(this.getAstPackage());
    astNamespaceEClass.getESuperTypes().add(this.getAstUnit());
    groupImportTailEClass.getESuperTypes().add(this.getImport());
    singleImportTailEClass.getESuperTypes().add(this.getImport());
    astNetworkEClass.getESuperTypes().add(this.getAstAbstractActor());
    astEntityInstanceExprEClass.getESuperTypes().add(this.getAstEntityExpr());
    astEntityIfExprEClass.getESuperTypes().add(this.getAstEntityExpr());
    astEntityListExprEClass.getESuperTypes().add(this.getAstEntityExpr());
    astStructureStatementConnectionEClass.getESuperTypes().add(this.getAstStructureStatement());
    astStructureStatementForeachEClass.getESuperTypes().add(this.getAstStructureStatement());
    astStructureStatementIfEClass.getESuperTypes().add(this.getAstStructureStatement());
    astTypeUserEClass.getESuperTypes().add(this.getAstVariable());
    astActorEClass.getESuperTypes().add(this.getAstAbstractActor());
    astExternalActorEClass.getESuperTypes().add(this.getAstAbstractActor());
    astStatementAssignEClass.getESuperTypes().add(this.getAstStatement());
    astStatementCallEClass.getESuperTypes().add(this.getAstStatement());
    astStatementForeachEClass.getESuperTypes().add(this.getAstStatement());
    astStatementBlockEClass.getESuperTypes().add(this.getAstStatement());
    astStatementIfEClass.getESuperTypes().add(this.getAstStatement());
    astStatementWhileEClass.getESuperTypes().add(this.getAstStatement());
    astStatementReadEClass.getESuperTypes().add(this.getAstStatement());
    astStatementWriteEClass.getESuperTypes().add(this.getAstStatement());
    astStatementCaseEClass.getESuperTypes().add(this.getAstStatement());
    astExpressionSymbolReferenceEClass.getESuperTypes().add(this.getAstExpression());
    astExpressionIfEClass.getESuperTypes().add(this.getAstExpression());
    astExpressionListEClass.getESuperTypes().add(this.getAstExpression());
    astExpressionSetEClass.getESuperTypes().add(this.getAstExpression());
    astExpressionMapEClass.getESuperTypes().add(this.getAstExpression());
    astExpressionLetEClass.getESuperTypes().add(this.getAstExpression());
    astExpressionLambdaEClass.getESuperTypes().add(this.getAstExpression());
    astExpressionProcEClass.getESuperTypes().add(this.getAstExpression());
    astExpressionCaseEClass.getESuperTypes().add(this.getAstExpression());
    astExpressionLiteralEClass.getESuperTypes().add(this.getAstExpression());
    astExpressionBooleanEClass.getESuperTypes().add(this.getAstExpressionLiteral());
    astExpressionFloatEClass.getESuperTypes().add(this.getAstExpressionLiteral());
    astExpressionIntegerEClass.getESuperTypes().add(this.getAstExpressionLiteral());
    astExpressionStringEClass.getESuperTypes().add(this.getAstExpressionLiteral());
    astTupleEClass.getESuperTypes().add(this.getAstTaggedTuple());
    astFunctionEClass.getESuperTypes().add(this.getAstVariable());
    astFunctionEClass.getESuperTypes().add(this.getAstExternalFunction());
    astProcedureEClass.getESuperTypes().add(this.getAstVariable());
    astProcedureEClass.getESuperTypes().add(this.getAstExternalProcedure());
    regExpBinaryEClass.getESuperTypes().add(this.getRegExp());
    regExpUnaryEClass.getESuperTypes().add(this.getRegExp());
    regExpTagEClass.getESuperTypes().add(this.getRegExp());
    astInitializeEClass.getESuperTypes().add(this.getAstAction());
    astExpressionBinaryEClass.getESuperTypes().add(this.getAstExpression());
    astExpressionUnaryEClass.getESuperTypes().add(this.getAstExpression());
    astExpressionAssertionEClass.getESuperTypes().add(this.getAstExpression());

    // Initialize classes and features; add operations and parameters
    initEClass(compilationUnitEClass, CompilationUnit.class, "CompilationUnit", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(astPackageEClass, AstPackage.class, "AstPackage", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(astUnitEClass, AstUnit.class, "AstUnit", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(astNamespaceEClass, AstNamespace.class, "AstNamespace", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAstNamespace_Rvc(), ecorePackage.getEBoolean(), "rvc", null, 0, 1, AstNamespace.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getAstNamespace_Name(), ecorePackage.getEString(), "name", null, 0, 1, AstNamespace.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstNamespace_Entities(), this.getAstEntity(), null, "entities", null, 0, -1, AstNamespace.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstNamespace_Imports(), ecorePackage.getEObject(), null, "imports", null, 0, -1, AstNamespace.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstNamespace_Units(), this.getAstUnit(), null, "units", null, 0, -1, AstNamespace.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstNamespace_Functions(), this.getAstVariable(), null, "functions", null, 0, -1, AstNamespace.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstNamespace_Procedures(), this.getAstVariable(), null, "procedures", null, 0, -1, AstNamespace.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstNamespace_Variables(), this.getAstVariable(), null, "variables", null, 0, -1, AstNamespace.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstNamespace_Externals(), ecorePackage.getEObject(), null, "externals", null, 0, -1, AstNamespace.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstNamespace_Annotations(), this.getAstAnnotation(), null, "annotations", null, 0, -1, AstNamespace.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstNamespace_Typedefs(), this.getAstTypeUser(), null, "typedefs", null, 0, -1, AstNamespace.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstNamespace_Namespaces(), this.getAstNamespace(), null, "namespaces", null, 0, -1, AstNamespace.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astEntityEClass, AstEntity.class, "AstEntity", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstEntity_Annotations(), this.getAstAnnotation(), null, "annotations", null, 0, -1, AstEntity.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstEntity_Actor(), this.getAstAbstractActor(), null, "actor", null, 0, 1, AstEntity.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astAbstractActorEClass, AstAbstractActor.class, "AstAbstractActor", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAstAbstractActor_Name(), ecorePackage.getEString(), "name", null, 0, 1, AstAbstractActor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstAbstractActor_Parameters(), this.getAstVariable(), null, "parameters", null, 0, -1, AstAbstractActor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstAbstractActor_Inputs(), this.getAstPort(), null, "inputs", null, 0, -1, AstAbstractActor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstAbstractActor_Outputs(), this.getAstPort(), null, "outputs", null, 0, -1, AstAbstractActor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(importEClass, Import.class, "Import", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getImport_Kind(), this.getImportKind(), "kind", null, 0, 1, Import.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getImport_ImportedNamespace(), ecorePackage.getEString(), "importedNamespace", null, 0, 1, Import.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(rvcImportEClass, RvcImport.class, "RvcImport", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getRvcImport_ImportedNamespace(), ecorePackage.getEString(), "importedNamespace", null, 0, 1, RvcImport.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(groupImportTailEClass, GroupImportTail.class, "GroupImportTail", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(singleImportTailEClass, SingleImportTail.class, "SingleImportTail", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSingleImportTail_LocalNameToken(), ecorePackage.getEString(), "localNameToken", null, 0, 1, SingleImportTail.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astNetworkEClass, AstNetwork.class, "AstNetwork", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstNetwork_Variables(), this.getAstVariable(), null, "variables", null, 0, -1, AstNetwork.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstNetwork_Entities(), this.getAstEntityVariable(), null, "entities", null, 0, -1, AstNetwork.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstNetwork_Structure(), this.getAstStructure(), null, "structure", null, 0, 1, AstNetwork.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astEntityVariableEClass, AstEntityVariable.class, "AstEntityVariable", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAstEntityVariable_Name(), ecorePackage.getEString(), "name", null, 0, 1, AstEntityVariable.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstEntityVariable_Entity(), this.getAstEntityExpr(), null, "entity", null, 0, 1, AstEntityVariable.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astEntityExprEClass, AstEntityExpr.class, "AstEntityExpr", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(astEntityInstanceExprEClass, AstEntityInstanceExpr.class, "AstEntityInstanceExpr", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstEntityInstanceExpr_Type(), this.getAstEntity(), null, "type", null, 0, 1, AstEntityInstanceExpr.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstEntityInstanceExpr_Parameters(), this.getAstAssignParameter(), null, "parameters", null, 0, -1, AstEntityInstanceExpr.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astAssignParameterEClass, AstAssignParameter.class, "AstAssignParameter", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAstAssignParameter_Name(), ecorePackage.getEString(), "name", null, 0, 1, AstAssignParameter.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstAssignParameter_Value(), this.getAstExpression(), null, "value", null, 0, 1, AstAssignParameter.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astEntityIfExprEClass, AstEntityIfExpr.class, "AstEntityIfExpr", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstEntityIfExpr_Condition(), this.getAstExpression(), null, "condition", null, 0, 1, AstEntityIfExpr.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstEntityIfExpr_TrueEntity(), this.getAstEntityExpr(), null, "trueEntity", null, 0, 1, AstEntityIfExpr.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstEntityIfExpr_FalseEntity(), this.getAstEntityExpr(), null, "falseEntity", null, 0, 1, AstEntityIfExpr.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astEntityListExprEClass, AstEntityListExpr.class, "AstEntityListExpr", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstEntityListExpr_Exprs(), this.getAstEntityExpr(), null, "exprs", null, 0, -1, AstEntityListExpr.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstEntityListExpr_Generator(), this.getAstGenerator(), null, "generator", null, 0, 1, AstEntityListExpr.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astStructureEClass, AstStructure.class, "AstStructure", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstStructure_Connections(), this.getAstStructureStatement(), null, "connections", null, 0, -1, AstStructure.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astStructureStatementEClass, AstStructureStatement.class, "AstStructureStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(astStructureStatementConnectionEClass, AstStructureStatementConnection.class, "AstStructureStatementConnection", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstStructureStatementConnection_From(), this.getAstEntityVariableReference(), null, "from", null, 0, 1, AstStructureStatementConnection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstStructureStatementConnection_FromIndexes(), this.getAstExpression(), null, "fromIndexes", null, 0, -1, AstStructureStatementConnection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getAstStructureStatementConnection_OutPort(), ecorePackage.getEString(), "outPort", null, 0, 1, AstStructureStatementConnection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstStructureStatementConnection_To(), this.getAstEntityVariableReference(), null, "to", null, 0, 1, AstStructureStatementConnection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getAstStructureStatementConnection_InPort(), ecorePackage.getEString(), "inPort", null, 0, 1, AstStructureStatementConnection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstStructureStatementConnection_Attribute(), this.getAstConnectionAttribute(), null, "attribute", null, 0, -1, AstStructureStatementConnection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astEntityVariableReferenceEClass, AstEntityVariableReference.class, "AstEntityVariableReference", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstEntityVariableReference_Variable(), this.getAstEntityVariable(), null, "variable", null, 0, 1, AstEntityVariableReference.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astConnectionAttributeEClass, AstConnectionAttribute.class, "AstConnectionAttribute", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAstConnectionAttribute_Name(), ecorePackage.getEString(), "name", null, 0, 1, AstConnectionAttribute.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstConnectionAttribute_Value(), this.getAstExpression(), null, "value", null, 0, 1, AstConnectionAttribute.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astStructureStatementForeachEClass, AstStructureStatementForeach.class, "AstStructureStatementForeach", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstStructureStatementForeach_Generators(), this.getAstForeachGenerator(), null, "generators", null, 0, -1, AstStructureStatementForeach.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstStructureStatementForeach_Variables(), this.getAstVariable(), null, "variables", null, 0, -1, AstStructureStatementForeach.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstStructureStatementForeach_Statements(), this.getAstStructureStatement(), null, "statements", null, 0, -1, AstStructureStatementForeach.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astStructureStatementIfEClass, AstStructureStatementIf.class, "AstStructureStatementIf", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstStructureStatementIf_Condition(), this.getAstExpression(), null, "condition", null, 0, 1, AstStructureStatementIf.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstStructureStatementIf_Then(), this.getAstStructureStatement(), null, "then", null, 0, -1, AstStructureStatementIf.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstStructureStatementIf_Elsifs(), this.getAstStructureStatementElsif(), null, "elsifs", null, 0, -1, AstStructureStatementIf.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstStructureStatementIf_Else(), this.getAstStructureStatement(), null, "else", null, 0, -1, AstStructureStatementIf.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astStructureStatementElsifEClass, AstStructureStatementElsif.class, "AstStructureStatementElsif", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstStructureStatementElsif_Condition(), this.getAstExpression(), null, "condition", null, 0, 1, AstStructureStatementElsif.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstStructureStatementElsif_Then(), this.getAstStructureStatement(), null, "then", null, 0, -1, AstStructureStatementElsif.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astVariableEClass, AstVariable.class, "AstVariable", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAstVariable_Constant(), ecorePackage.getEBoolean(), "constant", null, 0, 1, AstVariable.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstVariable_Value(), this.getAstExpression(), null, "value", null, 0, 1, AstVariable.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getAstVariable_Name(), ecorePackage.getEString(), "name", null, 0, 1, AstVariable.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstVariable_Annotations(), this.getAstAnnotation(), null, "annotations", null, 0, -1, AstVariable.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstVariable_Type(), this.getAstType(), null, "type", null, 0, 1, AstVariable.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstVariable_Dimensions(), this.getAstExpression(), null, "dimensions", null, 0, -1, AstVariable.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astTypeUserEClass, AstTypeUser.class, "AstTypeUser", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAstTypeUser_Definition(), ecorePackage.getEBoolean(), "definition", null, 0, 1, AstTypeUser.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstTypeUser_Parameters(), this.getAstTypeDefinitionParameter(), null, "parameters", null, 0, -1, AstTypeUser.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstTypeUser_Tuples(), this.getAstTaggedTuple(), null, "tuples", null, 0, -1, AstTypeUser.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getAstTypeUser_Variable(), ecorePackage.getEBoolean(), "variable", null, 0, 1, AstTypeUser.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astTypeDefinitionParameterEClass, AstTypeDefinitionParameter.class, "AstTypeDefinitionParameter", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstTypeDefinitionParameter_Value(), this.getAstVariable(), null, "value", null, 0, 1, AstTypeDefinitionParameter.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstTypeDefinitionParameter_Type(), this.getAstTypeUser(), null, "type", null, 0, 1, AstTypeDefinitionParameter.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astTaggedTupleEClass, AstTaggedTuple.class, "AstTaggedTuple", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAstTaggedTuple_Name(), ecorePackage.getEString(), "name", null, 0, 1, AstTaggedTuple.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstTaggedTuple_Fields(), this.getAstVariable(), null, "fields", null, 0, -1, AstTaggedTuple.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astActorEClass, AstActor.class, "AstActor", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstActor_Functions(), this.getAstVariable(), null, "functions", null, 0, -1, AstActor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstActor_Procedures(), this.getAstVariable(), null, "procedures", null, 0, -1, AstActor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstActor_Invariants(), this.getAstInvariant(), null, "invariants", null, 0, -1, AstActor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstActor_Actions(), this.getAstAction(), null, "actions", null, 0, -1, AstActor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstActor_Processes(), this.getAstProcessDescription(), null, "processes", null, 0, -1, AstActor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstActor_Initializes(), this.getAstAction(), null, "initializes", null, 0, -1, AstActor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstActor_StateVariables(), this.getAstVariable(), null, "stateVariables", null, 0, -1, AstActor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstActor_Schedules(), this.getAstSchedule(), null, "schedules", null, 0, 1, AstActor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstActor_ScheduleRegExp(), this.getRegExp(), null, "scheduleRegExp", null, 0, 1, AstActor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstActor_Priorities(), this.getAstPriority(), null, "priorities", null, 0, -1, AstActor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astProcessDescriptionEClass, AstProcessDescription.class, "AstProcessDescription", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAstProcessDescription_Repeated(), ecorePackage.getEBoolean(), "repeated", null, 0, 1, AstProcessDescription.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstProcessDescription_Statements(), this.getAstStatement(), null, "statements", null, 0, -1, AstProcessDescription.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astPortEClass, AstPort.class, "AstPort", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstPort_Annotations(), this.getAstAnnotation(), null, "annotations", null, 0, -1, AstPort.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstPort_Type(), this.getAstType(), null, "type", null, 0, 1, AstPort.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getAstPort_Name(), ecorePackage.getEString(), "name", null, 0, 1, AstPort.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astExternalFunctionEClass, AstExternalFunction.class, "AstExternalFunction", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(astExternalProcedureEClass, AstExternalProcedure.class, "AstExternalProcedure", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(astTagEClass, AstTag.class, "AstTag", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAstTag_Identifiers(), ecorePackage.getEString(), "identifiers", null, 0, -1, AstTag.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astInvariantEClass, AstInvariant.class, "AstInvariant", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstInvariant_Invariants(), this.getAstExpression(), null, "invariants", null, 0, -1, AstInvariant.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astExternalActorEClass, AstExternalActor.class, "AstExternalActor", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(astInequalityEClass, AstInequality.class, "AstInequality", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstInequality_Tags(), this.getAstTag(), null, "tags", null, 0, -1, AstInequality.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astPriorityEClass, AstPriority.class, "AstPriority", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstPriority_Inequalities(), this.getAstInequality(), null, "inequalities", null, 0, -1, AstPriority.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astScheduleEClass, AstSchedule.class, "AstSchedule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstSchedule_InitialState(), this.getAstState(), null, "initialState", null, 0, 1, AstSchedule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstSchedule_Transitions(), this.getAstTransition(), null, "transitions", null, 0, -1, AstSchedule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astTransitionEClass, AstTransition.class, "AstTransition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstTransition_Source(), this.getAstState(), null, "source", null, 0, 1, AstTransition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstTransition_Tags(), this.getAstTag(), null, "tags", null, 0, -1, AstTransition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstTransition_Target(), this.getAstState(), null, "target", null, 0, 1, AstTransition.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astStateEClass, AstState.class, "AstState", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAstState_Name(), ecorePackage.getEString(), "name", null, 0, 1, AstState.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(regExpEClass, RegExp.class, "RegExp", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getRegExp_Exp(), this.getRegExp(), null, "exp", null, 0, 1, RegExp.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astActionEClass, AstAction.class, "AstAction", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstAction_Annotations(), this.getAstAnnotation(), null, "annotations", null, 0, -1, AstAction.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstAction_Tag(), this.getAstTag(), null, "tag", null, 0, 1, AstAction.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstAction_Inputs(), this.getAstInputPattern(), null, "inputs", null, 0, -1, AstAction.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstAction_Outputs(), this.getAstOutputExpression(), null, "outputs", null, 0, -1, AstAction.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstAction_Guards(), this.getAstExpression(), null, "guards", null, 0, -1, AstAction.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstAction_Variables(), this.getAstVariable(), null, "variables", null, 0, -1, AstAction.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstAction_Statements(), this.getAstStatement(), null, "statements", null, 0, -1, AstAction.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astInputPatternEClass, AstInputPattern.class, "AstInputPattern", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstInputPattern_Port(), this.getAstPort(), null, "port", null, 0, 1, AstInputPattern.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstInputPattern_Tokens(), this.getAstPattern(), null, "tokens", null, 0, -1, AstInputPattern.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstInputPattern_Repeat(), this.getAstExpression(), null, "repeat", null, 0, 1, AstInputPattern.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astOutputExpressionEClass, AstOutputExpression.class, "AstOutputExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstOutputExpression_Port(), this.getAstPort(), null, "port", null, 0, 1, AstOutputExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstOutputExpression_Values(), this.getAstExpression(), null, "values", null, 0, -1, AstOutputExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstOutputExpression_Repeat(), this.getAstExpression(), null, "repeat", null, 0, 1, AstOutputExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astStatementAssignEClass, AstStatementAssign.class, "AstStatementAssign", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstStatementAssign_Lvalue(), this.getAstLValue(), null, "lvalue", null, 0, 1, AstStatementAssign.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstStatementAssign_Value(), this.getAstExpression(), null, "value", null, 0, 1, AstStatementAssign.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astStatementCallEClass, AstStatementCall.class, "AstStatementCall", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstStatementCall_Annotations(), this.getAstAnnotation(), null, "annotations", null, 0, -1, AstStatementCall.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstStatementCall_Procedure(), this.getAstProcedure(), null, "procedure", null, 0, 1, AstStatementCall.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstStatementCall_Parameters(), this.getAstExpression(), null, "parameters", null, 0, -1, AstStatementCall.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astStatementForeachEClass, AstStatementForeach.class, "AstStatementForeach", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstStatementForeach_Generators(), this.getAstForeachGenerator(), null, "generators", null, 0, -1, AstStatementForeach.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstStatementForeach_Variables(), this.getAstVariable(), null, "variables", null, 0, -1, AstStatementForeach.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstStatementForeach_Statements(), this.getAstStatement(), null, "statements", null, 0, -1, AstStatementForeach.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astForeachGeneratorEClass, AstForeachGenerator.class, "AstForeachGenerator", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstForeachGenerator_Variable(), this.getAstVariable(), null, "variable", null, 0, 1, AstForeachGenerator.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstForeachGenerator_Expression(), this.getAstExpression(), null, "expression", null, 0, 1, AstForeachGenerator.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astStatementBlockEClass, AstStatementBlock.class, "AstStatementBlock", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstStatementBlock_Variables(), this.getAstVariable(), null, "variables", null, 0, -1, AstStatementBlock.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstStatementBlock_Statements(), this.getAstStatement(), null, "statements", null, 0, -1, AstStatementBlock.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astStatementIfEClass, AstStatementIf.class, "AstStatementIf", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstStatementIf_Condition(), this.getAstExpression(), null, "condition", null, 0, 1, AstStatementIf.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstStatementIf_Then(), this.getAstStatement(), null, "then", null, 0, -1, AstStatementIf.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstStatementIf_Elsifs(), this.getAstStatementElsif(), null, "elsifs", null, 0, -1, AstStatementIf.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstStatementIf_Else(), this.getAstStatement(), null, "else", null, 0, -1, AstStatementIf.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astStatementElsifEClass, AstStatementElsif.class, "AstStatementElsif", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstStatementElsif_Condition(), this.getAstExpression(), null, "condition", null, 0, 1, AstStatementElsif.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstStatementElsif_Then(), this.getAstStatement(), null, "then", null, 0, -1, AstStatementElsif.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astStatementWhileEClass, AstStatementWhile.class, "AstStatementWhile", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstStatementWhile_Condition(), this.getAstExpression(), null, "condition", null, 0, 1, AstStatementWhile.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstStatementWhile_Statements(), this.getAstStatement(), null, "statements", null, 0, -1, AstStatementWhile.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astStatementReadEClass, AstStatementRead.class, "AstStatementRead", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstStatementRead_Port(), this.getAstPort(), null, "port", null, 0, 1, AstStatementRead.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstStatementRead_Lvalues(), this.getAstLValue(), null, "lvalues", null, 0, -1, AstStatementRead.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstStatementRead_Repeat(), this.getAstExpression(), null, "repeat", null, 0, 1, AstStatementRead.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astStatementWriteEClass, AstStatementWrite.class, "AstStatementWrite", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstStatementWrite_Port(), this.getAstPort(), null, "port", null, 0, 1, AstStatementWrite.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstStatementWrite_Values(), this.getAstExpression(), null, "values", null, 0, -1, AstStatementWrite.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstStatementWrite_Repeat(), this.getAstExpression(), null, "repeat", null, 0, 1, AstStatementWrite.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astLValueEClass, AstLValue.class, "AstLValue", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstLValue_Target(), this.getAstVariable(), null, "target", null, 0, 1, AstLValue.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstLValue_Indexes(), this.getAstExpression(), null, "indexes", null, 0, -1, AstLValue.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstLValue_Member(), this.getAstMemberAccess(), null, "member", null, 0, -1, AstLValue.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astStatementCaseEClass, AstStatementCase.class, "AstStatementCase", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstStatementCase_Expression(), this.getAstExpressionSymbolReference(), null, "expression", null, 0, 1, AstStatementCase.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstStatementCase_Cases(), this.getAstStatementAlternative(), null, "cases", null, 0, -1, AstStatementCase.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstStatementCase_Default(), this.getAstStatement(), null, "default", null, 0, 1, AstStatementCase.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astStatementAlternativeEClass, AstStatementAlternative.class, "AstStatementAlternative", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstStatementAlternative_Pattern(), this.getAstPattern(), null, "pattern", null, 0, 1, AstStatementAlternative.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstStatementAlternative_Guards(), this.getAstExpression(), null, "guards", null, 0, -1, AstStatementAlternative.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstStatementAlternative_Statements(), this.getAstStatement(), null, "statements", null, 0, -1, AstStatementAlternative.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astStatementEClass, AstStatement.class, "AstStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(astExpressionEClass, AstExpression.class, "AstExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(astExpressionSymbolReferenceEClass, AstExpressionSymbolReference.class, "AstExpressionSymbolReference", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstExpressionSymbolReference_Annotations(), this.getAstAnnotation(), null, "annotations", null, 0, -1, AstExpressionSymbolReference.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstExpressionSymbolReference_Symbol(), this.getAstVariable(), null, "symbol", null, 0, 1, AstExpressionSymbolReference.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstExpressionSymbolReference_Indexes(), this.getAstExpression(), null, "indexes", null, 0, -1, AstExpressionSymbolReference.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstExpressionSymbolReference_Member(), this.getAstMemberAccess(), null, "member", null, 0, -1, AstExpressionSymbolReference.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getAstExpressionSymbolReference_Ctor(), ecorePackage.getEString(), "ctor", null, 0, 1, AstExpressionSymbolReference.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getAstExpressionSymbolReference_Call(), ecorePackage.getEBoolean(), "call", null, 0, 1, AstExpressionSymbolReference.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstExpressionSymbolReference_Parameters(), this.getAstExpression(), null, "parameters", null, 0, -1, AstExpressionSymbolReference.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astExpressionIfEClass, AstExpressionIf.class, "AstExpressionIf", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstExpressionIf_Condition(), this.getAstExpression(), null, "condition", null, 0, 1, AstExpressionIf.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstExpressionIf_Then(), this.getAstExpression(), null, "then", null, 0, 1, AstExpressionIf.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstExpressionIf_Elsifs(), this.getAstExpressionElsif(), null, "elsifs", null, 0, -1, AstExpressionIf.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstExpressionIf_Else(), this.getAstExpression(), null, "else", null, 0, 1, AstExpressionIf.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astExpressionElsifEClass, AstExpressionElsif.class, "AstExpressionElsif", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstExpressionElsif_Condition(), this.getAstExpression(), null, "condition", null, 0, 1, AstExpressionElsif.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstExpressionElsif_Then(), this.getAstExpression(), null, "then", null, 0, 1, AstExpressionElsif.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astExpressionListEClass, AstExpressionList.class, "AstExpressionList", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstExpressionList_Expressions(), this.getAstExpression(), null, "expressions", null, 0, -1, AstExpressionList.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstExpressionList_Generators(), this.getAstGenerator(), null, "generators", null, 0, -1, AstExpressionList.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astGeneratorEClass, AstGenerator.class, "AstGenerator", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstGenerator_Variable(), this.getAstVariable(), null, "variable", null, 0, 1, AstGenerator.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstGenerator_Expression(), this.getAstExpression(), null, "expression", null, 0, 1, AstGenerator.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstGenerator_Filter(), this.getAstExpression(), null, "filter", null, 0, -1, AstGenerator.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astExpressionSetEClass, AstExpressionSet.class, "AstExpressionSet", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstExpressionSet_Exprs(), this.getAstExpression(), null, "exprs", null, 0, -1, AstExpressionSet.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstExpressionSet_Generator(), this.getAstGenerator(), null, "generator", null, 0, 1, AstExpressionSet.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astExpressionMapEClass, AstExpressionMap.class, "AstExpressionMap", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstExpressionMap_Mappings(), this.getMapping(), null, "mappings", null, 0, -1, AstExpressionMap.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstExpressionMap_Generator(), this.getAstGenerator(), null, "generator", null, 0, 1, AstExpressionMap.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(mappingEClass, Mapping.class, "Mapping", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMapping_Key(), this.getAstExpression(), null, "key", null, 0, 1, Mapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMapping_Value(), this.getAstExpression(), null, "value", null, 0, 1, Mapping.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astExpressionLetEClass, AstExpressionLet.class, "AstExpressionLet", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstExpressionLet_Variables(), this.getAstVariable(), null, "variables", null, 0, -1, AstExpressionLet.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstExpressionLet_Expr(), this.getAstExpression(), null, "expr", null, 0, 1, AstExpressionLet.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astExpressionLambdaEClass, AstExpressionLambda.class, "AstExpressionLambda", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAstExpressionLambda_Name(), ecorePackage.getEString(), "name", null, 0, 1, AstExpressionLambda.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstExpressionLambda_Parameters(), this.getAstVariable(), null, "parameters", null, 0, -1, AstExpressionLambda.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstExpressionLambda_Type(), this.getAstType(), null, "type", null, 0, 1, AstExpressionLambda.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstExpressionLambda_Variables(), this.getAstVariable(), null, "variables", null, 0, -1, AstExpressionLambda.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstExpressionLambda_Expression(), this.getAstExpression(), null, "expression", null, 0, 1, AstExpressionLambda.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astExpressionProcEClass, AstExpressionProc.class, "AstExpressionProc", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAstExpressionProc_Name(), ecorePackage.getEString(), "name", null, 0, 1, AstExpressionProc.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstExpressionProc_Parameters(), this.getAstVariable(), null, "parameters", null, 0, -1, AstExpressionProc.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstExpressionProc_Variables(), this.getAstVariable(), null, "variables", null, 0, -1, AstExpressionProc.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstExpressionProc_Statements(), this.getAstStatement(), null, "statements", null, 0, -1, AstExpressionProc.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astExpressionCaseEClass, AstExpressionCase.class, "AstExpressionCase", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstExpressionCase_Expression(), this.getAstExpressionSymbolReference(), null, "expression", null, 0, 1, AstExpressionCase.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstExpressionCase_Cases(), this.getAstExpressionAlternative(), null, "cases", null, 0, -1, AstExpressionCase.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstExpressionCase_Default(), this.getAstExpression(), null, "default", null, 0, 1, AstExpressionCase.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astExpressionAlternativeEClass, AstExpressionAlternative.class, "AstExpressionAlternative", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstExpressionAlternative_Pattern(), this.getAstPattern(), null, "pattern", null, 0, 1, AstExpressionAlternative.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstExpressionAlternative_Guards(), this.getAstExpression(), null, "guards", null, 0, -1, AstExpressionAlternative.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstExpressionAlternative_Expression(), this.getAstExpression(), null, "expression", null, 0, 1, AstExpressionAlternative.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astExpressionLiteralEClass, AstExpressionLiteral.class, "AstExpressionLiteral", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(astExpressionBooleanEClass, AstExpressionBoolean.class, "AstExpressionBoolean", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAstExpressionBoolean_Value(), ecorePackage.getEBoolean(), "value", null, 0, 1, AstExpressionBoolean.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astExpressionFloatEClass, AstExpressionFloat.class, "AstExpressionFloat", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAstExpressionFloat_Value(), ecorePackage.getEFloat(), "value", null, 0, 1, AstExpressionFloat.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astExpressionIntegerEClass, AstExpressionInteger.class, "AstExpressionInteger", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAstExpressionInteger_Value(), ecorePackage.getEBigInteger(), "value", null, 0, 1, AstExpressionInteger.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astExpressionStringEClass, AstExpressionString.class, "AstExpressionString", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAstExpressionString_Value(), ecorePackage.getEString(), "value", null, 0, 1, AstExpressionString.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astPatternEClass, AstPattern.class, "AstPattern", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstPattern_Variable(), this.getAstVariable(), null, "variable", null, 0, 1, AstPattern.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstPattern_Patterns(), this.getAstPattern(), null, "patterns", null, 0, -1, AstPattern.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstPattern_Alias(), this.getAstPattern(), null, "alias", null, 0, 1, AstPattern.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstPattern_Expression(), ecorePackage.getEObject(), null, "expression", null, 0, 1, AstPattern.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstPattern_Literal(), this.getAstExpressionLiteral(), null, "literal", null, 0, 1, AstPattern.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getAstPattern_Name(), ecorePackage.getEString(), "name", null, 0, 1, AstPattern.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astTypeEClass, AstType.class, "AstType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAstType_Builtin(), ecorePackage.getEString(), "builtin", null, 0, 1, AstType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstType_TypeParams(), this.getAstTypeParameterList(), null, "typeParams", null, 0, 1, AstType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstType_Dimensions(), this.getAstExpression(), null, "dimensions", null, 0, -1, AstType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstType_Name(), this.getAstTypeUser(), null, "name", null, 0, 1, AstType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstType_Domain(), this.getAstType(), null, "domain", null, 0, -1, AstType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstType_Codomain(), this.getAstType(), null, "codomain", null, 0, 1, AstType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astTypeParameterListEClass, AstTypeParameterList.class, "AstTypeParameterList", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstTypeParameterList_Params(), this.getAstTypeParam(), null, "params", null, 0, -1, AstTypeParameterList.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astTypeParamEClass, AstTypeParam.class, "AstTypeParam", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAstTypeParam_Name(), ecorePackage.getEString(), "name", null, 0, 1, AstTypeParam.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstTypeParam_Value(), this.getAstExpression(), null, "value", null, 0, 1, AstTypeParam.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstTypeParam_Type(), this.getAstType(), null, "type", null, 0, 1, AstTypeParam.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astMemberAccessEClass, AstMemberAccess.class, "AstMemberAccess", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAstMemberAccess_Name(), ecorePackage.getEString(), "name", null, 0, 1, AstMemberAccess.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstMemberAccess_MemberIndex(), this.getAstExpression(), null, "memberIndex", null, 0, -1, AstMemberAccess.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astAnnotationEClass, AstAnnotation.class, "AstAnnotation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAstAnnotation_Name(), ecorePackage.getEString(), "name", null, 0, 1, AstAnnotation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstAnnotation_Arguments(), this.getAstAnnotationArgument(), null, "arguments", null, 0, -1, AstAnnotation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astAnnotationArgumentEClass, AstAnnotationArgument.class, "AstAnnotationArgument", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAstAnnotationArgument_Name(), ecorePackage.getEString(), "name", null, 0, 1, AstAnnotationArgument.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getAstAnnotationArgument_Value(), ecorePackage.getEString(), "value", null, 0, 1, AstAnnotationArgument.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astTupleEClass, AstTuple.class, "AstTuple", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(astFunctionEClass, AstFunction.class, "AstFunction", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstFunction_Parameters(), this.getAstVariable(), null, "parameters", null, 0, -1, AstFunction.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstFunction_Variables(), this.getAstVariable(), null, "variables", null, 0, -1, AstFunction.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstFunction_Expression(), this.getAstExpression(), null, "expression", null, 0, 1, AstFunction.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astProcedureEClass, AstProcedure.class, "AstProcedure", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstProcedure_Parameters(), this.getAstVariable(), null, "parameters", null, 0, -1, AstProcedure.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstProcedure_Variables(), this.getAstVariable(), null, "variables", null, 0, -1, AstProcedure.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstProcedure_Statements(), this.getAstStatement(), null, "statements", null, 0, -1, AstProcedure.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(regExpBinaryEClass, RegExpBinary.class, "RegExpBinary", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getRegExpBinary_Left(), this.getRegExp(), null, "left", null, 0, 1, RegExpBinary.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getRegExpBinary_Operator(), ecorePackage.getEString(), "operator", null, 0, 1, RegExpBinary.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRegExpBinary_Right(), this.getRegExp(), null, "right", null, 0, 1, RegExpBinary.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(regExpUnaryEClass, RegExpUnary.class, "RegExpUnary", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getRegExpUnary_Child(), this.getRegExp(), null, "child", null, 0, 1, RegExpUnary.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getRegExpUnary_UnaryOperator(), ecorePackage.getEString(), "unaryOperator", null, 0, 1, RegExpUnary.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(regExpTagEClass, RegExpTag.class, "RegExpTag", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getRegExpTag_Tag(), this.getAstTag(), null, "tag", null, 0, 1, RegExpTag.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astInitializeEClass, AstInitialize.class, "AstInitialize", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(astExpressionBinaryEClass, AstExpressionBinary.class, "AstExpressionBinary", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstExpressionBinary_Left(), this.getAstExpression(), null, "left", null, 0, 1, AstExpressionBinary.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getAstExpressionBinary_Operator(), ecorePackage.getEString(), "operator", null, 0, 1, AstExpressionBinary.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstExpressionBinary_Right(), this.getAstExpression(), null, "right", null, 0, 1, AstExpressionBinary.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astExpressionUnaryEClass, AstExpressionUnary.class, "AstExpressionUnary", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAstExpressionUnary_UnaryOperator(), ecorePackage.getEString(), "unaryOperator", null, 0, 1, AstExpressionUnary.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstExpressionUnary_Expression(), this.getAstExpression(), null, "expression", null, 0, 1, AstExpressionUnary.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(astExpressionAssertionEClass, AstExpressionAssertion.class, "AstExpressionAssertion", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAstExpressionAssertion_Target(), this.getAstExpression(), null, "target", null, 0, 1, AstExpressionAssertion.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAstExpressionAssertion_Type(), this.getAstType(), null, "type", null, 0, 1, AstExpressionAssertion.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Initialize enums and add enum literals
    initEEnum(importKindEEnum, ImportKind.class, "ImportKind");
    addEEnumLiteral(importKindEEnum, ImportKind.VAR);
    addEEnumLiteral(importKindEEnum, ImportKind.TYPE);
    addEEnumLiteral(importKindEEnum, ImportKind.ENTITY);

    // Create resource
    createResource(eNS_URI);
  }

} //CalPackageImpl

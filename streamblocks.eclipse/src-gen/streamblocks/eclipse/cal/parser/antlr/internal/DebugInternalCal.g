/*
 * generated by Xtext 2.21.0
 */
grammar DebugInternalCal;

// Rule CompilationUnit
ruleCompilationUnit:
	(
		ruleAstPackage
		    |
		ruleAstNamespace
	)
;

// Rule AstPackage
ruleAstPackage:
	'package'
	ruleQualifiedName
	';'
	(
		ruleAstEntity
		    |
		ruleRvcImport
		    |
		ruleAstUnit
	)*
;

// Rule AstUnit
ruleAstUnit:
	'unit'
	ruleQualifiedName
	':'
	(
		ruleAstFunction
		    |
		ruleAstProcedure
		    |
		ruleAstConstantVariable
		    |
		(
			ruleAstExternalVariable
			    |ruleAstExternalFunction
			    |ruleAstExternalProcedure
		)
	)*
	'end'
;

// Rule AstNamespace
ruleAstNamespace:
	ruleAstAnnotation
	*
	'namespace'
	ruleQualifiedName
	':'
	(
		ruleAstFunction
		    |
		ruleAstProcedure
		    |
		ruleAstConstantVariable
		    |
		(
			ruleAstExternalVariable
			    |ruleAstExternalFunction
			    |ruleAstExternalProcedure
		)
		    |
		ruleAstTypeDefinition
		    |
		ruleImport
		    |
		ruleAstEntity
		    |
		ruleAstNamespace
	)*
	'end'
;

// Rule AstEntity
ruleAstEntity:
	ruleAstAnnotation
	*
	ruleAstAbstractActor
;

// Rule AstAbstractActor
ruleAstAbstractActor:
	(
		ruleAstActor
		    |
		ruleAstNetwork
		    |
		ruleAstExternalActor
	)
;

// Rule Import
ruleImport:
	'import'
	(
		ruleGroupImportTail
		    |
		ruleSingleImportTail
	)
	';'
;

// Rule RvcImport
ruleRvcImport:
	'import'
	ruleQualifiedNameWithWildCard
	';'
;

// Rule GroupImportTail
ruleGroupImportTail:
	'all'
	ruleImportKind
	?
	ruleQualifiedName
;

// Rule SingleImportTail
ruleSingleImportTail:
	ruleImportKind
	?
	ruleQualifiedName
	(
		'='
		RULE_ID
	)?
;

// Rule QualifiedName
ruleQualifiedName:
	RULE_ID
	(
		'.'
		RULE_ID
	)*
;

// Rule QualifiedNameWithWildCard
ruleQualifiedNameWithWildCard:
	ruleQualifiedName
	'.*'?
;

// Rule AstNetwork
ruleAstNetwork:
	'network'
	RULE_ID
	'('
	(
		ruleAstParameter
		(
			','
			ruleAstParameter
		)*
	)?
	')'
	(
		ruleAstPort
		(
			','
			ruleAstPort
		)*
	)?
	'==>'
	(
		ruleAstPort
		(
			','
			ruleAstPort
		)*
	)?
	':'
	(
		'var'
		ruleAstValuedVariableDeclaration
		';'
		(
			ruleAstValuedVariableDeclaration
			';'
		)*
	)?
	'entities'
	ruleAstEntityDeclaration
	+
	ruleAstStructure
	?
	'end'
;

// Rule AstEntityDeclaration
ruleAstEntityDeclaration:
	RULE_ID
	'='
	ruleAstEntityExpr
	';'
;

// Rule AstEntityExpr
ruleAstEntityExpr:
	(
		ruleAstEntityInstanceExpr
		    |
		ruleAstEntityIfExpr
		    |
		ruleAstEntityListExpr
	)
;

// Rule AstEntityInstanceExpr
ruleAstEntityInstanceExpr:
	ruleQualifiedName
	'('
	(
		ruleAstAssignParameter
		(
			','
			ruleAstAssignParameter
		)*
	)?
	')'
;

// Rule AstAssignParameter
ruleAstAssignParameter:
	RULE_ID
	'='
	ruleAstExpression
;

// Rule AstEntityIfExpr
ruleAstEntityIfExpr:
	'if'
	ruleAstExpression
	'then'
	ruleAstEntityExpr
	'else'
	ruleAstEntityExpr
	'end'
;

// Rule AstEntityListExpr
ruleAstEntityListExpr:
	'['
	ruleAstEntityExpr
	(
		','
		ruleAstEntityExpr
	)*
	(
		':'
		ruleAstGenerator
	)?
	']'
;

// Rule AstStructure
ruleAstStructure:
	'structure'
	ruleAstStructureStatement
	+
;

// Rule AstStructureStatement
ruleAstStructureStatement:
	(
		ruleAstStructureStatementConnection
		    |
		ruleAstStructureStatementForeach
		    |
		ruleAstStructureStatementIf
	)
;

// Rule AstStructureStatementConnection
ruleAstStructureStatementConnection:
	(
		ruleAstEntityVariableReference
		(
			'['
			ruleAstExpression
			']'
		)*
		'.'
	)?
	RULE_ID
	'-->'
	(
		ruleAstEntityVariableReference
		(
			'['
			ruleAstExpression
			']'
		)*
		'.'
	)?
	RULE_ID
	(
		'{'
		ruleAstConnectionAttribute
		*
		'}'
	)?
	';'
;

// Rule AstEntityVariableReference
ruleAstEntityVariableReference:
	RULE_ID
;

// Rule AstConnectionAttribute
ruleAstConnectionAttribute:
	RULE_ID
	'='
	ruleAstExpression
	';'
;

// Rule AstStructureStatementForeach
ruleAstStructureStatementForeach:
	'foreach'
	ruleAstForeachGenerator
	(
		','
		ruleAstForeachGenerator
	)*
	'do'
	(
		'var'
		ruleAstValuedVariableDeclaration
		(
			','
			ruleAstValuedVariableDeclaration
		)*
	)?
	ruleAstStructureStatement
	*
	'end'
;

// Rule AstStructureStatementIf
ruleAstStructureStatementIf:
	'if'
	ruleAstExpression
	'then'
	ruleAstStructureStatement
	*
	ruleAstStructureStatementElsif
	*
	(
		'else'
		ruleAstStructureStatement
		*
	)?
	'end'
;

// Rule AstStructureStatementElsif
ruleAstStructureStatementElsif:
	'elsif'
	ruleAstExpression
	'then'
	ruleAstStructureStatement
	*
;

// Rule AstConstantVariable
ruleAstConstantVariable:
	ruleAstVariableDeclaration
	'='
	ruleAstExpression
	';'
;

// Rule AstExternalVariable
ruleAstExternalVariable:
	'external'
	ruleAstVariableDeclaration
	';'
;

// Rule AstTypeDefinition
ruleAstTypeDefinition:
	'type'
	RULE_ID
	(
		'('
		(
			ruleAstTypeDefinitionParameter
			(
				','
				ruleAstTypeDefinitionParameter
			)*
		)?
		')'
	)?
	':'
	(
		ruleAstTuple
		    |
		ruleAstTaggedTuple
		(
			'|'
			ruleAstTaggedTuple
		)*
	)
	'end'
;

// Rule AstTypeDefinitionParameter
ruleAstTypeDefinitionParameter:
	(
		ruleAstVariableDeclaration
		    |
		ruleAstTypeDefinitionTypeParameter
	)
;

// Rule AstTypeDefinitionTypeParameter
ruleAstTypeDefinitionTypeParameter:
	'type'
	RULE_ID
;

// Rule AstTaggedTuple
ruleAstTaggedTuple:
	RULE_ID
	(
		'('
		(
			ruleAstValuedVariableDeclaration
			(
				','
				ruleAstValuedVariableDeclaration
			)*
		)?
		')'
	)?
;

// Rule AstTuple
ruleAstTuple:
	'('
	(
		ruleAstValuedVariableDeclaration
		(
			','
			ruleAstValuedVariableDeclaration
		)*
	)?
	')'
;

// Rule AstActor
ruleAstActor:
	'actor'
	RULE_ID
	'('
	(
		ruleAstParameter
		(
			','
			ruleAstParameter
		)*
	)?
	')'
	(
		ruleAstPort
		(
			','
			ruleAstPort
		)*
	)?
	'==>'
	(
		ruleAstPort
		(
			','
			ruleAstPort
		)*
	)?
	':'
	(
		ruleAstFunction
		    |
		ruleAstProcedure
		    |
		ruleAstInvariant
		    |
		ruleAstAction
		    |
		ruleAstProcessDescription
		    |
		ruleAstInitialize
		    |
		ruleAstStateVariable
	)*
	(
		ruleAstSchedule
		    |
		ruleAstScheduleRegExp
	)?
	ruleAstPriority
	*
	'end'
;

// Rule AstProcessDescription
ruleAstProcessDescription:
	(
		'repeat'
		    |
		'do'
	)
	ruleAstStatement
	*
	'end'
;

// Rule AstPort
ruleAstPort:
	ruleAstAnnotation
	*
	ruleAstType
	RULE_ID
;

// Rule AstFunction
ruleAstFunction:
	ruleAstAnnotation
	*
	'function'
	RULE_ID
	'('
	(
		ruleAstVariableDeclaration
		(
			','
			ruleAstVariableDeclaration
		)*
	)?
	')'
	'-->'
	ruleAstType
	(
		'var'
		ruleAstValuedVariableDeclaration
		(
			','
			ruleAstValuedVariableDeclaration
		)*
	)?
	(
		':'
		ruleAstExpression
	)?
	'end'
;

// Rule AstExternalFunction
ruleAstExternalFunction:
	ruleAstAnnotation
	*
	'external'
	'function'
	RULE_ID
	'('
	(
		ruleAstVariableDeclaration
		(
			','
			ruleAstVariableDeclaration
		)*
	)?
	')'
	'-->'
	ruleAstType
	'end'
;

// Rule AstProcedure
ruleAstProcedure:
	ruleAstAnnotation
	*
	'procedure'
	RULE_ID
	'('
	(
		ruleAstVariableDeclaration
		(
			','
			ruleAstVariableDeclaration
		)*
	)?
	')'
	(
		'var'
		ruleAstValuedVariableDeclaration
		(
			','
			ruleAstValuedVariableDeclaration
		)*
	)?
	(
		'begin'
		ruleAstStatement
		*
	)?
	'end'
;

// Rule AstExternalProcedure
ruleAstExternalProcedure:
	ruleAstAnnotation
	*
	'external'
	'procedure'
	RULE_ID
	'('
	(
		ruleAstVariableDeclaration
		(
			','
			ruleAstVariableDeclaration
		)*
	)?
	')'
	'end'
;

// Rule AstParameter
ruleAstParameter:
	ruleAstVariableDeclaration
	(
		'='
		ruleAstExpression
	)?
;

// Rule AstStateVariable
ruleAstStateVariable:
	ruleAstValuedVariableDeclaration
	';'
;

// Rule AstTag
ruleAstTag:
	RULE_ID
	(
		'.'
		RULE_ID
	)*
;

// Rule AstInvariant
ruleAstInvariant:
	'invariant'
	ruleAstExpression
	(
		','
		ruleAstExpression
	)*
	(
		'end'
		    |
		'endinvariant'
	)
;

// Rule AstExternalActor
ruleAstExternalActor:
	'external'
	'actor'
	RULE_ID
	'('
	(
		ruleAstParameter
		(
			','
			ruleAstParameter
		)*
	)?
	')'
	(
		ruleAstPort
		(
			','
			ruleAstPort
		)*
	)?
	'==>'
	(
		ruleAstPort
		(
			','
			ruleAstPort
		)*
	)?
	';'
;

// Rule AstInequality
ruleAstInequality:
	ruleAstTag
	(
		'>'
		ruleAstTag
	)+
	';'
;

// Rule AstPriority
ruleAstPriority:
	'priority'
	ruleAstInequality
	*
	'end'
;

// Rule AstSchedule
ruleAstSchedule:
	'schedule'
	'fsm'
	RULE_ID
	':'
	ruleAstTransition
	*
	(
		'end'
		    |
		'endschedule'
	)
;

// Rule AstTransition
ruleAstTransition:
	RULE_ID
	'('
	ruleAstTag
	(
		','
		ruleAstTag
	)*
	')'
	'-->'
	RULE_ID
	';'
;

// Rule AstScheduleRegExp
ruleAstScheduleRegExp:
	'schedule'
	'regexp'
	ruleRegExp
	'end'
;

// Rule RegExp
ruleRegExp:
	ruleRegExpConcatenation
	(
		'|'
		ruleRegExpConcatenation
	)*
;

// Rule RegExpConcatenation
ruleRegExpConcatenation:
	ruleRegExpPostfix
	(
		ruleRegExpPostfix
	)*
;

// Rule RegExpPostfix
ruleRegExpPostfix:
	ruleRegExpGrouping
	(
		(
			'*'
			    |
			'?'
		)
	)*
;

// Rule RegExpGrouping
ruleRegExpGrouping:
	(
		ruleRegExpTerminal
		    |
		'('
		ruleRegExp
		')'
	)
;

// Rule RegExpTerminal
ruleRegExpTerminal:
	ruleAstTag
;

// Rule AstAction
ruleAstAction:
	ruleAstAnnotation
	*
	(
		ruleAstTag
		':'
	)?
	'action'
	(
		ruleAstInputPattern
		(
			','
			ruleAstInputPattern
		)*
	)?
	'==>'
	(
		ruleAstOutputExpression
		(
			','
			ruleAstOutputExpression
		)*
	)?
	(
		'guard'
		ruleAstExpression
		(
			','
			ruleAstExpression
		)*
	)?
	(
		'var'
		ruleAstValuedVariableDeclaration
		(
			','
			ruleAstValuedVariableDeclaration
		)*
	)?
	(
		'do'
		ruleAstStatement
		*
	)?
	'end'
;

// Rule AstInitialize
ruleAstInitialize:
	ruleAstAnnotation
	*
	(
		ruleAstTag
		':'
	)?
	'initialize'
	'==>'
	(
		ruleAstOutputExpression
		(
			','
			ruleAstOutputExpression
		)*
	)?
	(
		'guard'
		ruleAstExpression
		(
			','
			ruleAstExpression
		)*
	)?
	(
		'var'
		ruleAstValuedVariableDeclaration
		(
			','
			ruleAstValuedVariableDeclaration
		)*
	)?
	(
		'do'
		ruleAstStatement
		*
	)?
	'end'
;

// Rule AstInputPattern
ruleAstInputPattern:
	(
		RULE_ID
		':'
	)?
	'['
	ruleAstPattern
	(
		','
		ruleAstPattern
	)*
	']'
	(
		'repeat'
		ruleAstExpression
	)?
;

// Rule AstToken
ruleAstToken:
	RULE_ID
;

// Rule AstOutputExpression
ruleAstOutputExpression:
	(
		RULE_ID
		':'
	)?
	'['
	ruleAstExpression
	(
		','
		ruleAstExpression
	)*
	']'
	(
		'repeat'
		ruleAstExpression
	)?
;

// Rule AstStatementAssign
ruleAstStatementAssign:
	ruleAstLValue
	':='
	ruleAstExpression
	';'
;

// Rule AstStatementCall
ruleAstStatementCall:
	ruleAstAnnotation
	*
	RULE_ID
	'('
	(
		ruleAstExpression
		(
			','
			ruleAstExpression
		)*
	)?
	')'
	';'
;

// Rule AstStatementForeach
ruleAstStatementForeach:
	'foreach'
	ruleAstForeachGenerator
	(
		','
		ruleAstForeachGenerator
	)*
	(
		'var'
		ruleAstValuedVariableDeclaration
		(
			','
			ruleAstValuedVariableDeclaration
		)*
	)?
	'do'
	ruleAstStatement
	*
	'end'
;

// Rule AstForeachGenerator
ruleAstForeachGenerator:
	ruleAstVariableDeclaration
	'in'
	ruleAstExpression
;

// Rule AstStatementBlock
ruleAstStatementBlock:
	'begin'
	(
		'var'
		ruleAstValuedVariableDeclaration
		(
			','
			ruleAstValuedVariableDeclaration
		)*
		'do'
	)?
	ruleAstStatement
	*
	'end'
;

// Rule AstStatementIf
ruleAstStatementIf:
	'if'
	ruleAstExpression
	'then'
	ruleAstStatement
	*
	ruleAstStatementElsif
	*
	(
		'else'
		ruleAstStatement
		*
	)?
	'end'
;

// Rule AstStatementElsif
ruleAstStatementElsif:
	'elsif'
	ruleAstExpression
	'then'
	ruleAstStatement
	*
;

// Rule AstStatementWhile
ruleAstStatementWhile:
	'while'
	ruleAstExpression
	'do'
	ruleAstStatement
	*
	'end'
;

// Rule AstStatementRead
ruleAstStatementRead:
	RULE_ID
	'-->'
	ruleAstLValue
	(
		','
		ruleAstLValue
	)*
	(
		'repeat'
		ruleAstExpression
	)?
	';'
;

// Rule AstStatementWrite
ruleAstStatementWrite:
	RULE_ID
	(
		('<--')=>
		'<--'
	)
	ruleAstExpression
	(
		','
		ruleAstExpression
	)*
	(
		'repeat'
		ruleAstExpression
	)?
	';'
;

// Rule AstLValue
ruleAstLValue:
	RULE_ID
	(
		'['
		ruleAstExpression
		']'
	)*
	ruleAstMemberAccess
	*
;

// Rule AstStatementCase
ruleAstStatementCase:
	'case'
	ruleAstExpressionSymbolReference
	'of'
	ruleAstStatementAlternative
	+
	(
		'else'
		ruleAstStatement
	)?
	'end'
;

// Rule AstStatementAlternative
ruleAstStatementAlternative:
	ruleAstPattern
	(
		'guard'
		ruleAstExpression
		(
			','
			ruleAstExpression
		)*
	)?
	'do'
	ruleAstStatement
	*
	'end'
;

// Rule AstStatement
ruleAstStatement:
	(
		ruleAstStatementAssign
		    |
		ruleAstStatementCall
		    |
		ruleAstStatementForeach
		    |
		ruleAstStatementIf
		    |
		ruleAstStatementRead
		    |
		ruleAstStatementWrite
		    |
		ruleAstStatementWhile
		    |
		ruleAstStatementBlock
		    |
		ruleAstStatementCase
	)
;

// Rule AstExpression
ruleAstExpression:
	ruleAstExpressionAnd
	(
		(
			'||'
			    |
			'or'
			    |
			'..'
		)
		ruleAstExpressionAnd
	)*
;

// Rule AstExpressionAnd
ruleAstExpressionAnd:
	ruleAstExpressionBitor
	(
		(
			'&&'
			    |
			'and'
		)
		ruleAstExpressionBitor
	)*
;

// Rule AstExpressionBitor
ruleAstExpressionBitor:
	ruleAstExpressionBitxor
	(
		'|'
		ruleAstExpressionBitxor
	)*
;

// Rule AstExpressionBitxor
ruleAstExpressionBitxor:
	ruleAstExpressionBitand
	(
		'^'
		ruleAstExpressionBitand
	)*
;

// Rule AstExpressionBitand
ruleAstExpressionBitand:
	ruleAstExpressionEq
	(
		'&'
		ruleAstExpressionEq
	)*
;

// Rule AstExpressionEq
ruleAstExpressionEq:
	ruleAstExpressionRelational
	(
		(
			'='
			    |
			'!='
		)
		ruleAstExpressionRelational
	)*
;

// Rule AstExpressionRelational
ruleAstExpressionRelational:
	ruleAstExpressionShift
	(
		(
			'<'
			    |
			'<='
			    |
			'>'
			    |
			'>='
		)
		ruleAstExpressionShift
	)*
;

// Rule AstExpressionShift
ruleAstExpressionShift:
	ruleAstExpressionAdditive
	(
		(
			'<<'
			    |
			'>>'
			    |
			'>>>'
		)
		ruleAstExpressionAdditive
	)*
;

// Rule AstExpressionAdditive
ruleAstExpressionAdditive:
	ruleAstExpressionMultiplicative
	(
		(
			'+'
			    |
			'-'
		)
		ruleAstExpressionMultiplicative
	)*
;

// Rule AstExpressionMultiplicative
ruleAstExpressionMultiplicative:
	ruleAstExpressionExp
	(
		(
			'*'
			    |
			'/'
			    |
			'div'
			    |
			'mod'
		)
		ruleAstExpressionExp
	)*
;

// Rule AstExpressionExp
ruleAstExpressionExp:
	ruleAstExpressionUnary
	(
		'**'
		ruleAstExpressionUnary
	)*
;

// Rule AstExpressionUnary
ruleAstExpressionUnary:
	(
		(
			'~'
			    |
			'-'
			    |
			'not'
			    |
			'#'
			    |
			'old'
		)
		ruleAstExpressionPostfix
		    |
		ruleAstExpressionAssertion
	)
;

// Rule AstExpressionAssertion
ruleAstExpressionAssertion:
	ruleAstExpressionPostfix
	(
		(
			('as'
			)=>
			'as'
		)
		ruleAstType
	)*
;

// Rule AstExpressionPostfix
ruleAstExpressionPostfix:
	(
		ruleAstExpressionList
		    |
		ruleAstExpressionSymbolReference
		    |
		ruleAstExpressionIf
		    |
		ruleAstExpressionLambda
		    |
		ruleAstExpressionProc
		    |
		ruleAstExpressionLet
		    |
		ruleAstExpressionMap
		    |
		ruleAstExpressionSet
		    |
		ruleAstExpressionCase
		    |
		ruleAstExpressionLiteral
		    |
		'('
		ruleAstExpression
		')'
	)
;

// Rule AstExpressionSymbolReference
ruleAstExpressionSymbolReference:
	ruleAstAnnotation
	*
	RULE_ID
	(
		'['
		ruleAstExpression
		']'
	)*
	ruleAstMemberAccess
	*
	(
		'::'
		RULE_ID
	)?
	(
		'('
		(
			ruleAstExpression
			(
				','
				ruleAstExpression
			)*
		)?
		')'
	)?
;

// Rule AstExpressionIf
ruleAstExpressionIf:
	'if'
	ruleAstExpression
	'then'
	ruleAstExpression
	ruleAstExpressionElsif
	*
	'else'
	ruleAstExpression
	'end'
;

// Rule AstExpressionElsif
ruleAstExpressionElsif:
	'elsif'
	ruleAstExpression
	'then'
	ruleAstExpression
;

// Rule AstExpressionList
ruleAstExpressionList:
	'['
	ruleAstExpression
	(
		','
		ruleAstExpression
	)*
	(
		':'
		ruleAstGenerator
		(
			','
			ruleAstGenerator
		)*
	)?
	']'
;

// Rule AstGenerator
ruleAstGenerator:
	'for'
	ruleAstVariableDeclaration
	'in'
	ruleAstExpression
	(
		','
		ruleAstExpression
	)*
;

// Rule AstExpressionSet
ruleAstExpressionSet:
	'{'
	(
		ruleAstExpression
		','
		ruleAstExpression
	)?
	(
		':'
		ruleAstGenerator
	)?
	'}'
;

// Rule AstExpressionMap
ruleAstExpressionMap:
	'map'
	'{'
	(
		ruleMapping
		(
			','
			ruleMapping
		)*
	)?
	(
		':'
		ruleAstGenerator
	)?
	'}'
;

// Rule Mapping
ruleMapping:
	ruleAstExpression
	'->'
	ruleAstExpression
;

// Rule AstExpressionLet
ruleAstExpressionLet:
	'let'
	(
		ruleAstValuedVariableDeclaration
		(
			','
			ruleAstValuedVariableDeclaration
		)*
	)?
	':'
	ruleAstExpression
	(
		'end'
		    |
		'endlet'
	)
;

// Rule AstExpressionLambda
ruleAstExpressionLambda:
	'lambda'
	RULE_ID
	'('
	(
		ruleAstVariableDeclaration
		(
			','
			ruleAstVariableDeclaration
		)*
	)?
	')'
	'-->'
	ruleAstType
	(
		'var'
		ruleAstValuedVariableDeclaration
		(
			','
			ruleAstValuedVariableDeclaration
		)*
	)?
	':'
	ruleAstExpression
	(
		'end'
		    |
		'endlambda'
	)
;

// Rule AstExpressionProc
ruleAstExpressionProc:
	'proc'
	RULE_ID
	'('
	(
		ruleAstVariableDeclaration
		(
			','
			ruleAstVariableDeclaration
		)*
	)?
	')'
	(
		'var'
		ruleAstValuedVariableDeclaration
		(
			','
			ruleAstValuedVariableDeclaration
		)*
	)?
	(
		'begin'
		    |
		'do'
	)
	ruleAstStatement
	*
	(
		'end'
		    |
		'endproc'
	)
;

// Rule AstExpressionCase
ruleAstExpressionCase:
	'case'
	ruleAstExpressionSymbolReference
	'of'
	ruleAstExpressionAlternative
	+
	(
		'else'
		ruleAstExpression
	)?
	'end'
;

// Rule AstExpressionAlternative
ruleAstExpressionAlternative:
	ruleAstPattern
	(
		'guard'
		ruleAstExpression
		(
			','
			ruleAstExpression
		)*
	)?
	':'
	ruleAstExpression
	'end'
;

// Rule AstExpressionLiteral
ruleAstExpressionLiteral:
	(
		ruleAstExpressionBoolean
		    |
		ruleAstExpressionFloat
		    |
		ruleAstExpressionInteger
		    |
		ruleAstExpressionString
	)
;

// Rule AstExpressionBoolean
ruleAstExpressionBoolean:
	RULE_BOOL
;

// Rule AstExpressionFloat
ruleAstExpressionFloat:
	RULE_REAL
;

// Rule AstExpressionInteger
ruleAstExpressionInteger:
	(
		RULE_DECIMAL
		    |RULE_OCTAL
		    |RULE_HEX
	)
;

// Rule AstExpressionString
ruleAstExpressionString:
	RULE_STRING
;

// Rule AstPattern
ruleAstPattern:
	(
		ruleAstPatternAlternative
		    |
		ruleAstPatternAlias
		    |
		ruleAstPatternDeconstruction
		    |
		ruleAstPatternList
		    |
		ruleAstPatternDeclaration
		    |
		ruleAstPatternWildcard
	)
;

// Rule AstPatternDeclaration
ruleAstPatternDeclaration:
	ruleAstToken
;

// Rule AstPatternWildcard
ruleAstPatternWildcard:
	'_'
;

// Rule AstPatternAlternative
ruleAstPatternAlternative:
	(
		ruleAstPatternLiteral
		    |
		ruleAstPatternExpression
	)
	(
		'|'
		(
			ruleAstPatternLiteral
			    |
			ruleAstPatternExpression
		)
	)*
;

// Rule AstPatternAlias
ruleAstPatternAlias:
	(
		ruleAstPatternDeclaration
		    |ruleAstPatternWildcard
	)
	'@'
	ruleAstPatternExpression
;

// Rule AstPatternList
ruleAstPatternList:
	'['
	ruleAstPattern
	(
		','
		ruleAstPattern
	)*
	']'
;

// Rule AstPatternLiteral
ruleAstPatternLiteral:
	ruleAstExpressionLiteral
;

// Rule AstPatternExpression
ruleAstPatternExpression:
	'`'
	(
		'('
		ruleAstExpression
		')'
		    |
		ruleAstExpressionSymbolReference
	)
;

// Rule AstPatternDeconstruction
ruleAstPatternDeconstruction:
	RULE_ID
	'('
	ruleAstPattern
	(
		','
		ruleAstPattern
	)*
	')'
;

// Rule AstTypeBuiltIn
ruleAstTypeBuiltIn:
	(
		'int'
		    |
		'uint'
		    |
		'float'
		    |
		'double'
		    |
		'bool'
		    |
		'List'
		    |
		'String'
		    |
		'set'
		    |
		'map'
	)
;

// Rule AstType
ruleAstType:
	(
		ruleAstTypeBuiltIn
		ruleAstTypeParameterList
		?
		(
			'['
			ruleAstExpression
			']'
		)*
		    |
		RULE_ID
		ruleAstTypeParameterList
		?
		(
			'['
			ruleAstExpression
			']'
		)*
		    |
		'['
		(
			ruleAstType
			(
				','
				ruleAstType
			)*
		)?
		'-->'
		ruleAstType
		?
		']'
	)
;

// Rule AstTypeParameterList
ruleAstTypeParameterList:
	'('
	ruleAstTypeParam
	(
		','
		ruleAstTypeParam
	)*
	')'
;

// Rule AstTypeParam
ruleAstTypeParam:
	(
		RULE_ID
		'='
		ruleAstExpression
		    |
		(
			RULE_ID
			    |'type'
		)
		':'
		ruleAstType
	)
;

// Rule AstVariableDeclaration
ruleAstVariableDeclaration:
	ruleAstAnnotation
	*
	ruleAstType
	RULE_ID
	(
		'['
		ruleAstExpression
		']'
	)*
;

// Rule AstValuedVariableDeclaration
ruleAstValuedVariableDeclaration:
	ruleAstVariableDeclaration
	(
		(
			'='
			    |
			':='
		)
		ruleAstExpression
	)?
;

// Rule AstMemberAccess
ruleAstMemberAccess:
	'.'
	RULE_ID
	(
		'['
		ruleAstExpression
		']'
	)*
;

// Rule AstAnnotation
ruleAstAnnotation:
	'@'
	RULE_ID
	(
		'('
		ruleAstAnnotationArgument
		(
			','
			ruleAstAnnotationArgument
		)*
		')'
	)?
;

// Rule AstAnnotationArgument
ruleAstAnnotationArgument:
	RULE_ID
	'='
	RULE_STRING
;

// Rule ImportKind
ruleImportKind:
	(
		'var'
		    |
		'type'
		    |
		'entity'
	)
;

RULE_BOOL : ('true'|'false');

RULE_REAL : (('0'..'9')+ '.' ('0'..'9')* (('e'|'E') ('+'|'-')? ('0'..'9')+)?|'.' ('0'..'9')+ (('e'|'E') ('+'|'-')? ('0'..'9')+)?|('0'..'9')+ ('e'|'E') ('+'|'-')? ('0'..'9')+);

RULE_DECIMAL : '1'..'9' ('0'..'9')*;

RULE_OCTAL : '0' ('0'..'7')*;

RULE_HEX : '0' ('x'|'X') ('0'..'9'|'a'..'f'|'A'..'F')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ID : ('a'..'z'|'A'..'Z'|'_'|'$') ('a'..'z'|'A'..'Z'|'0'..'9'|'_'|'$')*;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/' {skip();};

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')? {skip();};

RULE_WS : (' '|'\t'|'\r'|'\n')+ {skip();};

RULE_ANY_OTHER : .;

/*
 * generated by Xtext 2.21.0
 */
grammar InternalCal;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package streamblocks.eclipse.cal.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package streamblocks.eclipse.cal.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import streamblocks.eclipse.cal.services.CalGrammarAccess;

}

@parser::members {

 	private CalGrammarAccess grammarAccess;

    public InternalCalParser(TokenStream input, CalGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "CompilationUnit";
   	}

   	@Override
   	protected CalGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleCompilationUnit
entryRuleCompilationUnit returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompilationUnitRule()); }
	iv_ruleCompilationUnit=ruleCompilationUnit
	{ $current=$iv_ruleCompilationUnit.current; }
	EOF;

// Rule CompilationUnit
ruleCompilationUnit returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCompilationUnitAccess().getAstPackageParserRuleCall_0());
		}
		this_AstPackage_0=ruleAstPackage
		{
			$current = $this_AstPackage_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCompilationUnitAccess().getAstNamespaceParserRuleCall_1());
		}
		this_AstNamespace_1=ruleAstNamespace
		{
			$current = $this_AstNamespace_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAstPackage
entryRuleAstPackage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstPackageRule()); }
	iv_ruleAstPackage=ruleAstPackage
	{ $current=$iv_ruleAstPackage.current; }
	EOF;

// Rule AstPackage
ruleAstPackage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAstPackageAccess().getAstNamespaceAction_0(),
					$current);
			}
		)
		(
			(
				lv_rvc_1_0='package'
				{
					newLeafNode(lv_rvc_1_0, grammarAccess.getAstPackageAccess().getRvcPackageKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstPackageRule());
					}
					setWithLastConsumed($current, "rvc", true, "package");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAstPackageAccess().getNameQualifiedNameParserRuleCall_2_0());
				}
				lv_name_2_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstPackageRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"streamblocks.eclipse.cal.Cal.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getAstPackageAccess().getSemicolonKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAstPackageAccess().getEntitiesAstEntityParserRuleCall_4_0_0());
					}
					lv_entities_4_0=ruleAstEntity
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstPackageRule());
						}
						add(
							$current,
							"entities",
							lv_entities_4_0,
							"streamblocks.eclipse.cal.Cal.AstEntity");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAstPackageAccess().getImportsRvcImportParserRuleCall_4_1_0());
					}
					lv_imports_5_0=ruleRvcImport
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstPackageRule());
						}
						add(
							$current,
							"imports",
							lv_imports_5_0,
							"streamblocks.eclipse.cal.Cal.RvcImport");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAstPackageAccess().getUnitsAstUnitParserRuleCall_4_2_0());
					}
					lv_units_6_0=ruleAstUnit
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstPackageRule());
						}
						add(
							$current,
							"units",
							lv_units_6_0,
							"streamblocks.eclipse.cal.Cal.AstUnit");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAstUnit
entryRuleAstUnit returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstUnitRule()); }
	iv_ruleAstUnit=ruleAstUnit
	{ $current=$iv_ruleAstUnit.current; }
	EOF;

// Rule AstUnit
ruleAstUnit returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAstUnitAccess().getAstNamespaceAction_0(),
					$current);
			}
		)
		(
			(
				lv_rvc_1_0='unit'
				{
					newLeafNode(lv_rvc_1_0, grammarAccess.getAstUnitAccess().getRvcUnitKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstUnitRule());
					}
					setWithLastConsumed($current, "rvc", true, "unit");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAstUnitAccess().getNameQualifiedNameParserRuleCall_2_0());
				}
				lv_name_2_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstUnitRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"streamblocks.eclipse.cal.Cal.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getAstUnitAccess().getColonKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAstUnitAccess().getFunctionsAstFunctionParserRuleCall_4_0_0());
					}
					lv_functions_4_0=ruleAstFunction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstUnitRule());
						}
						add(
							$current,
							"functions",
							lv_functions_4_0,
							"streamblocks.eclipse.cal.Cal.AstFunction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAstUnitAccess().getProceduresAstProcedureParserRuleCall_4_1_0());
					}
					lv_procedures_5_0=ruleAstProcedure
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstUnitRule());
						}
						add(
							$current,
							"procedures",
							lv_procedures_5_0,
							"streamblocks.eclipse.cal.Cal.AstProcedure");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAstUnitAccess().getVariablesAstConstantVariableParserRuleCall_4_2_0());
					}
					lv_variables_6_0=ruleAstConstantVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstUnitRule());
						}
						add(
							$current,
							"variables",
							lv_variables_6_0,
							"streamblocks.eclipse.cal.Cal.AstConstantVariable");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getAstUnitAccess().getExternalsAstExternalVariableParserRuleCall_4_3_0_0());
						}
						lv_externals_7_1=ruleAstExternalVariable
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstUnitRule());
							}
							add(
								$current,
								"externals",
								lv_externals_7_1,
								"streamblocks.eclipse.cal.Cal.AstExternalVariable");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getAstUnitAccess().getExternalsAstExternalFunctionParserRuleCall_4_3_0_1());
						}
						lv_externals_7_2=ruleAstExternalFunction
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstUnitRule());
							}
							add(
								$current,
								"externals",
								lv_externals_7_2,
								"streamblocks.eclipse.cal.Cal.AstExternalFunction");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getAstUnitAccess().getExternalsAstExternalProcedureParserRuleCall_4_3_0_2());
						}
						lv_externals_7_3=ruleAstExternalProcedure
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstUnitRule());
							}
							add(
								$current,
								"externals",
								lv_externals_7_3,
								"streamblocks.eclipse.cal.Cal.AstExternalProcedure");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
		otherlv_8='end'
		{
			newLeafNode(otherlv_8, grammarAccess.getAstUnitAccess().getEndKeyword_5());
		}
	)
;

// Entry rule entryRuleAstNamespace
entryRuleAstNamespace returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstNamespaceRule()); }
	iv_ruleAstNamespace=ruleAstNamespace
	{ $current=$iv_ruleAstNamespace.current; }
	EOF;

// Rule AstNamespace
ruleAstNamespace returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAstNamespaceAccess().getAnnotationsAstAnnotationParserRuleCall_0_0());
				}
				lv_annotations_0_0=ruleAstAnnotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstNamespaceRule());
					}
					add(
						$current,
						"annotations",
						lv_annotations_0_0,
						"streamblocks.eclipse.cal.Cal.AstAnnotation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_1='namespace'
		{
			newLeafNode(otherlv_1, grammarAccess.getAstNamespaceAccess().getNamespaceKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstNamespaceAccess().getNameQualifiedNameParserRuleCall_2_0());
				}
				lv_name_2_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstNamespaceRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"streamblocks.eclipse.cal.Cal.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getAstNamespaceAccess().getColonKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAstNamespaceAccess().getFunctionsAstFunctionParserRuleCall_4_0_0());
					}
					lv_functions_4_0=ruleAstFunction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstNamespaceRule());
						}
						add(
							$current,
							"functions",
							lv_functions_4_0,
							"streamblocks.eclipse.cal.Cal.AstFunction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAstNamespaceAccess().getProceduresAstProcedureParserRuleCall_4_1_0());
					}
					lv_procedures_5_0=ruleAstProcedure
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstNamespaceRule());
						}
						add(
							$current,
							"procedures",
							lv_procedures_5_0,
							"streamblocks.eclipse.cal.Cal.AstProcedure");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAstNamespaceAccess().getVariablesAstConstantVariableParserRuleCall_4_2_0());
					}
					lv_variables_6_0=ruleAstConstantVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstNamespaceRule());
						}
						add(
							$current,
							"variables",
							lv_variables_6_0,
							"streamblocks.eclipse.cal.Cal.AstConstantVariable");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getAstNamespaceAccess().getExternalsAstExternalVariableParserRuleCall_4_3_0_0());
						}
						lv_externals_7_1=ruleAstExternalVariable
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstNamespaceRule());
							}
							add(
								$current,
								"externals",
								lv_externals_7_1,
								"streamblocks.eclipse.cal.Cal.AstExternalVariable");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getAstNamespaceAccess().getExternalsAstExternalFunctionParserRuleCall_4_3_0_1());
						}
						lv_externals_7_2=ruleAstExternalFunction
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstNamespaceRule());
							}
							add(
								$current,
								"externals",
								lv_externals_7_2,
								"streamblocks.eclipse.cal.Cal.AstExternalFunction");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getAstNamespaceAccess().getExternalsAstExternalProcedureParserRuleCall_4_3_0_2());
						}
						lv_externals_7_3=ruleAstExternalProcedure
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstNamespaceRule());
							}
							add(
								$current,
								"externals",
								lv_externals_7_3,
								"streamblocks.eclipse.cal.Cal.AstExternalProcedure");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAstNamespaceAccess().getTypedefsAstTypeDefinitionParserRuleCall_4_4_0());
					}
					lv_typedefs_8_0=ruleAstTypeDefinition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstNamespaceRule());
						}
						add(
							$current,
							"typedefs",
							lv_typedefs_8_0,
							"streamblocks.eclipse.cal.Cal.AstTypeDefinition");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAstNamespaceAccess().getImportsImportParserRuleCall_4_5_0());
					}
					lv_imports_9_0=ruleImport
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstNamespaceRule());
						}
						add(
							$current,
							"imports",
							lv_imports_9_0,
							"streamblocks.eclipse.cal.Cal.Import");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAstNamespaceAccess().getEntitiesAstEntityParserRuleCall_4_6_0());
					}
					lv_entities_10_0=ruleAstEntity
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstNamespaceRule());
						}
						add(
							$current,
							"entities",
							lv_entities_10_0,
							"streamblocks.eclipse.cal.Cal.AstEntity");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAstNamespaceAccess().getNamespacesAstNamespaceParserRuleCall_4_7_0());
					}
					lv_namespaces_11_0=ruleAstNamespace
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstNamespaceRule());
						}
						add(
							$current,
							"namespaces",
							lv_namespaces_11_0,
							"streamblocks.eclipse.cal.Cal.AstNamespace");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_12='end'
		{
			newLeafNode(otherlv_12, grammarAccess.getAstNamespaceAccess().getEndKeyword_5());
		}
	)
;

// Entry rule entryRuleAstEntity
entryRuleAstEntity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstEntityRule()); }
	iv_ruleAstEntity=ruleAstEntity
	{ $current=$iv_ruleAstEntity.current; }
	EOF;

// Rule AstEntity
ruleAstEntity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAstEntityAccess().getAnnotationsAstAnnotationParserRuleCall_0_0());
				}
				lv_annotations_0_0=ruleAstAnnotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstEntityRule());
					}
					add(
						$current,
						"annotations",
						lv_annotations_0_0,
						"streamblocks.eclipse.cal.Cal.AstAnnotation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getAstEntityAccess().getActorAstAbstractActorParserRuleCall_1_0());
				}
				lv_actor_1_0=ruleAstAbstractActor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstEntityRule());
					}
					set(
						$current,
						"actor",
						lv_actor_1_0,
						"streamblocks.eclipse.cal.Cal.AstAbstractActor");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAstAbstractActor
entryRuleAstAbstractActor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstAbstractActorRule()); }
	iv_ruleAstAbstractActor=ruleAstAbstractActor
	{ $current=$iv_ruleAstAbstractActor.current; }
	EOF;

// Rule AstAbstractActor
ruleAstAbstractActor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAstAbstractActorAccess().getAstActorParserRuleCall_0());
		}
		this_AstActor_0=ruleAstActor
		{
			$current = $this_AstActor_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAstAbstractActorAccess().getAstNetworkParserRuleCall_1());
		}
		this_AstNetwork_1=ruleAstNetwork
		{
			$current = $this_AstNetwork_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAstAbstractActorAccess().getAstExternalActorParserRuleCall_2());
		}
		this_AstExternalActor_2=ruleAstExternalActor
		{
			$current = $this_AstExternalActor_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	iv_ruleImport=ruleImport
	{ $current=$iv_ruleImport.current; }
	EOF;

// Rule Import
ruleImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getImportAccess().getGroupImportTailParserRuleCall_1_0());
			}
			this_GroupImportTail_1=ruleGroupImportTail
			{
				$current = $this_GroupImportTail_1.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getImportAccess().getSingleImportTailParserRuleCall_1_1());
			}
			this_SingleImportTail_2=ruleSingleImportTail
			{
				$current = $this_SingleImportTail_2.current;
				afterParserOrEnumRuleCall();
			}
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getImportAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleRvcImport
entryRuleRvcImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRvcImportRule()); }
	iv_ruleRvcImport=ruleRvcImport
	{ $current=$iv_ruleRvcImport.current; }
	EOF;

// Rule RvcImport
ruleRvcImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getRvcImportAccess().getImportKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRvcImportAccess().getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0());
				}
				lv_importedNamespace_1_0=ruleQualifiedNameWithWildCard
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRvcImportRule());
					}
					set(
						$current,
						"importedNamespace",
						lv_importedNamespace_1_0,
						"streamblocks.eclipse.cal.Cal.QualifiedNameWithWildCard");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getRvcImportAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleGroupImportTail
entryRuleGroupImportTail returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGroupImportTailRule()); }
	iv_ruleGroupImportTail=ruleGroupImportTail
	{ $current=$iv_ruleGroupImportTail.current; }
	EOF;

// Rule GroupImportTail
ruleGroupImportTail returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='all'
		{
			newLeafNode(otherlv_0, grammarAccess.getGroupImportTailAccess().getAllKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGroupImportTailAccess().getKindImportKindEnumRuleCall_1_0());
				}
				lv_kind_1_0=ruleImportKind
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGroupImportTailRule());
					}
					set(
						$current,
						"kind",
						lv_kind_1_0,
						"streamblocks.eclipse.cal.Cal.ImportKind");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getGroupImportTailAccess().getImportedNamespaceQualifiedNameParserRuleCall_2_0());
				}
				lv_importedNamespace_2_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGroupImportTailRule());
					}
					set(
						$current,
						"importedNamespace",
						lv_importedNamespace_2_0,
						"streamblocks.eclipse.cal.Cal.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSingleImportTail
entryRuleSingleImportTail returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSingleImportTailRule()); }
	iv_ruleSingleImportTail=ruleSingleImportTail
	{ $current=$iv_ruleSingleImportTail.current; }
	EOF;

// Rule SingleImportTail
ruleSingleImportTail returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSingleImportTailAccess().getKindImportKindEnumRuleCall_0_0());
				}
				lv_kind_0_0=ruleImportKind
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSingleImportTailRule());
					}
					set(
						$current,
						"kind",
						lv_kind_0_0,
						"streamblocks.eclipse.cal.Cal.ImportKind");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getSingleImportTailAccess().getImportedNamespaceQualifiedNameParserRuleCall_1_0());
				}
				lv_importedNamespace_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSingleImportTailRule());
					}
					set(
						$current,
						"importedNamespace",
						lv_importedNamespace_1_0,
						"streamblocks.eclipse.cal.Cal.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='='
			{
				newLeafNode(otherlv_2, grammarAccess.getSingleImportTailAccess().getEqualsSignKeyword_2_0());
			}
			(
				(
					lv_localNameToken_3_0=RULE_ID
					{
						newLeafNode(lv_localNameToken_3_0, grammarAccess.getSingleImportTailAccess().getLocalNameTokenIDTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSingleImportTailRule());
						}
						setWithLastConsumed(
							$current,
							"localNameToken",
							lv_localNameToken_3_0,
							"streamblocks.eclipse.cal.Cal.ID");
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleQualifiedNameWithWildCard
entryRuleQualifiedNameWithWildCard returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildCardRule()); }
	iv_ruleQualifiedNameWithWildCard=ruleQualifiedNameWithWildCard
	{ $current=$iv_ruleQualifiedNameWithWildCard.current.getText(); }
	EOF;

// Rule QualifiedNameWithWildCard
ruleQualifiedNameWithWildCard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getQualifiedNameWithWildCardAccess().getQualifiedNameParserRuleCall_0());
		}
		this_QualifiedName_0=ruleQualifiedName
		{
			$current.merge(this_QualifiedName_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='.*'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameWithWildCardAccess().getFullStopAsteriskKeyword_1());
			}
		)?
	)
;

// Entry rule entryRuleAstNetwork
entryRuleAstNetwork returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstNetworkRule()); }
	iv_ruleAstNetwork=ruleAstNetwork
	{ $current=$iv_ruleAstNetwork.current; }
	EOF;

// Rule AstNetwork
ruleAstNetwork returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAstNetworkAccess().getAstNetworkAction_0(),
					$current);
			}
		)
		otherlv_1='network'
		{
			newLeafNode(otherlv_1, grammarAccess.getAstNetworkAccess().getNetworkKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getAstNetworkAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstNetworkRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"streamblocks.eclipse.cal.Cal.ID");
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getAstNetworkAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAstNetworkAccess().getParametersAstParameterParserRuleCall_4_0_0());
					}
					lv_parameters_4_0=ruleAstParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstNetworkRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_4_0,
							"streamblocks.eclipse.cal.Cal.AstParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getAstNetworkAccess().getCommaKeyword_4_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstNetworkAccess().getParametersAstParameterParserRuleCall_4_1_1_0());
						}
						lv_parameters_6_0=ruleAstParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstNetworkRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_6_0,
								"streamblocks.eclipse.cal.Cal.AstParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getAstNetworkAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAstNetworkAccess().getInputsAstPortParserRuleCall_6_0_0());
					}
					lv_inputs_8_0=ruleAstPort
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstNetworkRule());
						}
						add(
							$current,
							"inputs",
							lv_inputs_8_0,
							"streamblocks.eclipse.cal.Cal.AstPort");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_9=','
				{
					newLeafNode(otherlv_9, grammarAccess.getAstNetworkAccess().getCommaKeyword_6_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstNetworkAccess().getInputsAstPortParserRuleCall_6_1_1_0());
						}
						lv_inputs_10_0=ruleAstPort
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstNetworkRule());
							}
							add(
								$current,
								"inputs",
								lv_inputs_10_0,
								"streamblocks.eclipse.cal.Cal.AstPort");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_11='==>'
		{
			newLeafNode(otherlv_11, grammarAccess.getAstNetworkAccess().getEqualsSignEqualsSignGreaterThanSignKeyword_7());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAstNetworkAccess().getOutputsAstPortParserRuleCall_8_0_0());
					}
					lv_outputs_12_0=ruleAstPort
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstNetworkRule());
						}
						add(
							$current,
							"outputs",
							lv_outputs_12_0,
							"streamblocks.eclipse.cal.Cal.AstPort");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_13=','
				{
					newLeafNode(otherlv_13, grammarAccess.getAstNetworkAccess().getCommaKeyword_8_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstNetworkAccess().getOutputsAstPortParserRuleCall_8_1_1_0());
						}
						lv_outputs_14_0=ruleAstPort
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstNetworkRule());
							}
							add(
								$current,
								"outputs",
								lv_outputs_14_0,
								"streamblocks.eclipse.cal.Cal.AstPort");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_15=':'
		{
			newLeafNode(otherlv_15, grammarAccess.getAstNetworkAccess().getColonKeyword_9());
		}
		(
			otherlv_16='var'
			{
				newLeafNode(otherlv_16, grammarAccess.getAstNetworkAccess().getVarKeyword_10_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstNetworkAccess().getVariablesAstValuedVariableDeclarationParserRuleCall_10_1_0());
					}
					lv_variables_17_0=ruleAstValuedVariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstNetworkRule());
						}
						add(
							$current,
							"variables",
							lv_variables_17_0,
							"streamblocks.eclipse.cal.Cal.AstValuedVariableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_18=';'
			{
				newLeafNode(otherlv_18, grammarAccess.getAstNetworkAccess().getSemicolonKeyword_10_2());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getAstNetworkAccess().getVariablesAstValuedVariableDeclarationParserRuleCall_10_3_0_0());
						}
						lv_variables_19_0=ruleAstValuedVariableDeclaration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstNetworkRule());
							}
							add(
								$current,
								"variables",
								lv_variables_19_0,
								"streamblocks.eclipse.cal.Cal.AstValuedVariableDeclaration");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_20=';'
				{
					newLeafNode(otherlv_20, grammarAccess.getAstNetworkAccess().getSemicolonKeyword_10_3_1());
				}
			)*
		)?
		otherlv_21='entities'
		{
			newLeafNode(otherlv_21, grammarAccess.getAstNetworkAccess().getEntitiesKeyword_11());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstNetworkAccess().getEntitiesAstEntityDeclarationParserRuleCall_12_0());
				}
				lv_entities_22_0=ruleAstEntityDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstNetworkRule());
					}
					add(
						$current,
						"entities",
						lv_entities_22_0,
						"streamblocks.eclipse.cal.Cal.AstEntityDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getAstNetworkAccess().getStructureAstStructureParserRuleCall_13_0());
				}
				lv_structure_23_0=ruleAstStructure
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstNetworkRule());
					}
					set(
						$current,
						"structure",
						lv_structure_23_0,
						"streamblocks.eclipse.cal.Cal.AstStructure");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_24='end'
		{
			newLeafNode(otherlv_24, grammarAccess.getAstNetworkAccess().getEndKeyword_14());
		}
	)
;

// Entry rule entryRuleAstEntityDeclaration
entryRuleAstEntityDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstEntityDeclarationRule()); }
	iv_ruleAstEntityDeclaration=ruleAstEntityDeclaration
	{ $current=$iv_ruleAstEntityDeclaration.current; }
	EOF;

// Rule AstEntityDeclaration
ruleAstEntityDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getAstEntityDeclarationAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstEntityDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"streamblocks.eclipse.cal.Cal.ID");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getAstEntityDeclarationAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstEntityDeclarationAccess().getEntityAstEntityExprParserRuleCall_2_0());
				}
				lv_entity_2_0=ruleAstEntityExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstEntityDeclarationRule());
					}
					set(
						$current,
						"entity",
						lv_entity_2_0,
						"streamblocks.eclipse.cal.Cal.AstEntityExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getAstEntityDeclarationAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleAstEntityExpr
entryRuleAstEntityExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstEntityExprRule()); }
	iv_ruleAstEntityExpr=ruleAstEntityExpr
	{ $current=$iv_ruleAstEntityExpr.current; }
	EOF;

// Rule AstEntityExpr
ruleAstEntityExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAstEntityExprAccess().getAstEntityInstanceExprParserRuleCall_0());
		}
		this_AstEntityInstanceExpr_0=ruleAstEntityInstanceExpr
		{
			$current = $this_AstEntityInstanceExpr_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAstEntityExprAccess().getAstEntityIfExprParserRuleCall_1());
		}
		this_AstEntityIfExpr_1=ruleAstEntityIfExpr
		{
			$current = $this_AstEntityIfExpr_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAstEntityExprAccess().getAstEntityListExprParserRuleCall_2());
		}
		this_AstEntityListExpr_2=ruleAstEntityListExpr
		{
			$current = $this_AstEntityListExpr_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAstEntityInstanceExpr
entryRuleAstEntityInstanceExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstEntityInstanceExprRule()); }
	iv_ruleAstEntityInstanceExpr=ruleAstEntityInstanceExpr
	{ $current=$iv_ruleAstEntityInstanceExpr.current; }
	EOF;

// Rule AstEntityInstanceExpr
ruleAstEntityInstanceExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstEntityInstanceExprRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getAstEntityInstanceExprAccess().getTypeAstEntityCrossReference_0_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getAstEntityInstanceExprAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAstEntityInstanceExprAccess().getParametersAstAssignParameterParserRuleCall_2_0_0());
					}
					lv_parameters_2_0=ruleAstAssignParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstEntityInstanceExprRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_2_0,
							"streamblocks.eclipse.cal.Cal.AstAssignParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getAstEntityInstanceExprAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstEntityInstanceExprAccess().getParametersAstAssignParameterParserRuleCall_2_1_1_0());
						}
						lv_parameters_4_0=ruleAstAssignParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstEntityInstanceExprRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_4_0,
								"streamblocks.eclipse.cal.Cal.AstAssignParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getAstEntityInstanceExprAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleAstAssignParameter
entryRuleAstAssignParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstAssignParameterRule()); }
	iv_ruleAstAssignParameter=ruleAstAssignParameter
	{ $current=$iv_ruleAstAssignParameter.current; }
	EOF;

// Rule AstAssignParameter
ruleAstAssignParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getAstAssignParameterAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstAssignParameterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"streamblocks.eclipse.cal.Cal.ID");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getAstAssignParameterAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstAssignParameterAccess().getValueAstExpressionParserRuleCall_2_0());
				}
				lv_value_2_0=ruleAstExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstAssignParameterRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"streamblocks.eclipse.cal.Cal.AstExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAstEntityIfExpr
entryRuleAstEntityIfExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstEntityIfExprRule()); }
	iv_ruleAstEntityIfExpr=ruleAstEntityIfExpr
	{ $current=$iv_ruleAstEntityIfExpr.current; }
	EOF;

// Rule AstEntityIfExpr
ruleAstEntityIfExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getAstEntityIfExprAccess().getIfKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstEntityIfExprAccess().getConditionAstExpressionParserRuleCall_1_0());
				}
				lv_condition_1_0=ruleAstExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstEntityIfExprRule());
					}
					set(
						$current,
						"condition",
						lv_condition_1_0,
						"streamblocks.eclipse.cal.Cal.AstExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='then'
		{
			newLeafNode(otherlv_2, grammarAccess.getAstEntityIfExprAccess().getThenKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstEntityIfExprAccess().getTrueEntityAstEntityExprParserRuleCall_3_0());
				}
				lv_trueEntity_3_0=ruleAstEntityExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstEntityIfExprRule());
					}
					set(
						$current,
						"trueEntity",
						lv_trueEntity_3_0,
						"streamblocks.eclipse.cal.Cal.AstEntityExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='else'
		{
			newLeafNode(otherlv_4, grammarAccess.getAstEntityIfExprAccess().getElseKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstEntityIfExprAccess().getFalseEntityAstEntityExprParserRuleCall_5_0());
				}
				lv_falseEntity_5_0=ruleAstEntityExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstEntityIfExprRule());
					}
					set(
						$current,
						"falseEntity",
						lv_falseEntity_5_0,
						"streamblocks.eclipse.cal.Cal.AstEntityExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='end'
		{
			newLeafNode(otherlv_6, grammarAccess.getAstEntityIfExprAccess().getEndKeyword_6());
		}
	)
;

// Entry rule entryRuleAstEntityListExpr
entryRuleAstEntityListExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstEntityListExprRule()); }
	iv_ruleAstEntityListExpr=ruleAstEntityListExpr
	{ $current=$iv_ruleAstEntityListExpr.current; }
	EOF;

// Rule AstEntityListExpr
ruleAstEntityListExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getAstEntityListExprAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstEntityListExprAccess().getExprsAstEntityExprParserRuleCall_1_0());
				}
				lv_exprs_1_0=ruleAstEntityExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstEntityListExprRule());
					}
					add(
						$current,
						"exprs",
						lv_exprs_1_0,
						"streamblocks.eclipse.cal.Cal.AstEntityExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getAstEntityListExprAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstEntityListExprAccess().getExprsAstEntityExprParserRuleCall_2_1_0());
					}
					lv_exprs_3_0=ruleAstEntityExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstEntityListExprRule());
						}
						add(
							$current,
							"exprs",
							lv_exprs_3_0,
							"streamblocks.eclipse.cal.Cal.AstEntityExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_4=':'
			{
				newLeafNode(otherlv_4, grammarAccess.getAstEntityListExprAccess().getColonKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstEntityListExprAccess().getGeneratorAstGeneratorParserRuleCall_3_1_0());
					}
					lv_generator_5_0=ruleAstGenerator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstEntityListExprRule());
						}
						set(
							$current,
							"generator",
							lv_generator_5_0,
							"streamblocks.eclipse.cal.Cal.AstGenerator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6=']'
		{
			newLeafNode(otherlv_6, grammarAccess.getAstEntityListExprAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleAstStructure
entryRuleAstStructure returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstStructureRule()); }
	iv_ruleAstStructure=ruleAstStructure
	{ $current=$iv_ruleAstStructure.current; }
	EOF;

// Rule AstStructure
ruleAstStructure returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='structure'
		{
			newLeafNode(otherlv_0, grammarAccess.getAstStructureAccess().getStructureKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstStructureAccess().getConnectionsAstStructureStatementParserRuleCall_1_0());
				}
				lv_connections_1_0=ruleAstStructureStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstStructureRule());
					}
					add(
						$current,
						"connections",
						lv_connections_1_0,
						"streamblocks.eclipse.cal.Cal.AstStructureStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleAstStructureStatement
entryRuleAstStructureStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstStructureStatementRule()); }
	iv_ruleAstStructureStatement=ruleAstStructureStatement
	{ $current=$iv_ruleAstStructureStatement.current; }
	EOF;

// Rule AstStructureStatement
ruleAstStructureStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAstStructureStatementAccess().getAstStructureStatementConnectionParserRuleCall_0());
		}
		this_AstStructureStatementConnection_0=ruleAstStructureStatementConnection
		{
			$current = $this_AstStructureStatementConnection_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAstStructureStatementAccess().getAstStructureStatementForeachParserRuleCall_1());
		}
		this_AstStructureStatementForeach_1=ruleAstStructureStatementForeach
		{
			$current = $this_AstStructureStatementForeach_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAstStructureStatementAccess().getAstStructureStatementIfParserRuleCall_2());
		}
		this_AstStructureStatementIf_2=ruleAstStructureStatementIf
		{
			$current = $this_AstStructureStatementIf_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAstStructureStatementConnection
entryRuleAstStructureStatementConnection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstStructureStatementConnectionRule()); }
	iv_ruleAstStructureStatementConnection=ruleAstStructureStatementConnection
	{ $current=$iv_ruleAstStructureStatementConnection.current; }
	EOF;

// Rule AstStructureStatementConnection
ruleAstStructureStatementConnection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAstStructureStatementConnectionAccess().getFromAstEntityVariableReferenceParserRuleCall_0_0_0());
					}
					lv_from_0_0=ruleAstEntityVariableReference
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstStructureStatementConnectionRule());
						}
						set(
							$current,
							"from",
							lv_from_0_0,
							"streamblocks.eclipse.cal.Cal.AstEntityVariableReference");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_1='['
				{
					newLeafNode(otherlv_1, grammarAccess.getAstStructureStatementConnectionAccess().getLeftSquareBracketKeyword_0_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstStructureStatementConnectionAccess().getFromIndexesAstExpressionParserRuleCall_0_1_1_0());
						}
						lv_fromIndexes_2_0=ruleAstExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstStructureStatementConnectionRule());
							}
							add(
								$current,
								"fromIndexes",
								lv_fromIndexes_2_0,
								"streamblocks.eclipse.cal.Cal.AstExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_3=']'
				{
					newLeafNode(otherlv_3, grammarAccess.getAstStructureStatementConnectionAccess().getRightSquareBracketKeyword_0_1_2());
				}
			)*
			otherlv_4='.'
			{
				newLeafNode(otherlv_4, grammarAccess.getAstStructureStatementConnectionAccess().getFullStopKeyword_0_2());
			}
		)?
		(
			(
				lv_outPort_5_0=RULE_ID
				{
					newLeafNode(lv_outPort_5_0, grammarAccess.getAstStructureStatementConnectionAccess().getOutPortIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstStructureStatementConnectionRule());
					}
					setWithLastConsumed(
						$current,
						"outPort",
						lv_outPort_5_0,
						"streamblocks.eclipse.cal.Cal.ID");
				}
			)
		)
		otherlv_6='-->'
		{
			newLeafNode(otherlv_6, grammarAccess.getAstStructureStatementConnectionAccess().getHyphenMinusHyphenMinusGreaterThanSignKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAstStructureStatementConnectionAccess().getToAstEntityVariableReferenceParserRuleCall_3_0_0());
					}
					lv_to_7_0=ruleAstEntityVariableReference
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstStructureStatementConnectionRule());
						}
						set(
							$current,
							"to",
							lv_to_7_0,
							"streamblocks.eclipse.cal.Cal.AstEntityVariableReference");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_8='['
				{
					newLeafNode(otherlv_8, grammarAccess.getAstStructureStatementConnectionAccess().getLeftSquareBracketKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstStructureStatementConnectionAccess().getFromIndexesAstExpressionParserRuleCall_3_1_1_0());
						}
						lv_fromIndexes_9_0=ruleAstExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstStructureStatementConnectionRule());
							}
							add(
								$current,
								"fromIndexes",
								lv_fromIndexes_9_0,
								"streamblocks.eclipse.cal.Cal.AstExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_10=']'
				{
					newLeafNode(otherlv_10, grammarAccess.getAstStructureStatementConnectionAccess().getRightSquareBracketKeyword_3_1_2());
				}
			)*
			otherlv_11='.'
			{
				newLeafNode(otherlv_11, grammarAccess.getAstStructureStatementConnectionAccess().getFullStopKeyword_3_2());
			}
		)?
		(
			(
				lv_inPort_12_0=RULE_ID
				{
					newLeafNode(lv_inPort_12_0, grammarAccess.getAstStructureStatementConnectionAccess().getInPortIDTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstStructureStatementConnectionRule());
					}
					setWithLastConsumed(
						$current,
						"inPort",
						lv_inPort_12_0,
						"streamblocks.eclipse.cal.Cal.ID");
				}
			)
		)
		(
			otherlv_13='{'
			{
				newLeafNode(otherlv_13, grammarAccess.getAstStructureStatementConnectionAccess().getLeftCurlyBracketKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstStructureStatementConnectionAccess().getAttributeAstConnectionAttributeParserRuleCall_5_1_0());
					}
					lv_attribute_14_0=ruleAstConnectionAttribute
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstStructureStatementConnectionRule());
						}
						add(
							$current,
							"attribute",
							lv_attribute_14_0,
							"streamblocks.eclipse.cal.Cal.AstConnectionAttribute");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_15='}'
			{
				newLeafNode(otherlv_15, grammarAccess.getAstStructureStatementConnectionAccess().getRightCurlyBracketKeyword_5_2());
			}
		)?
		otherlv_16=';'
		{
			newLeafNode(otherlv_16, grammarAccess.getAstStructureStatementConnectionAccess().getSemicolonKeyword_6());
		}
	)
;

// Entry rule entryRuleAstEntityVariableReference
entryRuleAstEntityVariableReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstEntityVariableReferenceRule()); }
	iv_ruleAstEntityVariableReference=ruleAstEntityVariableReference
	{ $current=$iv_ruleAstEntityVariableReference.current; }
	EOF;

// Rule AstEntityVariableReference
ruleAstEntityVariableReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getAstEntityVariableReferenceRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getAstEntityVariableReferenceAccess().getVariableAstEntityVariableCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleAstConnectionAttribute
entryRuleAstConnectionAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstConnectionAttributeRule()); }
	iv_ruleAstConnectionAttribute=ruleAstConnectionAttribute
	{ $current=$iv_ruleAstConnectionAttribute.current; }
	EOF;

// Rule AstConnectionAttribute
ruleAstConnectionAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getAstConnectionAttributeAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstConnectionAttributeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"streamblocks.eclipse.cal.Cal.ID");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getAstConnectionAttributeAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstConnectionAttributeAccess().getValueAstExpressionParserRuleCall_2_0());
				}
				lv_value_2_0=ruleAstExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstConnectionAttributeRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"streamblocks.eclipse.cal.Cal.AstExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getAstConnectionAttributeAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleAstStructureStatementForeach
entryRuleAstStructureStatementForeach returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstStructureStatementForeachRule()); }
	iv_ruleAstStructureStatementForeach=ruleAstStructureStatementForeach
	{ $current=$iv_ruleAstStructureStatementForeach.current; }
	EOF;

// Rule AstStructureStatementForeach
ruleAstStructureStatementForeach returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='foreach'
		{
			newLeafNode(otherlv_0, grammarAccess.getAstStructureStatementForeachAccess().getForeachKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstStructureStatementForeachAccess().getGeneratorsAstForeachGeneratorParserRuleCall_1_0());
				}
				lv_generators_1_0=ruleAstForeachGenerator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstStructureStatementForeachRule());
					}
					add(
						$current,
						"generators",
						lv_generators_1_0,
						"streamblocks.eclipse.cal.Cal.AstForeachGenerator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getAstStructureStatementForeachAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstStructureStatementForeachAccess().getGeneratorsAstForeachGeneratorParserRuleCall_2_1_0());
					}
					lv_generators_3_0=ruleAstForeachGenerator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstStructureStatementForeachRule());
						}
						add(
							$current,
							"generators",
							lv_generators_3_0,
							"streamblocks.eclipse.cal.Cal.AstForeachGenerator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4='do'
		{
			newLeafNode(otherlv_4, grammarAccess.getAstStructureStatementForeachAccess().getDoKeyword_3());
		}
		(
			otherlv_5='var'
			{
				newLeafNode(otherlv_5, grammarAccess.getAstStructureStatementForeachAccess().getVarKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstStructureStatementForeachAccess().getVariablesAstValuedVariableDeclarationParserRuleCall_4_1_0());
					}
					lv_variables_6_0=ruleAstValuedVariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstStructureStatementForeachRule());
						}
						add(
							$current,
							"variables",
							lv_variables_6_0,
							"streamblocks.eclipse.cal.Cal.AstValuedVariableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_7=','
				{
					newLeafNode(otherlv_7, grammarAccess.getAstStructureStatementForeachAccess().getCommaKeyword_4_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstStructureStatementForeachAccess().getVariablesAstValuedVariableDeclarationParserRuleCall_4_2_1_0());
						}
						lv_variables_8_0=ruleAstValuedVariableDeclaration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstStructureStatementForeachRule());
							}
							add(
								$current,
								"variables",
								lv_variables_8_0,
								"streamblocks.eclipse.cal.Cal.AstValuedVariableDeclaration");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getAstStructureStatementForeachAccess().getStatementsAstStructureStatementParserRuleCall_5_0());
				}
				lv_statements_9_0=ruleAstStructureStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstStructureStatementForeachRule());
					}
					add(
						$current,
						"statements",
						lv_statements_9_0,
						"streamblocks.eclipse.cal.Cal.AstStructureStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_10='end'
		{
			newLeafNode(otherlv_10, grammarAccess.getAstStructureStatementForeachAccess().getEndKeyword_6());
		}
	)
;

// Entry rule entryRuleAstStructureStatementIf
entryRuleAstStructureStatementIf returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstStructureStatementIfRule()); }
	iv_ruleAstStructureStatementIf=ruleAstStructureStatementIf
	{ $current=$iv_ruleAstStructureStatementIf.current; }
	EOF;

// Rule AstStructureStatementIf
ruleAstStructureStatementIf returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getAstStructureStatementIfAccess().getIfKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstStructureStatementIfAccess().getConditionAstExpressionParserRuleCall_1_0());
				}
				lv_condition_1_0=ruleAstExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstStructureStatementIfRule());
					}
					set(
						$current,
						"condition",
						lv_condition_1_0,
						"streamblocks.eclipse.cal.Cal.AstExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='then'
		{
			newLeafNode(otherlv_2, grammarAccess.getAstStructureStatementIfAccess().getThenKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstStructureStatementIfAccess().getThenAstStructureStatementParserRuleCall_3_0());
				}
				lv_then_3_0=ruleAstStructureStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstStructureStatementIfRule());
					}
					add(
						$current,
						"then",
						lv_then_3_0,
						"streamblocks.eclipse.cal.Cal.AstStructureStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getAstStructureStatementIfAccess().getElsifsAstStructureStatementElsifParserRuleCall_4_0());
				}
				lv_elsifs_4_0=ruleAstStructureStatementElsif
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstStructureStatementIfRule());
					}
					add(
						$current,
						"elsifs",
						lv_elsifs_4_0,
						"streamblocks.eclipse.cal.Cal.AstStructureStatementElsif");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			otherlv_5='else'
			{
				newLeafNode(otherlv_5, grammarAccess.getAstStructureStatementIfAccess().getElseKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstStructureStatementIfAccess().getElseAstStructureStatementParserRuleCall_5_1_0());
					}
					lv_else_6_0=ruleAstStructureStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstStructureStatementIfRule());
						}
						add(
							$current,
							"else",
							lv_else_6_0,
							"streamblocks.eclipse.cal.Cal.AstStructureStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		otherlv_7='end'
		{
			newLeafNode(otherlv_7, grammarAccess.getAstStructureStatementIfAccess().getEndKeyword_6());
		}
	)
;

// Entry rule entryRuleAstStructureStatementElsif
entryRuleAstStructureStatementElsif returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstStructureStatementElsifRule()); }
	iv_ruleAstStructureStatementElsif=ruleAstStructureStatementElsif
	{ $current=$iv_ruleAstStructureStatementElsif.current; }
	EOF;

// Rule AstStructureStatementElsif
ruleAstStructureStatementElsif returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='elsif'
		{
			newLeafNode(otherlv_0, grammarAccess.getAstStructureStatementElsifAccess().getElsifKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstStructureStatementElsifAccess().getConditionAstExpressionParserRuleCall_1_0());
				}
				lv_condition_1_0=ruleAstExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstStructureStatementElsifRule());
					}
					set(
						$current,
						"condition",
						lv_condition_1_0,
						"streamblocks.eclipse.cal.Cal.AstExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='then'
		{
			newLeafNode(otherlv_2, grammarAccess.getAstStructureStatementElsifAccess().getThenKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstStructureStatementElsifAccess().getThenAstStructureStatementParserRuleCall_3_0());
				}
				lv_then_3_0=ruleAstStructureStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstStructureStatementElsifRule());
					}
					add(
						$current,
						"then",
						lv_then_3_0,
						"streamblocks.eclipse.cal.Cal.AstStructureStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleAstConstantVariable
entryRuleAstConstantVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstConstantVariableRule()); }
	iv_ruleAstConstantVariable=ruleAstConstantVariable
	{ $current=$iv_ruleAstConstantVariable.current; }
	EOF;

// Rule AstConstantVariable
ruleAstConstantVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAstConstantVariableAccess().getAstVariableDeclarationParserRuleCall_0());
		}
		this_AstVariableDeclaration_0=ruleAstVariableDeclaration
		{
			$current = $this_AstVariableDeclaration_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				lv_constant_1_0='='
				{
					newLeafNode(lv_constant_1_0, grammarAccess.getAstConstantVariableAccess().getConstantEqualsSignKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstConstantVariableRule());
					}
					setWithLastConsumed($current, "constant", true, "=");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAstConstantVariableAccess().getValueAstExpressionParserRuleCall_2_0());
				}
				lv_value_2_0=ruleAstExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstConstantVariableRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"streamblocks.eclipse.cal.Cal.AstExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getAstConstantVariableAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleAstExternalVariable
entryRuleAstExternalVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstExternalVariableRule()); }
	iv_ruleAstExternalVariable=ruleAstExternalVariable
	{ $current=$iv_ruleAstExternalVariable.current; }
	EOF;

// Rule AstExternalVariable
ruleAstExternalVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='external'
		{
			newLeafNode(otherlv_0, grammarAccess.getAstExternalVariableAccess().getExternalKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getAstExternalVariableAccess().getAstVariableDeclarationParserRuleCall_1());
		}
		this_AstVariableDeclaration_1=ruleAstVariableDeclaration
		{
			$current = $this_AstVariableDeclaration_1.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getAstExternalVariableAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleAstTypeDefinition
entryRuleAstTypeDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstTypeDefinitionRule()); }
	iv_ruleAstTypeDefinition=ruleAstTypeDefinition
	{ $current=$iv_ruleAstTypeDefinition.current; }
	EOF;

// Rule AstTypeDefinition
ruleAstTypeDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_definition_0_0='type'
				{
					newLeafNode(lv_definition_0_0, grammarAccess.getAstTypeDefinitionAccess().getDefinitionTypeKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstTypeDefinitionRule());
					}
					setWithLastConsumed($current, "definition", true, "type");
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getAstTypeDefinitionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstTypeDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"streamblocks.eclipse.cal.Cal.ID");
				}
			)
		)
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getAstTypeDefinitionAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getAstTypeDefinitionAccess().getParametersAstTypeDefinitionParameterParserRuleCall_2_1_0_0());
						}
						lv_parameters_3_0=ruleAstTypeDefinitionParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstTypeDefinitionRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_3_0,
								"streamblocks.eclipse.cal.Cal.AstTypeDefinitionParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_4=','
					{
						newLeafNode(otherlv_4, grammarAccess.getAstTypeDefinitionAccess().getCommaKeyword_2_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getAstTypeDefinitionAccess().getParametersAstTypeDefinitionParameterParserRuleCall_2_1_1_1_0());
							}
							lv_parameters_5_0=ruleAstTypeDefinitionParameter
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getAstTypeDefinitionRule());
								}
								add(
									$current,
									"parameters",
									lv_parameters_5_0,
									"streamblocks.eclipse.cal.Cal.AstTypeDefinitionParameter");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getAstTypeDefinitionAccess().getRightParenthesisKeyword_2_2());
			}
		)?
		otherlv_7=':'
		{
			newLeafNode(otherlv_7, grammarAccess.getAstTypeDefinitionAccess().getColonKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAstTypeDefinitionAccess().getTuplesAstTupleParserRuleCall_4_0_0());
					}
					lv_tuples_8_0=ruleAstTuple
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstTypeDefinitionRule());
						}
						add(
							$current,
							"tuples",
							lv_tuples_8_0,
							"streamblocks.eclipse.cal.Cal.AstTuple");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getAstTypeDefinitionAccess().getTuplesAstTaggedTupleParserRuleCall_4_1_0_0());
						}
						lv_tuples_9_0=ruleAstTaggedTuple
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstTypeDefinitionRule());
							}
							add(
								$current,
								"tuples",
								lv_tuples_9_0,
								"streamblocks.eclipse.cal.Cal.AstTaggedTuple");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_10='|'
					{
						newLeafNode(otherlv_10, grammarAccess.getAstTypeDefinitionAccess().getVerticalLineKeyword_4_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getAstTypeDefinitionAccess().getTuplesAstTaggedTupleParserRuleCall_4_1_1_1_0());
							}
							lv_tuples_11_0=ruleAstTaggedTuple
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getAstTypeDefinitionRule());
								}
								add(
									$current,
									"tuples",
									lv_tuples_11_0,
									"streamblocks.eclipse.cal.Cal.AstTaggedTuple");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)
		)
		otherlv_12='end'
		{
			newLeafNode(otherlv_12, grammarAccess.getAstTypeDefinitionAccess().getEndKeyword_5());
		}
	)
;

// Entry rule entryRuleAstTypeDefinitionParameter
entryRuleAstTypeDefinitionParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstTypeDefinitionParameterRule()); }
	iv_ruleAstTypeDefinitionParameter=ruleAstTypeDefinitionParameter
	{ $current=$iv_ruleAstTypeDefinitionParameter.current; }
	EOF;

// Rule AstTypeDefinitionParameter
ruleAstTypeDefinitionParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAstTypeDefinitionParameterAccess().getValueAstVariableDeclarationParserRuleCall_0_0());
				}
				lv_value_0_0=ruleAstVariableDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstTypeDefinitionParameterRule());
					}
					set(
						$current,
						"value",
						lv_value_0_0,
						"streamblocks.eclipse.cal.Cal.AstVariableDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getAstTypeDefinitionParameterAccess().getTypeAstTypeDefinitionTypeParameterParserRuleCall_1_0());
				}
				lv_type_1_0=ruleAstTypeDefinitionTypeParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstTypeDefinitionParameterRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"streamblocks.eclipse.cal.Cal.AstTypeDefinitionTypeParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAstTypeDefinitionTypeParameter
entryRuleAstTypeDefinitionTypeParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstTypeDefinitionTypeParameterRule()); }
	iv_ruleAstTypeDefinitionTypeParameter=ruleAstTypeDefinitionTypeParameter
	{ $current=$iv_ruleAstTypeDefinitionTypeParameter.current; }
	EOF;

// Rule AstTypeDefinitionTypeParameter
ruleAstTypeDefinitionTypeParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_variable_0_0='type'
				{
					newLeafNode(lv_variable_0_0, grammarAccess.getAstTypeDefinitionTypeParameterAccess().getVariableTypeKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstTypeDefinitionTypeParameterRule());
					}
					setWithLastConsumed($current, "variable", true, "type");
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getAstTypeDefinitionTypeParameterAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstTypeDefinitionTypeParameterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"streamblocks.eclipse.cal.Cal.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleAstTaggedTuple
entryRuleAstTaggedTuple returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstTaggedTupleRule()); }
	iv_ruleAstTaggedTuple=ruleAstTaggedTuple
	{ $current=$iv_ruleAstTaggedTuple.current; }
	EOF;

// Rule AstTaggedTuple
ruleAstTaggedTuple returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getAstTaggedTupleAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstTaggedTupleRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"streamblocks.eclipse.cal.Cal.ID");
				}
			)
		)
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getAstTaggedTupleAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getAstTaggedTupleAccess().getFieldsAstValuedVariableDeclarationParserRuleCall_1_1_0_0());
						}
						lv_fields_2_0=ruleAstValuedVariableDeclaration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstTaggedTupleRule());
							}
							add(
								$current,
								"fields",
								lv_fields_2_0,
								"streamblocks.eclipse.cal.Cal.AstValuedVariableDeclaration");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_3=','
					{
						newLeafNode(otherlv_3, grammarAccess.getAstTaggedTupleAccess().getCommaKeyword_1_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getAstTaggedTupleAccess().getFieldsAstValuedVariableDeclarationParserRuleCall_1_1_1_1_0());
							}
							lv_fields_4_0=ruleAstValuedVariableDeclaration
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getAstTaggedTupleRule());
								}
								add(
									$current,
									"fields",
									lv_fields_4_0,
									"streamblocks.eclipse.cal.Cal.AstValuedVariableDeclaration");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getAstTaggedTupleAccess().getRightParenthesisKeyword_1_2());
			}
		)?
	)
;

// Entry rule entryRuleAstTuple
entryRuleAstTuple returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstTupleRule()); }
	iv_ruleAstTuple=ruleAstTuple
	{ $current=$iv_ruleAstTuple.current; }
	EOF;

// Rule AstTuple
ruleAstTuple returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAstTupleAccess().getAstTupleAction_0(),
					$current);
			}
		)
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getAstTupleAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getAstTupleAccess().getFieldsAstValuedVariableDeclarationParserRuleCall_1_1_0_0());
						}
						lv_fields_2_0=ruleAstValuedVariableDeclaration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstTupleRule());
							}
							add(
								$current,
								"fields",
								lv_fields_2_0,
								"streamblocks.eclipse.cal.Cal.AstValuedVariableDeclaration");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_3=','
					{
						newLeafNode(otherlv_3, grammarAccess.getAstTupleAccess().getCommaKeyword_1_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getAstTupleAccess().getFieldsAstValuedVariableDeclarationParserRuleCall_1_1_1_1_0());
							}
							lv_fields_4_0=ruleAstValuedVariableDeclaration
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getAstTupleRule());
								}
								add(
									$current,
									"fields",
									lv_fields_4_0,
									"streamblocks.eclipse.cal.Cal.AstValuedVariableDeclaration");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getAstTupleAccess().getRightParenthesisKeyword_1_2());
			}
		)
	)
;

// Entry rule entryRuleAstActor
entryRuleAstActor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstActorRule()); }
	iv_ruleAstActor=ruleAstActor
	{ $current=$iv_ruleAstActor.current; }
	EOF;

// Rule AstActor
ruleAstActor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAstActorAccess().getAstActorAction_0(),
					$current);
			}
		)
		otherlv_1='actor'
		{
			newLeafNode(otherlv_1, grammarAccess.getAstActorAccess().getActorKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getAstActorAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstActorRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"streamblocks.eclipse.cal.Cal.ID");
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getAstActorAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAstActorAccess().getParametersAstParameterParserRuleCall_4_0_0());
					}
					lv_parameters_4_0=ruleAstParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstActorRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_4_0,
							"streamblocks.eclipse.cal.Cal.AstParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getAstActorAccess().getCommaKeyword_4_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstActorAccess().getParametersAstParameterParserRuleCall_4_1_1_0());
						}
						lv_parameters_6_0=ruleAstParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstActorRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_6_0,
								"streamblocks.eclipse.cal.Cal.AstParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getAstActorAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAstActorAccess().getInputsAstPortParserRuleCall_6_0_0());
					}
					lv_inputs_8_0=ruleAstPort
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstActorRule());
						}
						add(
							$current,
							"inputs",
							lv_inputs_8_0,
							"streamblocks.eclipse.cal.Cal.AstPort");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_9=','
				{
					newLeafNode(otherlv_9, grammarAccess.getAstActorAccess().getCommaKeyword_6_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstActorAccess().getInputsAstPortParserRuleCall_6_1_1_0());
						}
						lv_inputs_10_0=ruleAstPort
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstActorRule());
							}
							add(
								$current,
								"inputs",
								lv_inputs_10_0,
								"streamblocks.eclipse.cal.Cal.AstPort");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_11='==>'
		{
			newLeafNode(otherlv_11, grammarAccess.getAstActorAccess().getEqualsSignEqualsSignGreaterThanSignKeyword_7());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAstActorAccess().getOutputsAstPortParserRuleCall_8_0_0());
					}
					lv_outputs_12_0=ruleAstPort
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstActorRule());
						}
						add(
							$current,
							"outputs",
							lv_outputs_12_0,
							"streamblocks.eclipse.cal.Cal.AstPort");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_13=','
				{
					newLeafNode(otherlv_13, grammarAccess.getAstActorAccess().getCommaKeyword_8_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstActorAccess().getOutputsAstPortParserRuleCall_8_1_1_0());
						}
						lv_outputs_14_0=ruleAstPort
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstActorRule());
							}
							add(
								$current,
								"outputs",
								lv_outputs_14_0,
								"streamblocks.eclipse.cal.Cal.AstPort");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_15=':'
		{
			newLeafNode(otherlv_15, grammarAccess.getAstActorAccess().getColonKeyword_9());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAstActorAccess().getFunctionsAstFunctionParserRuleCall_10_0_0());
					}
					lv_functions_16_0=ruleAstFunction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstActorRule());
						}
						add(
							$current,
							"functions",
							lv_functions_16_0,
							"streamblocks.eclipse.cal.Cal.AstFunction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAstActorAccess().getProceduresAstProcedureParserRuleCall_10_1_0());
					}
					lv_procedures_17_0=ruleAstProcedure
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstActorRule());
						}
						add(
							$current,
							"procedures",
							lv_procedures_17_0,
							"streamblocks.eclipse.cal.Cal.AstProcedure");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAstActorAccess().getInvariantsAstInvariantParserRuleCall_10_2_0());
					}
					lv_invariants_18_0=ruleAstInvariant
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstActorRule());
						}
						add(
							$current,
							"invariants",
							lv_invariants_18_0,
							"streamblocks.eclipse.cal.Cal.AstInvariant");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAstActorAccess().getActionsAstActionParserRuleCall_10_3_0());
					}
					lv_actions_19_0=ruleAstAction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstActorRule());
						}
						add(
							$current,
							"actions",
							lv_actions_19_0,
							"streamblocks.eclipse.cal.Cal.AstAction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAstActorAccess().getProcessesAstProcessDescriptionParserRuleCall_10_4_0());
					}
					lv_processes_20_0=ruleAstProcessDescription
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstActorRule());
						}
						add(
							$current,
							"processes",
							lv_processes_20_0,
							"streamblocks.eclipse.cal.Cal.AstProcessDescription");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAstActorAccess().getInitializesAstInitializeParserRuleCall_10_5_0());
					}
					lv_initializes_21_0=ruleAstInitialize
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstActorRule());
						}
						add(
							$current,
							"initializes",
							lv_initializes_21_0,
							"streamblocks.eclipse.cal.Cal.AstInitialize");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAstActorAccess().getStateVariablesAstStateVariableParserRuleCall_10_6_0());
					}
					lv_stateVariables_22_0=ruleAstStateVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstActorRule());
						}
						add(
							$current,
							"stateVariables",
							lv_stateVariables_22_0,
							"streamblocks.eclipse.cal.Cal.AstStateVariable");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAstActorAccess().getSchedulesAstScheduleParserRuleCall_11_0_0());
					}
					lv_schedules_23_0=ruleAstSchedule
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstActorRule());
						}
						set(
							$current,
							"schedules",
							lv_schedules_23_0,
							"streamblocks.eclipse.cal.Cal.AstSchedule");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAstActorAccess().getScheduleRegExpAstScheduleRegExpParserRuleCall_11_1_0());
					}
					lv_scheduleRegExp_24_0=ruleAstScheduleRegExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstActorRule());
						}
						set(
							$current,
							"scheduleRegExp",
							lv_scheduleRegExp_24_0,
							"streamblocks.eclipse.cal.Cal.AstScheduleRegExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getAstActorAccess().getPrioritiesAstPriorityParserRuleCall_12_0());
				}
				lv_priorities_25_0=ruleAstPriority
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstActorRule());
					}
					add(
						$current,
						"priorities",
						lv_priorities_25_0,
						"streamblocks.eclipse.cal.Cal.AstPriority");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_26='end'
		{
			newLeafNode(otherlv_26, grammarAccess.getAstActorAccess().getEndKeyword_13());
		}
	)
;

// Entry rule entryRuleAstProcessDescription
entryRuleAstProcessDescription returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstProcessDescriptionRule()); }
	iv_ruleAstProcessDescription=ruleAstProcessDescription
	{ $current=$iv_ruleAstProcessDescription.current; }
	EOF;

// Rule AstProcessDescription
ruleAstProcessDescription returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAstProcessDescriptionAccess().getAstProcessDescriptionAction_0(),
					$current);
			}
		)
		(
			(
				(
					lv_repeated_1_0='repeat'
					{
						newLeafNode(lv_repeated_1_0, grammarAccess.getAstProcessDescriptionAccess().getRepeatedRepeatKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAstProcessDescriptionRule());
						}
						setWithLastConsumed($current, "repeated", true, "repeat");
					}
				)
			)
			    |
			otherlv_2='do'
			{
				newLeafNode(otherlv_2, grammarAccess.getAstProcessDescriptionAccess().getDoKeyword_1_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAstProcessDescriptionAccess().getStatementsAstStatementParserRuleCall_2_0());
				}
				lv_statements_3_0=ruleAstStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstProcessDescriptionRule());
					}
					add(
						$current,
						"statements",
						lv_statements_3_0,
						"streamblocks.eclipse.cal.Cal.AstStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='end'
		{
			newLeafNode(otherlv_4, grammarAccess.getAstProcessDescriptionAccess().getEndKeyword_3());
		}
	)
;

// Entry rule entryRuleAstPort
entryRuleAstPort returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstPortRule()); }
	iv_ruleAstPort=ruleAstPort
	{ $current=$iv_ruleAstPort.current; }
	EOF;

// Rule AstPort
ruleAstPort returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAstPortAccess().getAnnotationsAstAnnotationParserRuleCall_0_0());
				}
				lv_annotations_0_0=ruleAstAnnotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstPortRule());
					}
					add(
						$current,
						"annotations",
						lv_annotations_0_0,
						"streamblocks.eclipse.cal.Cal.AstAnnotation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getAstPortAccess().getTypeAstTypeParserRuleCall_1_0());
				}
				lv_type_1_0=ruleAstType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstPortRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"streamblocks.eclipse.cal.Cal.AstType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getAstPortAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstPortRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"streamblocks.eclipse.cal.Cal.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleAstFunction
entryRuleAstFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstFunctionRule()); }
	iv_ruleAstFunction=ruleAstFunction
	{ $current=$iv_ruleAstFunction.current; }
	EOF;

// Rule AstFunction
ruleAstFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAstFunctionAccess().getAstFunctionAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAstFunctionAccess().getAnnotationsAstAnnotationParserRuleCall_1_0());
				}
				lv_annotations_1_0=ruleAstAnnotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstFunctionRule());
					}
					add(
						$current,
						"annotations",
						lv_annotations_1_0,
						"streamblocks.eclipse.cal.Cal.AstAnnotation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_2='function'
		{
			newLeafNode(otherlv_2, grammarAccess.getAstFunctionAccess().getFunctionKeyword_2());
		}
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getAstFunctionAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstFunctionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"streamblocks.eclipse.cal.Cal.ID");
				}
			)
		)
		otherlv_4='('
		{
			newLeafNode(otherlv_4, grammarAccess.getAstFunctionAccess().getLeftParenthesisKeyword_4());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAstFunctionAccess().getParametersAstVariableDeclarationParserRuleCall_5_0_0());
					}
					lv_parameters_5_0=ruleAstVariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstFunctionRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_5_0,
							"streamblocks.eclipse.cal.Cal.AstVariableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getAstFunctionAccess().getCommaKeyword_5_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstFunctionAccess().getParametersAstVariableDeclarationParserRuleCall_5_1_1_0());
						}
						lv_parameters_7_0=ruleAstVariableDeclaration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstFunctionRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_7_0,
								"streamblocks.eclipse.cal.Cal.AstVariableDeclaration");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_8=')'
		{
			newLeafNode(otherlv_8, grammarAccess.getAstFunctionAccess().getRightParenthesisKeyword_6());
		}
		otherlv_9='-->'
		{
			newLeafNode(otherlv_9, grammarAccess.getAstFunctionAccess().getHyphenMinusHyphenMinusGreaterThanSignKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstFunctionAccess().getTypeAstTypeParserRuleCall_8_0());
				}
				lv_type_10_0=ruleAstType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstFunctionRule());
					}
					set(
						$current,
						"type",
						lv_type_10_0,
						"streamblocks.eclipse.cal.Cal.AstType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_11='var'
			{
				newLeafNode(otherlv_11, grammarAccess.getAstFunctionAccess().getVarKeyword_9_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstFunctionAccess().getVariablesAstValuedVariableDeclarationParserRuleCall_9_1_0());
					}
					lv_variables_12_0=ruleAstValuedVariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstFunctionRule());
						}
						add(
							$current,
							"variables",
							lv_variables_12_0,
							"streamblocks.eclipse.cal.Cal.AstValuedVariableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_13=','
				{
					newLeafNode(otherlv_13, grammarAccess.getAstFunctionAccess().getCommaKeyword_9_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstFunctionAccess().getVariablesAstValuedVariableDeclarationParserRuleCall_9_2_1_0());
						}
						lv_variables_14_0=ruleAstValuedVariableDeclaration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstFunctionRule());
							}
							add(
								$current,
								"variables",
								lv_variables_14_0,
								"streamblocks.eclipse.cal.Cal.AstValuedVariableDeclaration");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_15=':'
			{
				newLeafNode(otherlv_15, grammarAccess.getAstFunctionAccess().getColonKeyword_10_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstFunctionAccess().getExpressionAstExpressionParserRuleCall_10_1_0());
					}
					lv_expression_16_0=ruleAstExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstFunctionRule());
						}
						set(
							$current,
							"expression",
							lv_expression_16_0,
							"streamblocks.eclipse.cal.Cal.AstExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_17='end'
		{
			newLeafNode(otherlv_17, grammarAccess.getAstFunctionAccess().getEndKeyword_11());
		}
	)
;

// Entry rule entryRuleAstExternalFunction
entryRuleAstExternalFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstExternalFunctionRule()); }
	iv_ruleAstExternalFunction=ruleAstExternalFunction
	{ $current=$iv_ruleAstExternalFunction.current; }
	EOF;

// Rule AstExternalFunction
ruleAstExternalFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAstExternalFunctionAccess().getAstFunctionAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAstExternalFunctionAccess().getAnnotationsAstAnnotationParserRuleCall_1_0());
				}
				lv_annotations_1_0=ruleAstAnnotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstExternalFunctionRule());
					}
					add(
						$current,
						"annotations",
						lv_annotations_1_0,
						"streamblocks.eclipse.cal.Cal.AstAnnotation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_2='external'
		{
			newLeafNode(otherlv_2, grammarAccess.getAstExternalFunctionAccess().getExternalKeyword_2());
		}
		otherlv_3='function'
		{
			newLeafNode(otherlv_3, grammarAccess.getAstExternalFunctionAccess().getFunctionKeyword_3());
		}
		(
			(
				lv_name_4_0=RULE_ID
				{
					newLeafNode(lv_name_4_0, grammarAccess.getAstExternalFunctionAccess().getNameIDTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstExternalFunctionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_4_0,
						"streamblocks.eclipse.cal.Cal.ID");
				}
			)
		)
		otherlv_5='('
		{
			newLeafNode(otherlv_5, grammarAccess.getAstExternalFunctionAccess().getLeftParenthesisKeyword_5());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAstExternalFunctionAccess().getParametersAstVariableDeclarationParserRuleCall_6_0_0());
					}
					lv_parameters_6_0=ruleAstVariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstExternalFunctionRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_6_0,
							"streamblocks.eclipse.cal.Cal.AstVariableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_7=','
				{
					newLeafNode(otherlv_7, grammarAccess.getAstExternalFunctionAccess().getCommaKeyword_6_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstExternalFunctionAccess().getParametersAstVariableDeclarationParserRuleCall_6_1_1_0());
						}
						lv_parameters_8_0=ruleAstVariableDeclaration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstExternalFunctionRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_8_0,
								"streamblocks.eclipse.cal.Cal.AstVariableDeclaration");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_9=')'
		{
			newLeafNode(otherlv_9, grammarAccess.getAstExternalFunctionAccess().getRightParenthesisKeyword_7());
		}
		otherlv_10='-->'
		{
			newLeafNode(otherlv_10, grammarAccess.getAstExternalFunctionAccess().getHyphenMinusHyphenMinusGreaterThanSignKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstExternalFunctionAccess().getTypeAstTypeParserRuleCall_9_0());
				}
				lv_type_11_0=ruleAstType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstExternalFunctionRule());
					}
					set(
						$current,
						"type",
						lv_type_11_0,
						"streamblocks.eclipse.cal.Cal.AstType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_12='end'
		{
			newLeafNode(otherlv_12, grammarAccess.getAstExternalFunctionAccess().getEndKeyword_10());
		}
	)
;

// Entry rule entryRuleAstProcedure
entryRuleAstProcedure returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstProcedureRule()); }
	iv_ruleAstProcedure=ruleAstProcedure
	{ $current=$iv_ruleAstProcedure.current; }
	EOF;

// Rule AstProcedure
ruleAstProcedure returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAstProcedureAccess().getAstProcedureAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAstProcedureAccess().getAnnotationsAstAnnotationParserRuleCall_1_0());
				}
				lv_annotations_1_0=ruleAstAnnotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstProcedureRule());
					}
					add(
						$current,
						"annotations",
						lv_annotations_1_0,
						"streamblocks.eclipse.cal.Cal.AstAnnotation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_2='procedure'
		{
			newLeafNode(otherlv_2, grammarAccess.getAstProcedureAccess().getProcedureKeyword_2());
		}
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getAstProcedureAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstProcedureRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"streamblocks.eclipse.cal.Cal.ID");
				}
			)
		)
		otherlv_4='('
		{
			newLeafNode(otherlv_4, grammarAccess.getAstProcedureAccess().getLeftParenthesisKeyword_4());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAstProcedureAccess().getParametersAstVariableDeclarationParserRuleCall_5_0_0());
					}
					lv_parameters_5_0=ruleAstVariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstProcedureRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_5_0,
							"streamblocks.eclipse.cal.Cal.AstVariableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getAstProcedureAccess().getCommaKeyword_5_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstProcedureAccess().getParametersAstVariableDeclarationParserRuleCall_5_1_1_0());
						}
						lv_parameters_7_0=ruleAstVariableDeclaration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstProcedureRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_7_0,
								"streamblocks.eclipse.cal.Cal.AstVariableDeclaration");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_8=')'
		{
			newLeafNode(otherlv_8, grammarAccess.getAstProcedureAccess().getRightParenthesisKeyword_6());
		}
		(
			otherlv_9='var'
			{
				newLeafNode(otherlv_9, grammarAccess.getAstProcedureAccess().getVarKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstProcedureAccess().getVariablesAstValuedVariableDeclarationParserRuleCall_7_1_0());
					}
					lv_variables_10_0=ruleAstValuedVariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstProcedureRule());
						}
						add(
							$current,
							"variables",
							lv_variables_10_0,
							"streamblocks.eclipse.cal.Cal.AstValuedVariableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_11=','
				{
					newLeafNode(otherlv_11, grammarAccess.getAstProcedureAccess().getCommaKeyword_7_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstProcedureAccess().getVariablesAstValuedVariableDeclarationParserRuleCall_7_2_1_0());
						}
						lv_variables_12_0=ruleAstValuedVariableDeclaration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstProcedureRule());
							}
							add(
								$current,
								"variables",
								lv_variables_12_0,
								"streamblocks.eclipse.cal.Cal.AstValuedVariableDeclaration");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_13='begin'
			{
				newLeafNode(otherlv_13, grammarAccess.getAstProcedureAccess().getBeginKeyword_8_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstProcedureAccess().getStatementsAstStatementParserRuleCall_8_1_0());
					}
					lv_statements_14_0=ruleAstStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstProcedureRule());
						}
						add(
							$current,
							"statements",
							lv_statements_14_0,
							"streamblocks.eclipse.cal.Cal.AstStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		otherlv_15='end'
		{
			newLeafNode(otherlv_15, grammarAccess.getAstProcedureAccess().getEndKeyword_9());
		}
	)
;

// Entry rule entryRuleAstExternalProcedure
entryRuleAstExternalProcedure returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstExternalProcedureRule()); }
	iv_ruleAstExternalProcedure=ruleAstExternalProcedure
	{ $current=$iv_ruleAstExternalProcedure.current; }
	EOF;

// Rule AstExternalProcedure
ruleAstExternalProcedure returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAstExternalProcedureAccess().getAstProcedureAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAstExternalProcedureAccess().getAnnotationsAstAnnotationParserRuleCall_1_0());
				}
				lv_annotations_1_0=ruleAstAnnotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstExternalProcedureRule());
					}
					add(
						$current,
						"annotations",
						lv_annotations_1_0,
						"streamblocks.eclipse.cal.Cal.AstAnnotation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_2='external'
		{
			newLeafNode(otherlv_2, grammarAccess.getAstExternalProcedureAccess().getExternalKeyword_2());
		}
		otherlv_3='procedure'
		{
			newLeafNode(otherlv_3, grammarAccess.getAstExternalProcedureAccess().getProcedureKeyword_3());
		}
		(
			(
				lv_name_4_0=RULE_ID
				{
					newLeafNode(lv_name_4_0, grammarAccess.getAstExternalProcedureAccess().getNameIDTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstExternalProcedureRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_4_0,
						"streamblocks.eclipse.cal.Cal.ID");
				}
			)
		)
		otherlv_5='('
		{
			newLeafNode(otherlv_5, grammarAccess.getAstExternalProcedureAccess().getLeftParenthesisKeyword_5());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAstExternalProcedureAccess().getParametersAstVariableDeclarationParserRuleCall_6_0_0());
					}
					lv_parameters_6_0=ruleAstVariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstExternalProcedureRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_6_0,
							"streamblocks.eclipse.cal.Cal.AstVariableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_7=','
				{
					newLeafNode(otherlv_7, grammarAccess.getAstExternalProcedureAccess().getCommaKeyword_6_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstExternalProcedureAccess().getParametersAstVariableDeclarationParserRuleCall_6_1_1_0());
						}
						lv_parameters_8_0=ruleAstVariableDeclaration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstExternalProcedureRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_8_0,
								"streamblocks.eclipse.cal.Cal.AstVariableDeclaration");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_9=')'
		{
			newLeafNode(otherlv_9, grammarAccess.getAstExternalProcedureAccess().getRightParenthesisKeyword_7());
		}
		otherlv_10='end'
		{
			newLeafNode(otherlv_10, grammarAccess.getAstExternalProcedureAccess().getEndKeyword_8());
		}
	)
;

// Entry rule entryRuleAstParameter
entryRuleAstParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstParameterRule()); }
	iv_ruleAstParameter=ruleAstParameter
	{ $current=$iv_ruleAstParameter.current; }
	EOF;

// Rule AstParameter
ruleAstParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAstParameterAccess().getAstVariableDeclarationParserRuleCall_0());
		}
		this_AstVariableDeclaration_0=ruleAstVariableDeclaration
		{
			$current = $this_AstVariableDeclaration_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_1='='
			{
				newLeafNode(otherlv_1, grammarAccess.getAstParameterAccess().getEqualsSignKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstParameterAccess().getValueAstExpressionParserRuleCall_1_1_0());
					}
					lv_value_2_0=ruleAstExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstParameterRule());
						}
						set(
							$current,
							"value",
							lv_value_2_0,
							"streamblocks.eclipse.cal.Cal.AstExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleAstStateVariable
entryRuleAstStateVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstStateVariableRule()); }
	iv_ruleAstStateVariable=ruleAstStateVariable
	{ $current=$iv_ruleAstStateVariable.current; }
	EOF;

// Rule AstStateVariable
ruleAstStateVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAstStateVariableAccess().getAstValuedVariableDeclarationParserRuleCall_0());
		}
		this_AstValuedVariableDeclaration_0=ruleAstValuedVariableDeclaration
		{
			$current = $this_AstValuedVariableDeclaration_0.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_1=';'
		{
			newLeafNode(otherlv_1, grammarAccess.getAstStateVariableAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleAstTag
entryRuleAstTag returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstTagRule()); }
	iv_ruleAstTag=ruleAstTag
	{ $current=$iv_ruleAstTag.current; }
	EOF;

// Rule AstTag
ruleAstTag returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_identifiers_0_0=RULE_ID
				{
					newLeafNode(lv_identifiers_0_0, grammarAccess.getAstTagAccess().getIdentifiersIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstTagRule());
					}
					addWithLastConsumed(
						$current,
						"identifiers",
						lv_identifiers_0_0,
						"streamblocks.eclipse.cal.Cal.ID");
				}
			)
		)
		(
			otherlv_1='.'
			{
				newLeafNode(otherlv_1, grammarAccess.getAstTagAccess().getFullStopKeyword_1_0());
			}
			(
				(
					lv_identifiers_2_0=RULE_ID
					{
						newLeafNode(lv_identifiers_2_0, grammarAccess.getAstTagAccess().getIdentifiersIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAstTagRule());
						}
						addWithLastConsumed(
							$current,
							"identifiers",
							lv_identifiers_2_0,
							"streamblocks.eclipse.cal.Cal.ID");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAstInvariant
entryRuleAstInvariant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstInvariantRule()); }
	iv_ruleAstInvariant=ruleAstInvariant
	{ $current=$iv_ruleAstInvariant.current; }
	EOF;

// Rule AstInvariant
ruleAstInvariant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='invariant'
		{
			newLeafNode(otherlv_0, grammarAccess.getAstInvariantAccess().getInvariantKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstInvariantAccess().getInvariantsAstExpressionParserRuleCall_1_0());
				}
				lv_invariants_1_0=ruleAstExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstInvariantRule());
					}
					add(
						$current,
						"invariants",
						lv_invariants_1_0,
						"streamblocks.eclipse.cal.Cal.AstExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getAstInvariantAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstInvariantAccess().getInvariantsAstExpressionParserRuleCall_2_1_0());
					}
					lv_invariants_3_0=ruleAstExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstInvariantRule());
						}
						add(
							$current,
							"invariants",
							lv_invariants_3_0,
							"streamblocks.eclipse.cal.Cal.AstExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_4='end'
			{
				newLeafNode(otherlv_4, grammarAccess.getAstInvariantAccess().getEndKeyword_3_0());
			}
			    |
			otherlv_5='endinvariant'
			{
				newLeafNode(otherlv_5, grammarAccess.getAstInvariantAccess().getEndinvariantKeyword_3_1());
			}
		)
	)
;

// Entry rule entryRuleAstExternalActor
entryRuleAstExternalActor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstExternalActorRule()); }
	iv_ruleAstExternalActor=ruleAstExternalActor
	{ $current=$iv_ruleAstExternalActor.current; }
	EOF;

// Rule AstExternalActor
ruleAstExternalActor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAstExternalActorAccess().getAstExternalActorAction_0(),
					$current);
			}
		)
		otherlv_1='external'
		{
			newLeafNode(otherlv_1, grammarAccess.getAstExternalActorAccess().getExternalKeyword_1());
		}
		otherlv_2='actor'
		{
			newLeafNode(otherlv_2, grammarAccess.getAstExternalActorAccess().getActorKeyword_2());
		}
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getAstExternalActorAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstExternalActorRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"streamblocks.eclipse.cal.Cal.ID");
				}
			)
		)
		otherlv_4='('
		{
			newLeafNode(otherlv_4, grammarAccess.getAstExternalActorAccess().getLeftParenthesisKeyword_4());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAstExternalActorAccess().getParametersAstParameterParserRuleCall_5_0_0());
					}
					lv_parameters_5_0=ruleAstParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstExternalActorRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_5_0,
							"streamblocks.eclipse.cal.Cal.AstParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getAstExternalActorAccess().getCommaKeyword_5_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstExternalActorAccess().getParametersAstParameterParserRuleCall_5_1_1_0());
						}
						lv_parameters_7_0=ruleAstParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstExternalActorRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_7_0,
								"streamblocks.eclipse.cal.Cal.AstParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_8=')'
		{
			newLeafNode(otherlv_8, grammarAccess.getAstExternalActorAccess().getRightParenthesisKeyword_6());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAstExternalActorAccess().getInputsAstPortParserRuleCall_7_0_0());
					}
					lv_inputs_9_0=ruleAstPort
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstExternalActorRule());
						}
						add(
							$current,
							"inputs",
							lv_inputs_9_0,
							"streamblocks.eclipse.cal.Cal.AstPort");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_10=','
				{
					newLeafNode(otherlv_10, grammarAccess.getAstExternalActorAccess().getCommaKeyword_7_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstExternalActorAccess().getInputsAstPortParserRuleCall_7_1_1_0());
						}
						lv_inputs_11_0=ruleAstPort
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstExternalActorRule());
							}
							add(
								$current,
								"inputs",
								lv_inputs_11_0,
								"streamblocks.eclipse.cal.Cal.AstPort");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_12='==>'
		{
			newLeafNode(otherlv_12, grammarAccess.getAstExternalActorAccess().getEqualsSignEqualsSignGreaterThanSignKeyword_8());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAstExternalActorAccess().getOutputsAstPortParserRuleCall_9_0_0());
					}
					lv_outputs_13_0=ruleAstPort
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstExternalActorRule());
						}
						add(
							$current,
							"outputs",
							lv_outputs_13_0,
							"streamblocks.eclipse.cal.Cal.AstPort");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_14=','
				{
					newLeafNode(otherlv_14, grammarAccess.getAstExternalActorAccess().getCommaKeyword_9_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstExternalActorAccess().getOutputsAstPortParserRuleCall_9_1_1_0());
						}
						lv_outputs_15_0=ruleAstPort
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstExternalActorRule());
							}
							add(
								$current,
								"outputs",
								lv_outputs_15_0,
								"streamblocks.eclipse.cal.Cal.AstPort");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_16=';'
		{
			newLeafNode(otherlv_16, grammarAccess.getAstExternalActorAccess().getSemicolonKeyword_10());
		}
	)
;

// Entry rule entryRuleAstInequality
entryRuleAstInequality returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstInequalityRule()); }
	iv_ruleAstInequality=ruleAstInequality
	{ $current=$iv_ruleAstInequality.current; }
	EOF;

// Rule AstInequality
ruleAstInequality returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAstInequalityAccess().getTagsAstTagParserRuleCall_0_0());
				}
				lv_tags_0_0=ruleAstTag
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstInequalityRule());
					}
					add(
						$current,
						"tags",
						lv_tags_0_0,
						"streamblocks.eclipse.cal.Cal.AstTag");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='>'
			{
				newLeafNode(otherlv_1, grammarAccess.getAstInequalityAccess().getGreaterThanSignKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstInequalityAccess().getTagsAstTagParserRuleCall_1_1_0());
					}
					lv_tags_2_0=ruleAstTag
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstInequalityRule());
						}
						add(
							$current,
							"tags",
							lv_tags_2_0,
							"streamblocks.eclipse.cal.Cal.AstTag");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getAstInequalityAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleAstPriority
entryRuleAstPriority returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstPriorityRule()); }
	iv_ruleAstPriority=ruleAstPriority
	{ $current=$iv_ruleAstPriority.current; }
	EOF;

// Rule AstPriority
ruleAstPriority returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAstPriorityAccess().getAstPriorityAction_0(),
					$current);
			}
		)
		otherlv_1='priority'
		{
			newLeafNode(otherlv_1, grammarAccess.getAstPriorityAccess().getPriorityKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstPriorityAccess().getInequalitiesAstInequalityParserRuleCall_2_0());
				}
				lv_inequalities_2_0=ruleAstInequality
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstPriorityRule());
					}
					add(
						$current,
						"inequalities",
						lv_inequalities_2_0,
						"streamblocks.eclipse.cal.Cal.AstInequality");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='end'
		{
			newLeafNode(otherlv_3, grammarAccess.getAstPriorityAccess().getEndKeyword_3());
		}
	)
;

// Entry rule entryRuleAstSchedule
entryRuleAstSchedule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstScheduleRule()); }
	iv_ruleAstSchedule=ruleAstSchedule
	{ $current=$iv_ruleAstSchedule.current; }
	EOF;

// Rule AstSchedule
ruleAstSchedule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='schedule'
		{
			newLeafNode(otherlv_0, grammarAccess.getAstScheduleAccess().getScheduleKeyword_0());
		}
		otherlv_1='fsm'
		{
			newLeafNode(otherlv_1, grammarAccess.getAstScheduleAccess().getFsmKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstScheduleRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getAstScheduleAccess().getInitialStateAstStateCrossReference_2_0());
				}
			)
		)
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getAstScheduleAccess().getColonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstScheduleAccess().getTransitionsAstTransitionParserRuleCall_4_0());
				}
				lv_transitions_4_0=ruleAstTransition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstScheduleRule());
					}
					add(
						$current,
						"transitions",
						lv_transitions_4_0,
						"streamblocks.eclipse.cal.Cal.AstTransition");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			otherlv_5='end'
			{
				newLeafNode(otherlv_5, grammarAccess.getAstScheduleAccess().getEndKeyword_5_0());
			}
			    |
			otherlv_6='endschedule'
			{
				newLeafNode(otherlv_6, grammarAccess.getAstScheduleAccess().getEndscheduleKeyword_5_1());
			}
		)
	)
;

// Entry rule entryRuleAstTransition
entryRuleAstTransition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstTransitionRule()); }
	iv_ruleAstTransition=ruleAstTransition
	{ $current=$iv_ruleAstTransition.current; }
	EOF;

// Rule AstTransition
ruleAstTransition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstTransitionRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getAstTransitionAccess().getSourceAstStateCrossReference_0_0());
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getAstTransitionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstTransitionAccess().getTagsAstTagParserRuleCall_2_0());
				}
				lv_tags_2_0=ruleAstTag
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstTransitionRule());
					}
					add(
						$current,
						"tags",
						lv_tags_2_0,
						"streamblocks.eclipse.cal.Cal.AstTag");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getAstTransitionAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstTransitionAccess().getTagsAstTagParserRuleCall_3_1_0());
					}
					lv_tags_4_0=ruleAstTag
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstTransitionRule());
						}
						add(
							$current,
							"tags",
							lv_tags_4_0,
							"streamblocks.eclipse.cal.Cal.AstTag");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getAstTransitionAccess().getRightParenthesisKeyword_4());
		}
		otherlv_6='-->'
		{
			newLeafNode(otherlv_6, grammarAccess.getAstTransitionAccess().getHyphenMinusHyphenMinusGreaterThanSignKeyword_5());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstTransitionRule());
					}
				}
				otherlv_7=RULE_ID
				{
					newLeafNode(otherlv_7, grammarAccess.getAstTransitionAccess().getTargetAstStateCrossReference_6_0());
				}
			)
		)
		otherlv_8=';'
		{
			newLeafNode(otherlv_8, grammarAccess.getAstTransitionAccess().getSemicolonKeyword_7());
		}
	)
;

// Entry rule entryRuleAstScheduleRegExp
entryRuleAstScheduleRegExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstScheduleRegExpRule()); }
	iv_ruleAstScheduleRegExp=ruleAstScheduleRegExp
	{ $current=$iv_ruleAstScheduleRegExp.current; }
	EOF;

// Rule AstScheduleRegExp
ruleAstScheduleRegExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='schedule'
		{
			newLeafNode(otherlv_0, grammarAccess.getAstScheduleRegExpAccess().getScheduleKeyword_0());
		}
		otherlv_1='regexp'
		{
			newLeafNode(otherlv_1, grammarAccess.getAstScheduleRegExpAccess().getRegexpKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstScheduleRegExpAccess().getExpRegExpParserRuleCall_2_0());
				}
				lv_exp_2_0=ruleRegExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstScheduleRegExpRule());
					}
					set(
						$current,
						"exp",
						lv_exp_2_0,
						"streamblocks.eclipse.cal.Cal.RegExp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='end'
		{
			newLeafNode(otherlv_3, grammarAccess.getAstScheduleRegExpAccess().getEndKeyword_3());
		}
	)
;

// Entry rule entryRuleRegExp
entryRuleRegExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRegExpRule()); }
	iv_ruleRegExp=ruleRegExp
	{ $current=$iv_ruleRegExp.current; }
	EOF;

// Rule RegExp
ruleRegExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRegExpAccess().getRegExpConcatenationParserRuleCall_0());
		}
		this_RegExpConcatenation_0=ruleRegExpConcatenation
		{
			$current = $this_RegExpConcatenation_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getRegExpAccess().getRegExpBinaryLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_operator_2_0='|'
					{
						newLeafNode(lv_operator_2_0, grammarAccess.getRegExpAccess().getOperatorVerticalLineKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRegExpRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_2_0, "|");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRegExpAccess().getRightRegExpConcatenationParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleRegExpConcatenation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRegExpRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"streamblocks.eclipse.cal.Cal.RegExpConcatenation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleRegExpConcatenation
entryRuleRegExpConcatenation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRegExpConcatenationRule()); }
	iv_ruleRegExpConcatenation=ruleRegExpConcatenation
	{ $current=$iv_ruleRegExpConcatenation.current; }
	EOF;

// Rule RegExpConcatenation
ruleRegExpConcatenation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRegExpConcatenationAccess().getRegExpPostfixParserRuleCall_0());
		}
		this_RegExpPostfix_0=ruleRegExpPostfix
		{
			$current = $this_RegExpPostfix_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getRegExpConcatenationAccess().getRegExpBinaryLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRegExpConcatenationAccess().getRightRegExpPostfixParserRuleCall_1_1_0());
					}
					lv_right_2_0=ruleRegExpPostfix
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRegExpConcatenationRule());
						}
						set(
							$current,
							"right",
							lv_right_2_0,
							"streamblocks.eclipse.cal.Cal.RegExpPostfix");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleRegExpPostfix
entryRuleRegExpPostfix returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRegExpPostfixRule()); }
	iv_ruleRegExpPostfix=ruleRegExpPostfix
	{ $current=$iv_ruleRegExpPostfix.current; }
	EOF;

// Rule RegExpPostfix
ruleRegExpPostfix returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRegExpPostfixAccess().getRegExpGroupingParserRuleCall_0());
		}
		this_RegExpGrouping_0=ruleRegExpGrouping
		{
			$current = $this_RegExpGrouping_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getRegExpPostfixAccess().getRegExpUnaryChildAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_unaryOperator_2_1='*'
						{
							newLeafNode(lv_unaryOperator_2_1, grammarAccess.getRegExpPostfixAccess().getUnaryOperatorAsteriskKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getRegExpPostfixRule());
							}
							setWithLastConsumed($current, "unaryOperator", lv_unaryOperator_2_1, null);
						}
						    |
						lv_unaryOperator_2_2='?'
						{
							newLeafNode(lv_unaryOperator_2_2, grammarAccess.getRegExpPostfixAccess().getUnaryOperatorQuestionMarkKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getRegExpPostfixRule());
							}
							setWithLastConsumed($current, "unaryOperator", lv_unaryOperator_2_2, null);
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleRegExpGrouping
entryRuleRegExpGrouping returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRegExpGroupingRule()); }
	iv_ruleRegExpGrouping=ruleRegExpGrouping
	{ $current=$iv_ruleRegExpGrouping.current; }
	EOF;

// Rule RegExpGrouping
ruleRegExpGrouping returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRegExpGroupingAccess().getRegExpTerminalParserRuleCall_0());
		}
		this_RegExpTerminal_0=ruleRegExpTerminal
		{
			$current = $this_RegExpTerminal_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getRegExpGroupingAccess().getLeftParenthesisKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getRegExpGroupingAccess().getRegExpParserRuleCall_1_1());
			}
			this_RegExp_2=ruleRegExp
			{
				$current = $this_RegExp_2.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getRegExpGroupingAccess().getRightParenthesisKeyword_1_2());
			}
		)
	)
;

// Entry rule entryRuleRegExpTerminal
entryRuleRegExpTerminal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRegExpTerminalRule()); }
	iv_ruleRegExpTerminal=ruleRegExpTerminal
	{ $current=$iv_ruleRegExpTerminal.current; }
	EOF;

// Rule RegExpTerminal
ruleRegExpTerminal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRegExpTerminalAccess().getRegExpTagAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRegExpTerminalAccess().getTagAstTagParserRuleCall_1_0());
				}
				lv_tag_1_0=ruleAstTag
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRegExpTerminalRule());
					}
					set(
						$current,
						"tag",
						lv_tag_1_0,
						"streamblocks.eclipse.cal.Cal.AstTag");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAstAction
entryRuleAstAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstActionRule()); }
	iv_ruleAstAction=ruleAstAction
	{ $current=$iv_ruleAstAction.current; }
	EOF;

// Rule AstAction
ruleAstAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAstActionAccess().getAstActionAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAstActionAccess().getAnnotationsAstAnnotationParserRuleCall_1_0());
				}
				lv_annotations_1_0=ruleAstAnnotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstActionRule());
					}
					add(
						$current,
						"annotations",
						lv_annotations_1_0,
						"streamblocks.eclipse.cal.Cal.AstAnnotation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAstActionAccess().getTagAstTagParserRuleCall_2_0_0());
					}
					lv_tag_2_0=ruleAstTag
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstActionRule());
						}
						set(
							$current,
							"tag",
							lv_tag_2_0,
							"streamblocks.eclipse.cal.Cal.AstTag");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=':'
			{
				newLeafNode(otherlv_3, grammarAccess.getAstActionAccess().getColonKeyword_2_1());
			}
		)?
		otherlv_4='action'
		{
			newLeafNode(otherlv_4, grammarAccess.getAstActionAccess().getActionKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAstActionAccess().getInputsAstInputPatternParserRuleCall_4_0_0());
					}
					lv_inputs_5_0=ruleAstInputPattern
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstActionRule());
						}
						add(
							$current,
							"inputs",
							lv_inputs_5_0,
							"streamblocks.eclipse.cal.Cal.AstInputPattern");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getAstActionAccess().getCommaKeyword_4_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstActionAccess().getInputsAstInputPatternParserRuleCall_4_1_1_0());
						}
						lv_inputs_7_0=ruleAstInputPattern
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstActionRule());
							}
							add(
								$current,
								"inputs",
								lv_inputs_7_0,
								"streamblocks.eclipse.cal.Cal.AstInputPattern");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_8='==>'
		{
			newLeafNode(otherlv_8, grammarAccess.getAstActionAccess().getEqualsSignEqualsSignGreaterThanSignKeyword_5());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAstActionAccess().getOutputsAstOutputExpressionParserRuleCall_6_0_0());
					}
					lv_outputs_9_0=ruleAstOutputExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstActionRule());
						}
						add(
							$current,
							"outputs",
							lv_outputs_9_0,
							"streamblocks.eclipse.cal.Cal.AstOutputExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_10=','
				{
					newLeafNode(otherlv_10, grammarAccess.getAstActionAccess().getCommaKeyword_6_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstActionAccess().getOutputsAstOutputExpressionParserRuleCall_6_1_1_0());
						}
						lv_outputs_11_0=ruleAstOutputExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstActionRule());
							}
							add(
								$current,
								"outputs",
								lv_outputs_11_0,
								"streamblocks.eclipse.cal.Cal.AstOutputExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_12='guard'
			{
				newLeafNode(otherlv_12, grammarAccess.getAstActionAccess().getGuardKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstActionAccess().getGuardsAstExpressionParserRuleCall_7_1_0());
					}
					lv_guards_13_0=ruleAstExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstActionRule());
						}
						add(
							$current,
							"guards",
							lv_guards_13_0,
							"streamblocks.eclipse.cal.Cal.AstExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_14=','
				{
					newLeafNode(otherlv_14, grammarAccess.getAstActionAccess().getCommaKeyword_7_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstActionAccess().getGuardsAstExpressionParserRuleCall_7_2_1_0());
						}
						lv_guards_15_0=ruleAstExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstActionRule());
							}
							add(
								$current,
								"guards",
								lv_guards_15_0,
								"streamblocks.eclipse.cal.Cal.AstExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_16='var'
			{
				newLeafNode(otherlv_16, grammarAccess.getAstActionAccess().getVarKeyword_8_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstActionAccess().getVariablesAstValuedVariableDeclarationParserRuleCall_8_1_0());
					}
					lv_variables_17_0=ruleAstValuedVariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstActionRule());
						}
						add(
							$current,
							"variables",
							lv_variables_17_0,
							"streamblocks.eclipse.cal.Cal.AstValuedVariableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_18=','
				{
					newLeafNode(otherlv_18, grammarAccess.getAstActionAccess().getCommaKeyword_8_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstActionAccess().getVariablesAstValuedVariableDeclarationParserRuleCall_8_2_1_0());
						}
						lv_variables_19_0=ruleAstValuedVariableDeclaration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstActionRule());
							}
							add(
								$current,
								"variables",
								lv_variables_19_0,
								"streamblocks.eclipse.cal.Cal.AstValuedVariableDeclaration");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_20='do'
			{
				newLeafNode(otherlv_20, grammarAccess.getAstActionAccess().getDoKeyword_9_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstActionAccess().getStatementsAstStatementParserRuleCall_9_1_0());
					}
					lv_statements_21_0=ruleAstStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstActionRule());
						}
						add(
							$current,
							"statements",
							lv_statements_21_0,
							"streamblocks.eclipse.cal.Cal.AstStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		otherlv_22='end'
		{
			newLeafNode(otherlv_22, grammarAccess.getAstActionAccess().getEndKeyword_10());
		}
	)
;

// Entry rule entryRuleAstInitialize
entryRuleAstInitialize returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstInitializeRule()); }
	iv_ruleAstInitialize=ruleAstInitialize
	{ $current=$iv_ruleAstInitialize.current; }
	EOF;

// Rule AstInitialize
ruleAstInitialize returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAstInitializeAccess().getAstInitializeAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAstInitializeAccess().getAnnotationsAstAnnotationParserRuleCall_1_0());
				}
				lv_annotations_1_0=ruleAstAnnotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstInitializeRule());
					}
					add(
						$current,
						"annotations",
						lv_annotations_1_0,
						"streamblocks.eclipse.cal.Cal.AstAnnotation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAstInitializeAccess().getTagAstTagParserRuleCall_2_0_0());
					}
					lv_tag_2_0=ruleAstTag
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstInitializeRule());
						}
						set(
							$current,
							"tag",
							lv_tag_2_0,
							"streamblocks.eclipse.cal.Cal.AstTag");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=':'
			{
				newLeafNode(otherlv_3, grammarAccess.getAstInitializeAccess().getColonKeyword_2_1());
			}
		)?
		otherlv_4='initialize'
		{
			newLeafNode(otherlv_4, grammarAccess.getAstInitializeAccess().getInitializeKeyword_3());
		}
		otherlv_5='==>'
		{
			newLeafNode(otherlv_5, grammarAccess.getAstInitializeAccess().getEqualsSignEqualsSignGreaterThanSignKeyword_4());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAstInitializeAccess().getOutputsAstOutputExpressionParserRuleCall_5_0_0());
					}
					lv_outputs_6_0=ruleAstOutputExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstInitializeRule());
						}
						add(
							$current,
							"outputs",
							lv_outputs_6_0,
							"streamblocks.eclipse.cal.Cal.AstOutputExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_7=','
				{
					newLeafNode(otherlv_7, grammarAccess.getAstInitializeAccess().getCommaKeyword_5_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstInitializeAccess().getOutputsAstOutputExpressionParserRuleCall_5_1_1_0());
						}
						lv_outputs_8_0=ruleAstOutputExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstInitializeRule());
							}
							add(
								$current,
								"outputs",
								lv_outputs_8_0,
								"streamblocks.eclipse.cal.Cal.AstOutputExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_9='guard'
			{
				newLeafNode(otherlv_9, grammarAccess.getAstInitializeAccess().getGuardKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstInitializeAccess().getGuardsAstExpressionParserRuleCall_6_1_0());
					}
					lv_guards_10_0=ruleAstExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstInitializeRule());
						}
						add(
							$current,
							"guards",
							lv_guards_10_0,
							"streamblocks.eclipse.cal.Cal.AstExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_11=','
				{
					newLeafNode(otherlv_11, grammarAccess.getAstInitializeAccess().getCommaKeyword_6_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstInitializeAccess().getGuardsAstExpressionParserRuleCall_6_2_1_0());
						}
						lv_guards_12_0=ruleAstExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstInitializeRule());
							}
							add(
								$current,
								"guards",
								lv_guards_12_0,
								"streamblocks.eclipse.cal.Cal.AstExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_13='var'
			{
				newLeafNode(otherlv_13, grammarAccess.getAstInitializeAccess().getVarKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstInitializeAccess().getVariablesAstValuedVariableDeclarationParserRuleCall_7_1_0());
					}
					lv_variables_14_0=ruleAstValuedVariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstInitializeRule());
						}
						add(
							$current,
							"variables",
							lv_variables_14_0,
							"streamblocks.eclipse.cal.Cal.AstValuedVariableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_15=','
				{
					newLeafNode(otherlv_15, grammarAccess.getAstInitializeAccess().getCommaKeyword_7_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstInitializeAccess().getVariablesAstValuedVariableDeclarationParserRuleCall_7_2_1_0());
						}
						lv_variables_16_0=ruleAstValuedVariableDeclaration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstInitializeRule());
							}
							add(
								$current,
								"variables",
								lv_variables_16_0,
								"streamblocks.eclipse.cal.Cal.AstValuedVariableDeclaration");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_17='do'
			{
				newLeafNode(otherlv_17, grammarAccess.getAstInitializeAccess().getDoKeyword_8_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstInitializeAccess().getStatementsAstStatementParserRuleCall_8_1_0());
					}
					lv_statements_18_0=ruleAstStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstInitializeRule());
						}
						add(
							$current,
							"statements",
							lv_statements_18_0,
							"streamblocks.eclipse.cal.Cal.AstStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		otherlv_19='end'
		{
			newLeafNode(otherlv_19, grammarAccess.getAstInitializeAccess().getEndKeyword_9());
		}
	)
;

// Entry rule entryRuleAstInputPattern
entryRuleAstInputPattern returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstInputPatternRule()); }
	iv_ruleAstInputPattern=ruleAstInputPattern
	{ $current=$iv_ruleAstInputPattern.current; }
	EOF;

// Rule AstInputPattern
ruleAstInputPattern returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAstInputPatternRule());
						}
					}
					otherlv_0=RULE_ID
					{
						newLeafNode(otherlv_0, grammarAccess.getAstInputPatternAccess().getPortAstPortCrossReference_0_0_0());
					}
				)
			)
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getAstInputPatternAccess().getColonKeyword_0_1());
			}
		)?
		otherlv_2='['
		{
			newLeafNode(otherlv_2, grammarAccess.getAstInputPatternAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstInputPatternAccess().getTokensAstPatternParserRuleCall_2_0());
				}
				lv_tokens_3_0=ruleAstPattern
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstInputPatternRule());
					}
					add(
						$current,
						"tokens",
						lv_tokens_3_0,
						"streamblocks.eclipse.cal.Cal.AstPattern");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getAstInputPatternAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstInputPatternAccess().getTokensAstPatternParserRuleCall_3_1_0());
					}
					lv_tokens_5_0=ruleAstPattern
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstInputPatternRule());
						}
						add(
							$current,
							"tokens",
							lv_tokens_5_0,
							"streamblocks.eclipse.cal.Cal.AstPattern");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6=']'
		{
			newLeafNode(otherlv_6, grammarAccess.getAstInputPatternAccess().getRightSquareBracketKeyword_4());
		}
		(
			otherlv_7='repeat'
			{
				newLeafNode(otherlv_7, grammarAccess.getAstInputPatternAccess().getRepeatKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstInputPatternAccess().getRepeatAstExpressionParserRuleCall_5_1_0());
					}
					lv_repeat_8_0=ruleAstExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstInputPatternRule());
						}
						set(
							$current,
							"repeat",
							lv_repeat_8_0,
							"streamblocks.eclipse.cal.Cal.AstExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleAstToken
entryRuleAstToken returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstTokenRule()); }
	iv_ruleAstToken=ruleAstToken
	{ $current=$iv_ruleAstToken.current; }
	EOF;

// Rule AstToken
ruleAstToken returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getAstTokenAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getAstTokenRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"streamblocks.eclipse.cal.Cal.ID");
			}
		)
	)
;

// Entry rule entryRuleAstOutputExpression
entryRuleAstOutputExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstOutputExpressionRule()); }
	iv_ruleAstOutputExpression=ruleAstOutputExpression
	{ $current=$iv_ruleAstOutputExpression.current; }
	EOF;

// Rule AstOutputExpression
ruleAstOutputExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAstOutputExpressionRule());
						}
					}
					otherlv_0=RULE_ID
					{
						newLeafNode(otherlv_0, grammarAccess.getAstOutputExpressionAccess().getPortAstPortCrossReference_0_0_0());
					}
				)
			)
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getAstOutputExpressionAccess().getColonKeyword_0_1());
			}
		)?
		otherlv_2='['
		{
			newLeafNode(otherlv_2, grammarAccess.getAstOutputExpressionAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstOutputExpressionAccess().getValuesAstExpressionParserRuleCall_2_0());
				}
				lv_values_3_0=ruleAstExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstOutputExpressionRule());
					}
					add(
						$current,
						"values",
						lv_values_3_0,
						"streamblocks.eclipse.cal.Cal.AstExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getAstOutputExpressionAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstOutputExpressionAccess().getValuesAstExpressionParserRuleCall_3_1_0());
					}
					lv_values_5_0=ruleAstExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstOutputExpressionRule());
						}
						add(
							$current,
							"values",
							lv_values_5_0,
							"streamblocks.eclipse.cal.Cal.AstExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6=']'
		{
			newLeafNode(otherlv_6, grammarAccess.getAstOutputExpressionAccess().getRightSquareBracketKeyword_4());
		}
		(
			otherlv_7='repeat'
			{
				newLeafNode(otherlv_7, grammarAccess.getAstOutputExpressionAccess().getRepeatKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstOutputExpressionAccess().getRepeatAstExpressionParserRuleCall_5_1_0());
					}
					lv_repeat_8_0=ruleAstExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstOutputExpressionRule());
						}
						set(
							$current,
							"repeat",
							lv_repeat_8_0,
							"streamblocks.eclipse.cal.Cal.AstExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleAstStatementAssign
entryRuleAstStatementAssign returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstStatementAssignRule()); }
	iv_ruleAstStatementAssign=ruleAstStatementAssign
	{ $current=$iv_ruleAstStatementAssign.current; }
	EOF;

// Rule AstStatementAssign
ruleAstStatementAssign returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAstStatementAssignAccess().getLvalueAstLValueParserRuleCall_0_0());
				}
				lv_lvalue_0_0=ruleAstLValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstStatementAssignRule());
					}
					set(
						$current,
						"lvalue",
						lv_lvalue_0_0,
						"streamblocks.eclipse.cal.Cal.AstLValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':='
		{
			newLeafNode(otherlv_1, grammarAccess.getAstStatementAssignAccess().getColonEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstStatementAssignAccess().getValueAstExpressionParserRuleCall_2_0());
				}
				lv_value_2_0=ruleAstExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstStatementAssignRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"streamblocks.eclipse.cal.Cal.AstExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getAstStatementAssignAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleAstStatementCall
entryRuleAstStatementCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstStatementCallRule()); }
	iv_ruleAstStatementCall=ruleAstStatementCall
	{ $current=$iv_ruleAstStatementCall.current; }
	EOF;

// Rule AstStatementCall
ruleAstStatementCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAstStatementCallAccess().getAnnotationsAstAnnotationParserRuleCall_0_0());
				}
				lv_annotations_0_0=ruleAstAnnotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstStatementCallRule());
					}
					add(
						$current,
						"annotations",
						lv_annotations_0_0,
						"streamblocks.eclipse.cal.Cal.AstAnnotation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstStatementCallRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getAstStatementCallAccess().getProcedureAstProcedureCrossReference_1_0());
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getAstStatementCallAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAstStatementCallAccess().getParametersAstExpressionParserRuleCall_3_0_0());
					}
					lv_parameters_3_0=ruleAstExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstStatementCallRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_3_0,
							"streamblocks.eclipse.cal.Cal.AstExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getAstStatementCallAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstStatementCallAccess().getParametersAstExpressionParserRuleCall_3_1_1_0());
						}
						lv_parameters_5_0=ruleAstExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstStatementCallRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_5_0,
								"streamblocks.eclipse.cal.Cal.AstExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getAstStatementCallAccess().getRightParenthesisKeyword_4());
		}
		otherlv_7=';'
		{
			newLeafNode(otherlv_7, grammarAccess.getAstStatementCallAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleAstStatementForeach
entryRuleAstStatementForeach returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstStatementForeachRule()); }
	iv_ruleAstStatementForeach=ruleAstStatementForeach
	{ $current=$iv_ruleAstStatementForeach.current; }
	EOF;

// Rule AstStatementForeach
ruleAstStatementForeach returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='foreach'
		{
			newLeafNode(otherlv_0, grammarAccess.getAstStatementForeachAccess().getForeachKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstStatementForeachAccess().getGeneratorsAstForeachGeneratorParserRuleCall_1_0());
				}
				lv_generators_1_0=ruleAstForeachGenerator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstStatementForeachRule());
					}
					add(
						$current,
						"generators",
						lv_generators_1_0,
						"streamblocks.eclipse.cal.Cal.AstForeachGenerator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getAstStatementForeachAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstStatementForeachAccess().getGeneratorsAstForeachGeneratorParserRuleCall_2_1_0());
					}
					lv_generators_3_0=ruleAstForeachGenerator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstStatementForeachRule());
						}
						add(
							$current,
							"generators",
							lv_generators_3_0,
							"streamblocks.eclipse.cal.Cal.AstForeachGenerator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_4='var'
			{
				newLeafNode(otherlv_4, grammarAccess.getAstStatementForeachAccess().getVarKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstStatementForeachAccess().getVariablesAstValuedVariableDeclarationParserRuleCall_3_1_0());
					}
					lv_variables_5_0=ruleAstValuedVariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstStatementForeachRule());
						}
						add(
							$current,
							"variables",
							lv_variables_5_0,
							"streamblocks.eclipse.cal.Cal.AstValuedVariableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getAstStatementForeachAccess().getCommaKeyword_3_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstStatementForeachAccess().getVariablesAstValuedVariableDeclarationParserRuleCall_3_2_1_0());
						}
						lv_variables_7_0=ruleAstValuedVariableDeclaration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstStatementForeachRule());
							}
							add(
								$current,
								"variables",
								lv_variables_7_0,
								"streamblocks.eclipse.cal.Cal.AstValuedVariableDeclaration");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_8='do'
		{
			newLeafNode(otherlv_8, grammarAccess.getAstStatementForeachAccess().getDoKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstStatementForeachAccess().getStatementsAstStatementParserRuleCall_5_0());
				}
				lv_statements_9_0=ruleAstStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstStatementForeachRule());
					}
					add(
						$current,
						"statements",
						lv_statements_9_0,
						"streamblocks.eclipse.cal.Cal.AstStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_10='end'
		{
			newLeafNode(otherlv_10, grammarAccess.getAstStatementForeachAccess().getEndKeyword_6());
		}
	)
;

// Entry rule entryRuleAstForeachGenerator
entryRuleAstForeachGenerator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstForeachGeneratorRule()); }
	iv_ruleAstForeachGenerator=ruleAstForeachGenerator
	{ $current=$iv_ruleAstForeachGenerator.current; }
	EOF;

// Rule AstForeachGenerator
ruleAstForeachGenerator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAstForeachGeneratorAccess().getVariableAstVariableDeclarationParserRuleCall_0_0());
				}
				lv_variable_0_0=ruleAstVariableDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstForeachGeneratorRule());
					}
					set(
						$current,
						"variable",
						lv_variable_0_0,
						"streamblocks.eclipse.cal.Cal.AstVariableDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='in'
		{
			newLeafNode(otherlv_1, grammarAccess.getAstForeachGeneratorAccess().getInKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstForeachGeneratorAccess().getExpressionAstExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleAstExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstForeachGeneratorRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"streamblocks.eclipse.cal.Cal.AstExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAstStatementBlock
entryRuleAstStatementBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstStatementBlockRule()); }
	iv_ruleAstStatementBlock=ruleAstStatementBlock
	{ $current=$iv_ruleAstStatementBlock.current; }
	EOF;

// Rule AstStatementBlock
ruleAstStatementBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAstStatementBlockAccess().getAstStatementBlockAction_0(),
					$current);
			}
		)
		otherlv_1='begin'
		{
			newLeafNode(otherlv_1, grammarAccess.getAstStatementBlockAccess().getBeginKeyword_1());
		}
		(
			otherlv_2='var'
			{
				newLeafNode(otherlv_2, grammarAccess.getAstStatementBlockAccess().getVarKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstStatementBlockAccess().getVariablesAstValuedVariableDeclarationParserRuleCall_2_1_0());
					}
					lv_variables_3_0=ruleAstValuedVariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstStatementBlockRule());
						}
						add(
							$current,
							"variables",
							lv_variables_3_0,
							"streamblocks.eclipse.cal.Cal.AstValuedVariableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getAstStatementBlockAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstStatementBlockAccess().getVariablesAstValuedVariableDeclarationParserRuleCall_2_2_1_0());
						}
						lv_variables_5_0=ruleAstValuedVariableDeclaration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstStatementBlockRule());
							}
							add(
								$current,
								"variables",
								lv_variables_5_0,
								"streamblocks.eclipse.cal.Cal.AstValuedVariableDeclaration");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_6='do'
			{
				newLeafNode(otherlv_6, grammarAccess.getAstStatementBlockAccess().getDoKeyword_2_3());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getAstStatementBlockAccess().getStatementsAstStatementParserRuleCall_3_0());
				}
				lv_statements_7_0=ruleAstStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstStatementBlockRule());
					}
					add(
						$current,
						"statements",
						lv_statements_7_0,
						"streamblocks.eclipse.cal.Cal.AstStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_8='end'
		{
			newLeafNode(otherlv_8, grammarAccess.getAstStatementBlockAccess().getEndKeyword_4());
		}
	)
;

// Entry rule entryRuleAstStatementIf
entryRuleAstStatementIf returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstStatementIfRule()); }
	iv_ruleAstStatementIf=ruleAstStatementIf
	{ $current=$iv_ruleAstStatementIf.current; }
	EOF;

// Rule AstStatementIf
ruleAstStatementIf returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getAstStatementIfAccess().getIfKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstStatementIfAccess().getConditionAstExpressionParserRuleCall_1_0());
				}
				lv_condition_1_0=ruleAstExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstStatementIfRule());
					}
					set(
						$current,
						"condition",
						lv_condition_1_0,
						"streamblocks.eclipse.cal.Cal.AstExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='then'
		{
			newLeafNode(otherlv_2, grammarAccess.getAstStatementIfAccess().getThenKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstStatementIfAccess().getThenAstStatementParserRuleCall_3_0());
				}
				lv_then_3_0=ruleAstStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstStatementIfRule());
					}
					add(
						$current,
						"then",
						lv_then_3_0,
						"streamblocks.eclipse.cal.Cal.AstStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getAstStatementIfAccess().getElsifsAstStatementElsifParserRuleCall_4_0());
				}
				lv_elsifs_4_0=ruleAstStatementElsif
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstStatementIfRule());
					}
					add(
						$current,
						"elsifs",
						lv_elsifs_4_0,
						"streamblocks.eclipse.cal.Cal.AstStatementElsif");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			otherlv_5='else'
			{
				newLeafNode(otherlv_5, grammarAccess.getAstStatementIfAccess().getElseKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstStatementIfAccess().getElseAstStatementParserRuleCall_5_1_0());
					}
					lv_else_6_0=ruleAstStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstStatementIfRule());
						}
						add(
							$current,
							"else",
							lv_else_6_0,
							"streamblocks.eclipse.cal.Cal.AstStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		otherlv_7='end'
		{
			newLeafNode(otherlv_7, grammarAccess.getAstStatementIfAccess().getEndKeyword_6());
		}
	)
;

// Entry rule entryRuleAstStatementElsif
entryRuleAstStatementElsif returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstStatementElsifRule()); }
	iv_ruleAstStatementElsif=ruleAstStatementElsif
	{ $current=$iv_ruleAstStatementElsif.current; }
	EOF;

// Rule AstStatementElsif
ruleAstStatementElsif returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='elsif'
		{
			newLeafNode(otherlv_0, grammarAccess.getAstStatementElsifAccess().getElsifKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstStatementElsifAccess().getConditionAstExpressionParserRuleCall_1_0());
				}
				lv_condition_1_0=ruleAstExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstStatementElsifRule());
					}
					set(
						$current,
						"condition",
						lv_condition_1_0,
						"streamblocks.eclipse.cal.Cal.AstExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='then'
		{
			newLeafNode(otherlv_2, grammarAccess.getAstStatementElsifAccess().getThenKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstStatementElsifAccess().getThenAstStatementParserRuleCall_3_0());
				}
				lv_then_3_0=ruleAstStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstStatementElsifRule());
					}
					add(
						$current,
						"then",
						lv_then_3_0,
						"streamblocks.eclipse.cal.Cal.AstStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleAstStatementWhile
entryRuleAstStatementWhile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstStatementWhileRule()); }
	iv_ruleAstStatementWhile=ruleAstStatementWhile
	{ $current=$iv_ruleAstStatementWhile.current; }
	EOF;

// Rule AstStatementWhile
ruleAstStatementWhile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='while'
		{
			newLeafNode(otherlv_0, grammarAccess.getAstStatementWhileAccess().getWhileKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstStatementWhileAccess().getConditionAstExpressionParserRuleCall_1_0());
				}
				lv_condition_1_0=ruleAstExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstStatementWhileRule());
					}
					set(
						$current,
						"condition",
						lv_condition_1_0,
						"streamblocks.eclipse.cal.Cal.AstExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='do'
		{
			newLeafNode(otherlv_2, grammarAccess.getAstStatementWhileAccess().getDoKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstStatementWhileAccess().getStatementsAstStatementParserRuleCall_3_0());
				}
				lv_statements_3_0=ruleAstStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstStatementWhileRule());
					}
					add(
						$current,
						"statements",
						lv_statements_3_0,
						"streamblocks.eclipse.cal.Cal.AstStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='end'
		{
			newLeafNode(otherlv_4, grammarAccess.getAstStatementWhileAccess().getEndKeyword_4());
		}
	)
;

// Entry rule entryRuleAstStatementRead
entryRuleAstStatementRead returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstStatementReadRule()); }
	iv_ruleAstStatementRead=ruleAstStatementRead
	{ $current=$iv_ruleAstStatementRead.current; }
	EOF;

// Rule AstStatementRead
ruleAstStatementRead returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstStatementReadRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getAstStatementReadAccess().getPortAstPortCrossReference_0_0());
				}
			)
		)
		otherlv_1='-->'
		{
			newLeafNode(otherlv_1, grammarAccess.getAstStatementReadAccess().getHyphenMinusHyphenMinusGreaterThanSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstStatementReadAccess().getLvaluesAstLValueParserRuleCall_2_0());
				}
				lv_lvalues_2_0=ruleAstLValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstStatementReadRule());
					}
					add(
						$current,
						"lvalues",
						lv_lvalues_2_0,
						"streamblocks.eclipse.cal.Cal.AstLValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getAstStatementReadAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstStatementReadAccess().getLvaluesAstLValueParserRuleCall_3_1_0());
					}
					lv_lvalues_4_0=ruleAstLValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstStatementReadRule());
						}
						add(
							$current,
							"lvalues",
							lv_lvalues_4_0,
							"streamblocks.eclipse.cal.Cal.AstLValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_5='repeat'
			{
				newLeafNode(otherlv_5, grammarAccess.getAstStatementReadAccess().getRepeatKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstStatementReadAccess().getRepeatAstExpressionParserRuleCall_4_1_0());
					}
					lv_repeat_6_0=ruleAstExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstStatementReadRule());
						}
						set(
							$current,
							"repeat",
							lv_repeat_6_0,
							"streamblocks.eclipse.cal.Cal.AstExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_7=';'
		{
			newLeafNode(otherlv_7, grammarAccess.getAstStatementReadAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleAstStatementWrite
entryRuleAstStatementWrite returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstStatementWriteRule()); }
	iv_ruleAstStatementWrite=ruleAstStatementWrite
	{ $current=$iv_ruleAstStatementWrite.current; }
	EOF;

// Rule AstStatementWrite
ruleAstStatementWrite returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstStatementWriteRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getAstStatementWriteAccess().getPortAstPortCrossReference_0_0());
				}
			)
		)
		(
			('<--')=>
			otherlv_1='<--'
			{
				newLeafNode(otherlv_1, grammarAccess.getAstStatementWriteAccess().getLessThanSignHyphenMinusHyphenMinusKeyword_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAstStatementWriteAccess().getValuesAstExpressionParserRuleCall_2_0());
				}
				lv_values_2_0=ruleAstExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstStatementWriteRule());
					}
					add(
						$current,
						"values",
						lv_values_2_0,
						"streamblocks.eclipse.cal.Cal.AstExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getAstStatementWriteAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstStatementWriteAccess().getValuesAstExpressionParserRuleCall_3_1_0());
					}
					lv_values_4_0=ruleAstExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstStatementWriteRule());
						}
						add(
							$current,
							"values",
							lv_values_4_0,
							"streamblocks.eclipse.cal.Cal.AstExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_5='repeat'
			{
				newLeafNode(otherlv_5, grammarAccess.getAstStatementWriteAccess().getRepeatKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstStatementWriteAccess().getRepeatAstExpressionParserRuleCall_4_1_0());
					}
					lv_repeat_6_0=ruleAstExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstStatementWriteRule());
						}
						set(
							$current,
							"repeat",
							lv_repeat_6_0,
							"streamblocks.eclipse.cal.Cal.AstExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_7=';'
		{
			newLeafNode(otherlv_7, grammarAccess.getAstStatementWriteAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleAstLValue
entryRuleAstLValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstLValueRule()); }
	iv_ruleAstLValue=ruleAstLValue
	{ $current=$iv_ruleAstLValue.current; }
	EOF;

// Rule AstLValue
ruleAstLValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstLValueRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getAstLValueAccess().getTargetAstVariableCrossReference_0_0());
				}
			)
		)
		(
			otherlv_1='['
			{
				newLeafNode(otherlv_1, grammarAccess.getAstLValueAccess().getLeftSquareBracketKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstLValueAccess().getIndexesAstExpressionParserRuleCall_1_1_0());
					}
					lv_indexes_2_0=ruleAstExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstLValueRule());
						}
						add(
							$current,
							"indexes",
							lv_indexes_2_0,
							"streamblocks.eclipse.cal.Cal.AstExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=']'
			{
				newLeafNode(otherlv_3, grammarAccess.getAstLValueAccess().getRightSquareBracketKeyword_1_2());
			}
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getAstLValueAccess().getMemberAstMemberAccessParserRuleCall_2_0());
				}
				lv_member_4_0=ruleAstMemberAccess
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstLValueRule());
					}
					add(
						$current,
						"member",
						lv_member_4_0,
						"streamblocks.eclipse.cal.Cal.AstMemberAccess");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleAstStatementCase
entryRuleAstStatementCase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstStatementCaseRule()); }
	iv_ruleAstStatementCase=ruleAstStatementCase
	{ $current=$iv_ruleAstStatementCase.current; }
	EOF;

// Rule AstStatementCase
ruleAstStatementCase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='case'
		{
			newLeafNode(otherlv_0, grammarAccess.getAstStatementCaseAccess().getCaseKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstStatementCaseAccess().getExpressionAstExpressionSymbolReferenceParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleAstExpressionSymbolReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstStatementCaseRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"streamblocks.eclipse.cal.Cal.AstExpressionSymbolReference");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='of'
		{
			newLeafNode(otherlv_2, grammarAccess.getAstStatementCaseAccess().getOfKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstStatementCaseAccess().getCasesAstStatementAlternativeParserRuleCall_3_0());
				}
				lv_cases_3_0=ruleAstStatementAlternative
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstStatementCaseRule());
					}
					add(
						$current,
						"cases",
						lv_cases_3_0,
						"streamblocks.eclipse.cal.Cal.AstStatementAlternative");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			otherlv_4='else'
			{
				newLeafNode(otherlv_4, grammarAccess.getAstStatementCaseAccess().getElseKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstStatementCaseAccess().getDefaultAstStatementParserRuleCall_4_1_0());
					}
					lv_default_5_0=ruleAstStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstStatementCaseRule());
						}
						set(
							$current,
							"default",
							lv_default_5_0,
							"streamblocks.eclipse.cal.Cal.AstStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6='end'
		{
			newLeafNode(otherlv_6, grammarAccess.getAstStatementCaseAccess().getEndKeyword_5());
		}
	)
;

// Entry rule entryRuleAstStatementAlternative
entryRuleAstStatementAlternative returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstStatementAlternativeRule()); }
	iv_ruleAstStatementAlternative=ruleAstStatementAlternative
	{ $current=$iv_ruleAstStatementAlternative.current; }
	EOF;

// Rule AstStatementAlternative
ruleAstStatementAlternative returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAstStatementAlternativeAccess().getPatternAstPatternParserRuleCall_0_0());
				}
				lv_pattern_0_0=ruleAstPattern
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstStatementAlternativeRule());
					}
					set(
						$current,
						"pattern",
						lv_pattern_0_0,
						"streamblocks.eclipse.cal.Cal.AstPattern");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='guard'
			{
				newLeafNode(otherlv_1, grammarAccess.getAstStatementAlternativeAccess().getGuardKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstStatementAlternativeAccess().getGuardsAstExpressionParserRuleCall_1_1_0());
					}
					lv_guards_2_0=ruleAstExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstStatementAlternativeRule());
						}
						add(
							$current,
							"guards",
							lv_guards_2_0,
							"streamblocks.eclipse.cal.Cal.AstExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getAstStatementAlternativeAccess().getCommaKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstStatementAlternativeAccess().getGuardsAstExpressionParserRuleCall_1_2_1_0());
						}
						lv_guards_4_0=ruleAstExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstStatementAlternativeRule());
							}
							add(
								$current,
								"guards",
								lv_guards_4_0,
								"streamblocks.eclipse.cal.Cal.AstExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5='do'
		{
			newLeafNode(otherlv_5, grammarAccess.getAstStatementAlternativeAccess().getDoKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstStatementAlternativeAccess().getStatementsAstStatementParserRuleCall_3_0());
				}
				lv_statements_6_0=ruleAstStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstStatementAlternativeRule());
					}
					add(
						$current,
						"statements",
						lv_statements_6_0,
						"streamblocks.eclipse.cal.Cal.AstStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7='end'
		{
			newLeafNode(otherlv_7, grammarAccess.getAstStatementAlternativeAccess().getEndKeyword_4());
		}
	)
;

// Entry rule entryRuleAstStatement
entryRuleAstStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstStatementRule()); }
	iv_ruleAstStatement=ruleAstStatement
	{ $current=$iv_ruleAstStatement.current; }
	EOF;

// Rule AstStatement
ruleAstStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAstStatementAccess().getAstStatementAssignParserRuleCall_0());
		}
		this_AstStatementAssign_0=ruleAstStatementAssign
		{
			$current = $this_AstStatementAssign_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAstStatementAccess().getAstStatementCallParserRuleCall_1());
		}
		this_AstStatementCall_1=ruleAstStatementCall
		{
			$current = $this_AstStatementCall_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAstStatementAccess().getAstStatementForeachParserRuleCall_2());
		}
		this_AstStatementForeach_2=ruleAstStatementForeach
		{
			$current = $this_AstStatementForeach_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAstStatementAccess().getAstStatementIfParserRuleCall_3());
		}
		this_AstStatementIf_3=ruleAstStatementIf
		{
			$current = $this_AstStatementIf_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAstStatementAccess().getAstStatementReadParserRuleCall_4());
		}
		this_AstStatementRead_4=ruleAstStatementRead
		{
			$current = $this_AstStatementRead_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAstStatementAccess().getAstStatementWriteParserRuleCall_5());
		}
		this_AstStatementWrite_5=ruleAstStatementWrite
		{
			$current = $this_AstStatementWrite_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAstStatementAccess().getAstStatementWhileParserRuleCall_6());
		}
		this_AstStatementWhile_6=ruleAstStatementWhile
		{
			$current = $this_AstStatementWhile_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAstStatementAccess().getAstStatementBlockParserRuleCall_7());
		}
		this_AstStatementBlock_7=ruleAstStatementBlock
		{
			$current = $this_AstStatementBlock_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAstStatementAccess().getAstStatementCaseParserRuleCall_8());
		}
		this_AstStatementCase_8=ruleAstStatementCase
		{
			$current = $this_AstStatementCase_8.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAstExpression
entryRuleAstExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstExpressionRule()); }
	iv_ruleAstExpression=ruleAstExpression
	{ $current=$iv_ruleAstExpression.current; }
	EOF;

// Rule AstExpression
ruleAstExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAstExpressionAccess().getAstExpressionAndParserRuleCall_0());
		}
		this_AstExpressionAnd_0=ruleAstExpressionAnd
		{
			$current = $this_AstExpressionAnd_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAstExpressionAccess().getAstExpressionBinaryLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1='||'
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getAstExpressionAccess().getOperatorVerticalLineVerticalLineKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAstExpressionRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2='or'
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getAstExpressionAccess().getOperatorOrKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAstExpressionRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
						    |
						lv_operator_2_3='..'
						{
							newLeafNode(lv_operator_2_3, grammarAccess.getAstExpressionAccess().getOperatorFullStopFullStopKeyword_1_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAstExpressionRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_3, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAstExpressionAccess().getRightAstExpressionAndParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAstExpressionAnd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"streamblocks.eclipse.cal.Cal.AstExpressionAnd");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAstExpressionAnd
entryRuleAstExpressionAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstExpressionAndRule()); }
	iv_ruleAstExpressionAnd=ruleAstExpressionAnd
	{ $current=$iv_ruleAstExpressionAnd.current; }
	EOF;

// Rule AstExpressionAnd
ruleAstExpressionAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAstExpressionAndAccess().getAstExpressionBitorParserRuleCall_0());
		}
		this_AstExpressionBitor_0=ruleAstExpressionBitor
		{
			$current = $this_AstExpressionBitor_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAstExpressionAndAccess().getAstExpressionBinaryLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1='&&'
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getAstExpressionAndAccess().getOperatorAmpersandAmpersandKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAstExpressionAndRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2='and'
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getAstExpressionAndAccess().getOperatorAndKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAstExpressionAndRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAstExpressionAndAccess().getRightAstExpressionBitorParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAstExpressionBitor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstExpressionAndRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"streamblocks.eclipse.cal.Cal.AstExpressionBitor");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAstExpressionBitor
entryRuleAstExpressionBitor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstExpressionBitorRule()); }
	iv_ruleAstExpressionBitor=ruleAstExpressionBitor
	{ $current=$iv_ruleAstExpressionBitor.current; }
	EOF;

// Rule AstExpressionBitor
ruleAstExpressionBitor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAstExpressionBitorAccess().getAstExpressionBitxorParserRuleCall_0());
		}
		this_AstExpressionBitxor_0=ruleAstExpressionBitxor
		{
			$current = $this_AstExpressionBitxor_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAstExpressionBitorAccess().getAstExpressionBinaryLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_operator_2_0='|'
					{
						newLeafNode(lv_operator_2_0, grammarAccess.getAstExpressionBitorAccess().getOperatorVerticalLineKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAstExpressionBitorRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_2_0, "|");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAstExpressionBitorAccess().getRightAstExpressionBitxorParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAstExpressionBitxor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstExpressionBitorRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"streamblocks.eclipse.cal.Cal.AstExpressionBitxor");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAstExpressionBitxor
entryRuleAstExpressionBitxor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstExpressionBitxorRule()); }
	iv_ruleAstExpressionBitxor=ruleAstExpressionBitxor
	{ $current=$iv_ruleAstExpressionBitxor.current; }
	EOF;

// Rule AstExpressionBitxor
ruleAstExpressionBitxor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAstExpressionBitxorAccess().getAstExpressionBitandParserRuleCall_0());
		}
		this_AstExpressionBitand_0=ruleAstExpressionBitand
		{
			$current = $this_AstExpressionBitand_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAstExpressionBitxorAccess().getAstExpressionBinaryLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_operator_2_0='^'
					{
						newLeafNode(lv_operator_2_0, grammarAccess.getAstExpressionBitxorAccess().getOperatorCircumflexAccentKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAstExpressionBitxorRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_2_0, "^");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAstExpressionBitxorAccess().getRightAstExpressionBitandParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAstExpressionBitand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstExpressionBitxorRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"streamblocks.eclipse.cal.Cal.AstExpressionBitand");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAstExpressionBitand
entryRuleAstExpressionBitand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstExpressionBitandRule()); }
	iv_ruleAstExpressionBitand=ruleAstExpressionBitand
	{ $current=$iv_ruleAstExpressionBitand.current; }
	EOF;

// Rule AstExpressionBitand
ruleAstExpressionBitand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAstExpressionBitandAccess().getAstExpressionEqParserRuleCall_0());
		}
		this_AstExpressionEq_0=ruleAstExpressionEq
		{
			$current = $this_AstExpressionEq_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAstExpressionBitandAccess().getAstExpressionBinaryLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_operator_2_0='&'
					{
						newLeafNode(lv_operator_2_0, grammarAccess.getAstExpressionBitandAccess().getOperatorAmpersandKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAstExpressionBitandRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_2_0, "&");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAstExpressionBitandAccess().getRightAstExpressionEqParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAstExpressionEq
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstExpressionBitandRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"streamblocks.eclipse.cal.Cal.AstExpressionEq");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAstExpressionEq
entryRuleAstExpressionEq returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstExpressionEqRule()); }
	iv_ruleAstExpressionEq=ruleAstExpressionEq
	{ $current=$iv_ruleAstExpressionEq.current; }
	EOF;

// Rule AstExpressionEq
ruleAstExpressionEq returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAstExpressionEqAccess().getAstExpressionRelationalParserRuleCall_0());
		}
		this_AstExpressionRelational_0=ruleAstExpressionRelational
		{
			$current = $this_AstExpressionRelational_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAstExpressionEqAccess().getAstExpressionBinaryLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1='='
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getAstExpressionEqAccess().getOperatorEqualsSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAstExpressionEqRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2='!='
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getAstExpressionEqAccess().getOperatorExclamationMarkEqualsSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAstExpressionEqRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAstExpressionEqAccess().getRightAstExpressionRelationalParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAstExpressionRelational
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstExpressionEqRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"streamblocks.eclipse.cal.Cal.AstExpressionRelational");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAstExpressionRelational
entryRuleAstExpressionRelational returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstExpressionRelationalRule()); }
	iv_ruleAstExpressionRelational=ruleAstExpressionRelational
	{ $current=$iv_ruleAstExpressionRelational.current; }
	EOF;

// Rule AstExpressionRelational
ruleAstExpressionRelational returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAstExpressionRelationalAccess().getAstExpressionShiftParserRuleCall_0());
		}
		this_AstExpressionShift_0=ruleAstExpressionShift
		{
			$current = $this_AstExpressionShift_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAstExpressionRelationalAccess().getAstExpressionBinaryLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1='<'
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getAstExpressionRelationalAccess().getOperatorLessThanSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAstExpressionRelationalRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2='<='
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getAstExpressionRelationalAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAstExpressionRelationalRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
						    |
						lv_operator_2_3='>'
						{
							newLeafNode(lv_operator_2_3, grammarAccess.getAstExpressionRelationalAccess().getOperatorGreaterThanSignKeyword_1_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAstExpressionRelationalRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_3, null);
						}
						    |
						lv_operator_2_4='>='
						{
							newLeafNode(lv_operator_2_4, grammarAccess.getAstExpressionRelationalAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAstExpressionRelationalRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_4, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAstExpressionRelationalAccess().getRightAstExpressionShiftParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAstExpressionShift
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstExpressionRelationalRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"streamblocks.eclipse.cal.Cal.AstExpressionShift");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAstExpressionShift
entryRuleAstExpressionShift returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstExpressionShiftRule()); }
	iv_ruleAstExpressionShift=ruleAstExpressionShift
	{ $current=$iv_ruleAstExpressionShift.current; }
	EOF;

// Rule AstExpressionShift
ruleAstExpressionShift returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAstExpressionShiftAccess().getAstExpressionAdditiveParserRuleCall_0());
		}
		this_AstExpressionAdditive_0=ruleAstExpressionAdditive
		{
			$current = $this_AstExpressionAdditive_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAstExpressionShiftAccess().getAstExpressionBinaryLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1='<<'
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getAstExpressionShiftAccess().getOperatorLessThanSignLessThanSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAstExpressionShiftRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2='>>'
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getAstExpressionShiftAccess().getOperatorGreaterThanSignGreaterThanSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAstExpressionShiftRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
						    |
						lv_operator_2_3='>>>'
						{
							newLeafNode(lv_operator_2_3, grammarAccess.getAstExpressionShiftAccess().getOperatorGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAstExpressionShiftRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_3, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAstExpressionShiftAccess().getRightAstExpressionAdditiveParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAstExpressionAdditive
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstExpressionShiftRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"streamblocks.eclipse.cal.Cal.AstExpressionAdditive");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAstExpressionAdditive
entryRuleAstExpressionAdditive returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstExpressionAdditiveRule()); }
	iv_ruleAstExpressionAdditive=ruleAstExpressionAdditive
	{ $current=$iv_ruleAstExpressionAdditive.current; }
	EOF;

// Rule AstExpressionAdditive
ruleAstExpressionAdditive returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAstExpressionAdditiveAccess().getAstExpressionMultiplicativeParserRuleCall_0());
		}
		this_AstExpressionMultiplicative_0=ruleAstExpressionMultiplicative
		{
			$current = $this_AstExpressionMultiplicative_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAstExpressionAdditiveAccess().getAstExpressionBinaryLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1='+'
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getAstExpressionAdditiveAccess().getOperatorPlusSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAstExpressionAdditiveRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2='-'
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getAstExpressionAdditiveAccess().getOperatorHyphenMinusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAstExpressionAdditiveRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAstExpressionAdditiveAccess().getRightAstExpressionMultiplicativeParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAstExpressionMultiplicative
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstExpressionAdditiveRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"streamblocks.eclipse.cal.Cal.AstExpressionMultiplicative");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAstExpressionMultiplicative
entryRuleAstExpressionMultiplicative returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstExpressionMultiplicativeRule()); }
	iv_ruleAstExpressionMultiplicative=ruleAstExpressionMultiplicative
	{ $current=$iv_ruleAstExpressionMultiplicative.current; }
	EOF;

// Rule AstExpressionMultiplicative
ruleAstExpressionMultiplicative returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAstExpressionMultiplicativeAccess().getAstExpressionExpParserRuleCall_0());
		}
		this_AstExpressionExp_0=ruleAstExpressionExp
		{
			$current = $this_AstExpressionExp_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAstExpressionMultiplicativeAccess().getAstExpressionBinaryLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1='*'
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getAstExpressionMultiplicativeAccess().getOperatorAsteriskKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAstExpressionMultiplicativeRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2='/'
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getAstExpressionMultiplicativeAccess().getOperatorSolidusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAstExpressionMultiplicativeRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
						    |
						lv_operator_2_3='div'
						{
							newLeafNode(lv_operator_2_3, grammarAccess.getAstExpressionMultiplicativeAccess().getOperatorDivKeyword_1_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAstExpressionMultiplicativeRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_3, null);
						}
						    |
						lv_operator_2_4='mod'
						{
							newLeafNode(lv_operator_2_4, grammarAccess.getAstExpressionMultiplicativeAccess().getOperatorModKeyword_1_1_0_3());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAstExpressionMultiplicativeRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_4, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAstExpressionMultiplicativeAccess().getRightAstExpressionExpParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAstExpressionExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstExpressionMultiplicativeRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"streamblocks.eclipse.cal.Cal.AstExpressionExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAstExpressionExp
entryRuleAstExpressionExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstExpressionExpRule()); }
	iv_ruleAstExpressionExp=ruleAstExpressionExp
	{ $current=$iv_ruleAstExpressionExp.current; }
	EOF;

// Rule AstExpressionExp
ruleAstExpressionExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAstExpressionExpAccess().getAstExpressionUnaryParserRuleCall_0());
		}
		this_AstExpressionUnary_0=ruleAstExpressionUnary
		{
			$current = $this_AstExpressionUnary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAstExpressionExpAccess().getAstExpressionBinaryLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_operator_2_0='**'
					{
						newLeafNode(lv_operator_2_0, grammarAccess.getAstExpressionExpAccess().getOperatorAsteriskAsteriskKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAstExpressionExpRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_2_0, "**");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAstExpressionExpAccess().getRightAstExpressionUnaryParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAstExpressionUnary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstExpressionExpRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"streamblocks.eclipse.cal.Cal.AstExpressionUnary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAstExpressionUnary
entryRuleAstExpressionUnary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstExpressionUnaryRule()); }
	iv_ruleAstExpressionUnary=ruleAstExpressionUnary
	{ $current=$iv_ruleAstExpressionUnary.current; }
	EOF;

// Rule AstExpressionUnary
ruleAstExpressionUnary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAstExpressionUnaryAccess().getAstExpressionUnaryAction_0_0(),
						$current);
				}
			)
			(
				(
					(
						lv_unaryOperator_1_1='~'
						{
							newLeafNode(lv_unaryOperator_1_1, grammarAccess.getAstExpressionUnaryAccess().getUnaryOperatorTildeKeyword_0_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAstExpressionUnaryRule());
							}
							setWithLastConsumed($current, "unaryOperator", lv_unaryOperator_1_1, null);
						}
						    |
						lv_unaryOperator_1_2='-'
						{
							newLeafNode(lv_unaryOperator_1_2, grammarAccess.getAstExpressionUnaryAccess().getUnaryOperatorHyphenMinusKeyword_0_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAstExpressionUnaryRule());
							}
							setWithLastConsumed($current, "unaryOperator", lv_unaryOperator_1_2, null);
						}
						    |
						lv_unaryOperator_1_3='not'
						{
							newLeafNode(lv_unaryOperator_1_3, grammarAccess.getAstExpressionUnaryAccess().getUnaryOperatorNotKeyword_0_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAstExpressionUnaryRule());
							}
							setWithLastConsumed($current, "unaryOperator", lv_unaryOperator_1_3, null);
						}
						    |
						lv_unaryOperator_1_4='#'
						{
							newLeafNode(lv_unaryOperator_1_4, grammarAccess.getAstExpressionUnaryAccess().getUnaryOperatorNumberSignKeyword_0_1_0_3());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAstExpressionUnaryRule());
							}
							setWithLastConsumed($current, "unaryOperator", lv_unaryOperator_1_4, null);
						}
						    |
						lv_unaryOperator_1_5='old'
						{
							newLeafNode(lv_unaryOperator_1_5, grammarAccess.getAstExpressionUnaryAccess().getUnaryOperatorOldKeyword_0_1_0_4());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAstExpressionUnaryRule());
							}
							setWithLastConsumed($current, "unaryOperator", lv_unaryOperator_1_5, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAstExpressionUnaryAccess().getExpressionAstExpressionPostfixParserRuleCall_0_2_0());
					}
					lv_expression_2_0=ruleAstExpressionPostfix
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstExpressionUnaryRule());
						}
						set(
							$current,
							"expression",
							lv_expression_2_0,
							"streamblocks.eclipse.cal.Cal.AstExpressionPostfix");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getAstExpressionUnaryAccess().getAstExpressionAssertionParserRuleCall_1());
		}
		this_AstExpressionAssertion_3=ruleAstExpressionAssertion
		{
			$current = $this_AstExpressionAssertion_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAstExpressionAssertion
entryRuleAstExpressionAssertion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstExpressionAssertionRule()); }
	iv_ruleAstExpressionAssertion=ruleAstExpressionAssertion
	{ $current=$iv_ruleAstExpressionAssertion.current; }
	EOF;

// Rule AstExpressionAssertion
ruleAstExpressionAssertion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAstExpressionAssertionAccess().getAstExpressionPostfixParserRuleCall_0());
		}
		this_AstExpressionPostfix_0=ruleAstExpressionPostfix
		{
			$current = $this_AstExpressionPostfix_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					'as'
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getAstExpressionAssertionAccess().getAstExpressionAssertionTargetAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='as'
					{
						newLeafNode(otherlv_2, grammarAccess.getAstExpressionAssertionAccess().getAsKeyword_1_0_0_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAstExpressionAssertionAccess().getTypeAstTypeParserRuleCall_1_1_0());
					}
					lv_type_3_0=ruleAstType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstExpressionAssertionRule());
						}
						set(
							$current,
							"type",
							lv_type_3_0,
							"streamblocks.eclipse.cal.Cal.AstType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAstExpressionPostfix
entryRuleAstExpressionPostfix returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstExpressionPostfixRule()); }
	iv_ruleAstExpressionPostfix=ruleAstExpressionPostfix
	{ $current=$iv_ruleAstExpressionPostfix.current; }
	EOF;

// Rule AstExpressionPostfix
ruleAstExpressionPostfix returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAstExpressionPostfixAccess().getAstExpressionListParserRuleCall_0());
		}
		this_AstExpressionList_0=ruleAstExpressionList
		{
			$current = $this_AstExpressionList_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAstExpressionPostfixAccess().getAstExpressionSymbolReferenceParserRuleCall_1());
		}
		this_AstExpressionSymbolReference_1=ruleAstExpressionSymbolReference
		{
			$current = $this_AstExpressionSymbolReference_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAstExpressionPostfixAccess().getAstExpressionIfParserRuleCall_2());
		}
		this_AstExpressionIf_2=ruleAstExpressionIf
		{
			$current = $this_AstExpressionIf_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAstExpressionPostfixAccess().getAstExpressionLambdaParserRuleCall_3());
		}
		this_AstExpressionLambda_3=ruleAstExpressionLambda
		{
			$current = $this_AstExpressionLambda_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAstExpressionPostfixAccess().getAstExpressionProcParserRuleCall_4());
		}
		this_AstExpressionProc_4=ruleAstExpressionProc
		{
			$current = $this_AstExpressionProc_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAstExpressionPostfixAccess().getAstExpressionLetParserRuleCall_5());
		}
		this_AstExpressionLet_5=ruleAstExpressionLet
		{
			$current = $this_AstExpressionLet_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAstExpressionPostfixAccess().getAstExpressionMapParserRuleCall_6());
		}
		this_AstExpressionMap_6=ruleAstExpressionMap
		{
			$current = $this_AstExpressionMap_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAstExpressionPostfixAccess().getAstExpressionSetParserRuleCall_7());
		}
		this_AstExpressionSet_7=ruleAstExpressionSet
		{
			$current = $this_AstExpressionSet_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAstExpressionPostfixAccess().getAstExpressionCaseParserRuleCall_8());
		}
		this_AstExpressionCase_8=ruleAstExpressionCase
		{
			$current = $this_AstExpressionCase_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAstExpressionPostfixAccess().getAstExpressionLiteralParserRuleCall_9());
		}
		this_AstExpressionLiteral_9=ruleAstExpressionLiteral
		{
			$current = $this_AstExpressionLiteral_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_10='('
			{
				newLeafNode(otherlv_10, grammarAccess.getAstExpressionPostfixAccess().getLeftParenthesisKeyword_10_0());
			}
			{
				newCompositeNode(grammarAccess.getAstExpressionPostfixAccess().getAstExpressionParserRuleCall_10_1());
			}
			this_AstExpression_11=ruleAstExpression
			{
				$current = $this_AstExpression_11.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_12=')'
			{
				newLeafNode(otherlv_12, grammarAccess.getAstExpressionPostfixAccess().getRightParenthesisKeyword_10_2());
			}
		)
	)
;

// Entry rule entryRuleAstExpressionSymbolReference
entryRuleAstExpressionSymbolReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstExpressionSymbolReferenceRule()); }
	iv_ruleAstExpressionSymbolReference=ruleAstExpressionSymbolReference
	{ $current=$iv_ruleAstExpressionSymbolReference.current; }
	EOF;

// Rule AstExpressionSymbolReference
ruleAstExpressionSymbolReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAstExpressionSymbolReferenceAccess().getAnnotationsAstAnnotationParserRuleCall_0_0());
				}
				lv_annotations_0_0=ruleAstAnnotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstExpressionSymbolReferenceRule());
					}
					add(
						$current,
						"annotations",
						lv_annotations_0_0,
						"streamblocks.eclipse.cal.Cal.AstAnnotation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstExpressionSymbolReferenceRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getAstExpressionSymbolReferenceAccess().getSymbolAstVariableCrossReference_1_0());
				}
			)
		)
		(
			otherlv_2='['
			{
				newLeafNode(otherlv_2, grammarAccess.getAstExpressionSymbolReferenceAccess().getLeftSquareBracketKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstExpressionSymbolReferenceAccess().getIndexesAstExpressionParserRuleCall_2_1_0());
					}
					lv_indexes_3_0=ruleAstExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstExpressionSymbolReferenceRule());
						}
						add(
							$current,
							"indexes",
							lv_indexes_3_0,
							"streamblocks.eclipse.cal.Cal.AstExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=']'
			{
				newLeafNode(otherlv_4, grammarAccess.getAstExpressionSymbolReferenceAccess().getRightSquareBracketKeyword_2_2());
			}
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getAstExpressionSymbolReferenceAccess().getMemberAstMemberAccessParserRuleCall_3_0());
				}
				lv_member_5_0=ruleAstMemberAccess
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstExpressionSymbolReferenceRule());
					}
					add(
						$current,
						"member",
						lv_member_5_0,
						"streamblocks.eclipse.cal.Cal.AstMemberAccess");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			otherlv_6='::'
			{
				newLeafNode(otherlv_6, grammarAccess.getAstExpressionSymbolReferenceAccess().getColonColonKeyword_4_0());
			}
			(
				(
					lv_ctor_7_0=RULE_ID
					{
						newLeafNode(lv_ctor_7_0, grammarAccess.getAstExpressionSymbolReferenceAccess().getCtorIDTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAstExpressionSymbolReferenceRule());
						}
						setWithLastConsumed(
							$current,
							"ctor",
							lv_ctor_7_0,
							"streamblocks.eclipse.cal.Cal.ID");
					}
				)
			)
		)?
		(
			(
				(
					lv_call_8_0='('
					{
						newLeafNode(lv_call_8_0, grammarAccess.getAstExpressionSymbolReferenceAccess().getCallLeftParenthesisKeyword_5_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAstExpressionSymbolReferenceRule());
						}
						setWithLastConsumed($current, "call", true, "(");
					}
				)
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getAstExpressionSymbolReferenceAccess().getParametersAstExpressionParserRuleCall_5_1_0_0());
						}
						lv_parameters_9_0=ruleAstExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstExpressionSymbolReferenceRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_9_0,
								"streamblocks.eclipse.cal.Cal.AstExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_10=','
					{
						newLeafNode(otherlv_10, grammarAccess.getAstExpressionSymbolReferenceAccess().getCommaKeyword_5_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getAstExpressionSymbolReferenceAccess().getParametersAstExpressionParserRuleCall_5_1_1_1_0());
							}
							lv_parameters_11_0=ruleAstExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getAstExpressionSymbolReferenceRule());
								}
								add(
									$current,
									"parameters",
									lv_parameters_11_0,
									"streamblocks.eclipse.cal.Cal.AstExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_12=')'
			{
				newLeafNode(otherlv_12, grammarAccess.getAstExpressionSymbolReferenceAccess().getRightParenthesisKeyword_5_2());
			}
		)?
	)
;

// Entry rule entryRuleAstExpressionIf
entryRuleAstExpressionIf returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstExpressionIfRule()); }
	iv_ruleAstExpressionIf=ruleAstExpressionIf
	{ $current=$iv_ruleAstExpressionIf.current; }
	EOF;

// Rule AstExpressionIf
ruleAstExpressionIf returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getAstExpressionIfAccess().getIfKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstExpressionIfAccess().getConditionAstExpressionParserRuleCall_1_0());
				}
				lv_condition_1_0=ruleAstExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstExpressionIfRule());
					}
					set(
						$current,
						"condition",
						lv_condition_1_0,
						"streamblocks.eclipse.cal.Cal.AstExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='then'
		{
			newLeafNode(otherlv_2, grammarAccess.getAstExpressionIfAccess().getThenKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstExpressionIfAccess().getThenAstExpressionParserRuleCall_3_0());
				}
				lv_then_3_0=ruleAstExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstExpressionIfRule());
					}
					set(
						$current,
						"then",
						lv_then_3_0,
						"streamblocks.eclipse.cal.Cal.AstExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAstExpressionIfAccess().getElsifsAstExpressionElsifParserRuleCall_4_0());
				}
				lv_elsifs_4_0=ruleAstExpressionElsif
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstExpressionIfRule());
					}
					add(
						$current,
						"elsifs",
						lv_elsifs_4_0,
						"streamblocks.eclipse.cal.Cal.AstExpressionElsif");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='else'
		{
			newLeafNode(otherlv_5, grammarAccess.getAstExpressionIfAccess().getElseKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstExpressionIfAccess().getElseAstExpressionParserRuleCall_6_0());
				}
				lv_else_6_0=ruleAstExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstExpressionIfRule());
					}
					set(
						$current,
						"else",
						lv_else_6_0,
						"streamblocks.eclipse.cal.Cal.AstExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='end'
		{
			newLeafNode(otherlv_7, grammarAccess.getAstExpressionIfAccess().getEndKeyword_7());
		}
	)
;

// Entry rule entryRuleAstExpressionElsif
entryRuleAstExpressionElsif returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstExpressionElsifRule()); }
	iv_ruleAstExpressionElsif=ruleAstExpressionElsif
	{ $current=$iv_ruleAstExpressionElsif.current; }
	EOF;

// Rule AstExpressionElsif
ruleAstExpressionElsif returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='elsif'
		{
			newLeafNode(otherlv_0, grammarAccess.getAstExpressionElsifAccess().getElsifKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstExpressionElsifAccess().getConditionAstExpressionParserRuleCall_1_0());
				}
				lv_condition_1_0=ruleAstExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstExpressionElsifRule());
					}
					set(
						$current,
						"condition",
						lv_condition_1_0,
						"streamblocks.eclipse.cal.Cal.AstExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='then'
		{
			newLeafNode(otherlv_2, grammarAccess.getAstExpressionElsifAccess().getThenKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstExpressionElsifAccess().getThenAstExpressionParserRuleCall_3_0());
				}
				lv_then_3_0=ruleAstExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstExpressionElsifRule());
					}
					set(
						$current,
						"then",
						lv_then_3_0,
						"streamblocks.eclipse.cal.Cal.AstExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAstExpressionList
entryRuleAstExpressionList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstExpressionListRule()); }
	iv_ruleAstExpressionList=ruleAstExpressionList
	{ $current=$iv_ruleAstExpressionList.current; }
	EOF;

// Rule AstExpressionList
ruleAstExpressionList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getAstExpressionListAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstExpressionListAccess().getExpressionsAstExpressionParserRuleCall_1_0());
				}
				lv_expressions_1_0=ruleAstExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstExpressionListRule());
					}
					add(
						$current,
						"expressions",
						lv_expressions_1_0,
						"streamblocks.eclipse.cal.Cal.AstExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getAstExpressionListAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstExpressionListAccess().getExpressionsAstExpressionParserRuleCall_2_1_0());
					}
					lv_expressions_3_0=ruleAstExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstExpressionListRule());
						}
						add(
							$current,
							"expressions",
							lv_expressions_3_0,
							"streamblocks.eclipse.cal.Cal.AstExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_4=':'
			{
				newLeafNode(otherlv_4, grammarAccess.getAstExpressionListAccess().getColonKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstExpressionListAccess().getGeneratorsAstGeneratorParserRuleCall_3_1_0());
					}
					lv_generators_5_0=ruleAstGenerator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstExpressionListRule());
						}
						add(
							$current,
							"generators",
							lv_generators_5_0,
							"streamblocks.eclipse.cal.Cal.AstGenerator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getAstExpressionListAccess().getCommaKeyword_3_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstExpressionListAccess().getGeneratorsAstGeneratorParserRuleCall_3_2_1_0());
						}
						lv_generators_7_0=ruleAstGenerator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstExpressionListRule());
							}
							add(
								$current,
								"generators",
								lv_generators_7_0,
								"streamblocks.eclipse.cal.Cal.AstGenerator");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_8=']'
		{
			newLeafNode(otherlv_8, grammarAccess.getAstExpressionListAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleAstGenerator
entryRuleAstGenerator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstGeneratorRule()); }
	iv_ruleAstGenerator=ruleAstGenerator
	{ $current=$iv_ruleAstGenerator.current; }
	EOF;

// Rule AstGenerator
ruleAstGenerator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='for'
		{
			newLeafNode(otherlv_0, grammarAccess.getAstGeneratorAccess().getForKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstGeneratorAccess().getVariableAstVariableDeclarationParserRuleCall_1_0());
				}
				lv_variable_1_0=ruleAstVariableDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstGeneratorRule());
					}
					set(
						$current,
						"variable",
						lv_variable_1_0,
						"streamblocks.eclipse.cal.Cal.AstVariableDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='in'
		{
			newLeafNode(otherlv_2, grammarAccess.getAstGeneratorAccess().getInKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstGeneratorAccess().getExpressionAstExpressionParserRuleCall_3_0());
				}
				lv_expression_3_0=ruleAstExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstGeneratorRule());
					}
					set(
						$current,
						"expression",
						lv_expression_3_0,
						"streamblocks.eclipse.cal.Cal.AstExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getAstGeneratorAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstGeneratorAccess().getFilterAstExpressionParserRuleCall_4_1_0());
					}
					lv_filter_5_0=ruleAstExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstGeneratorRule());
						}
						add(
							$current,
							"filter",
							lv_filter_5_0,
							"streamblocks.eclipse.cal.Cal.AstExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAstExpressionSet
entryRuleAstExpressionSet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstExpressionSetRule()); }
	iv_ruleAstExpressionSet=ruleAstExpressionSet
	{ $current=$iv_ruleAstExpressionSet.current; }
	EOF;

// Rule AstExpressionSet
ruleAstExpressionSet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAstExpressionSetAccess().getAstExpressionSetAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getAstExpressionSetAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAstExpressionSetAccess().getExprsAstExpressionParserRuleCall_2_0_0());
					}
					lv_exprs_2_0=ruleAstExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstExpressionSetRule());
						}
						add(
							$current,
							"exprs",
							lv_exprs_2_0,
							"streamblocks.eclipse.cal.Cal.AstExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getAstExpressionSetAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstExpressionSetAccess().getExprsAstExpressionParserRuleCall_2_1_1_0());
						}
						lv_exprs_4_0=ruleAstExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstExpressionSetRule());
							}
							add(
								$current,
								"exprs",
								lv_exprs_4_0,
								"streamblocks.eclipse.cal.Cal.AstExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)?
		(
			otherlv_5=':'
			{
				newLeafNode(otherlv_5, grammarAccess.getAstExpressionSetAccess().getColonKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstExpressionSetAccess().getGeneratorAstGeneratorParserRuleCall_3_1_0());
					}
					lv_generator_6_0=ruleAstGenerator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstExpressionSetRule());
						}
						set(
							$current,
							"generator",
							lv_generator_6_0,
							"streamblocks.eclipse.cal.Cal.AstGenerator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getAstExpressionSetAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleAstExpressionMap
entryRuleAstExpressionMap returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstExpressionMapRule()); }
	iv_ruleAstExpressionMap=ruleAstExpressionMap
	{ $current=$iv_ruleAstExpressionMap.current; }
	EOF;

// Rule AstExpressionMap
ruleAstExpressionMap returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAstExpressionMapAccess().getAstExpressionMapAction_0(),
					$current);
			}
		)
		otherlv_1='map'
		{
			newLeafNode(otherlv_1, grammarAccess.getAstExpressionMapAccess().getMapKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getAstExpressionMapAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAstExpressionMapAccess().getMappingsMappingParserRuleCall_3_0_0());
					}
					lv_mappings_3_0=ruleMapping
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstExpressionMapRule());
						}
						add(
							$current,
							"mappings",
							lv_mappings_3_0,
							"streamblocks.eclipse.cal.Cal.Mapping");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getAstExpressionMapAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstExpressionMapAccess().getMappingsMappingParserRuleCall_3_1_1_0());
						}
						lv_mappings_5_0=ruleMapping
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstExpressionMapRule());
							}
							add(
								$current,
								"mappings",
								lv_mappings_5_0,
								"streamblocks.eclipse.cal.Cal.Mapping");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_6=':'
			{
				newLeafNode(otherlv_6, grammarAccess.getAstExpressionMapAccess().getColonKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstExpressionMapAccess().getGeneratorAstGeneratorParserRuleCall_4_1_0());
					}
					lv_generator_7_0=ruleAstGenerator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstExpressionMapRule());
						}
						set(
							$current,
							"generator",
							lv_generator_7_0,
							"streamblocks.eclipse.cal.Cal.AstGenerator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getAstExpressionMapAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleMapping
entryRuleMapping returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMappingRule()); }
	iv_ruleMapping=ruleMapping
	{ $current=$iv_ruleMapping.current; }
	EOF;

// Rule Mapping
ruleMapping returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMappingAccess().getKeyAstExpressionParserRuleCall_0_0());
				}
				lv_key_0_0=ruleAstExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMappingRule());
					}
					set(
						$current,
						"key",
						lv_key_0_0,
						"streamblocks.eclipse.cal.Cal.AstExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='->'
		{
			newLeafNode(otherlv_1, grammarAccess.getMappingAccess().getHyphenMinusGreaterThanSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMappingAccess().getValueAstExpressionParserRuleCall_2_0());
				}
				lv_value_2_0=ruleAstExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMappingRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"streamblocks.eclipse.cal.Cal.AstExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAstExpressionLet
entryRuleAstExpressionLet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstExpressionLetRule()); }
	iv_ruleAstExpressionLet=ruleAstExpressionLet
	{ $current=$iv_ruleAstExpressionLet.current; }
	EOF;

// Rule AstExpressionLet
ruleAstExpressionLet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='let'
		{
			newLeafNode(otherlv_0, grammarAccess.getAstExpressionLetAccess().getLetKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAstExpressionLetAccess().getVariablesAstValuedVariableDeclarationParserRuleCall_1_0_0());
					}
					lv_variables_1_0=ruleAstValuedVariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstExpressionLetRule());
						}
						add(
							$current,
							"variables",
							lv_variables_1_0,
							"streamblocks.eclipse.cal.Cal.AstValuedVariableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2=','
				{
					newLeafNode(otherlv_2, grammarAccess.getAstExpressionLetAccess().getCommaKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstExpressionLetAccess().getVariablesAstValuedVariableDeclarationParserRuleCall_1_1_1_0());
						}
						lv_variables_3_0=ruleAstValuedVariableDeclaration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstExpressionLetRule());
							}
							add(
								$current,
								"variables",
								lv_variables_3_0,
								"streamblocks.eclipse.cal.Cal.AstValuedVariableDeclaration");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getAstExpressionLetAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstExpressionLetAccess().getExprAstExpressionParserRuleCall_3_0());
				}
				lv_expr_5_0=ruleAstExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstExpressionLetRule());
					}
					set(
						$current,
						"expr",
						lv_expr_5_0,
						"streamblocks.eclipse.cal.Cal.AstExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_6='end'
			{
				newLeafNode(otherlv_6, grammarAccess.getAstExpressionLetAccess().getEndKeyword_4_0());
			}
			    |
			otherlv_7='endlet'
			{
				newLeafNode(otherlv_7, grammarAccess.getAstExpressionLetAccess().getEndletKeyword_4_1());
			}
		)
	)
;

// Entry rule entryRuleAstExpressionLambda
entryRuleAstExpressionLambda returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstExpressionLambdaRule()); }
	iv_ruleAstExpressionLambda=ruleAstExpressionLambda
	{ $current=$iv_ruleAstExpressionLambda.current; }
	EOF;

// Rule AstExpressionLambda
ruleAstExpressionLambda returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='lambda'
		{
			newLeafNode(otherlv_0, grammarAccess.getAstExpressionLambdaAccess().getLambdaKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getAstExpressionLambdaAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstExpressionLambdaRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"streamblocks.eclipse.cal.Cal.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getAstExpressionLambdaAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAstExpressionLambdaAccess().getParametersAstVariableDeclarationParserRuleCall_3_0_0());
					}
					lv_parameters_3_0=ruleAstVariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstExpressionLambdaRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_3_0,
							"streamblocks.eclipse.cal.Cal.AstVariableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getAstExpressionLambdaAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstExpressionLambdaAccess().getParametersAstVariableDeclarationParserRuleCall_3_1_1_0());
						}
						lv_parameters_5_0=ruleAstVariableDeclaration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstExpressionLambdaRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_5_0,
								"streamblocks.eclipse.cal.Cal.AstVariableDeclaration");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getAstExpressionLambdaAccess().getRightParenthesisKeyword_4());
		}
		otherlv_7='-->'
		{
			newLeafNode(otherlv_7, grammarAccess.getAstExpressionLambdaAccess().getHyphenMinusHyphenMinusGreaterThanSignKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstExpressionLambdaAccess().getTypeAstTypeParserRuleCall_6_0());
				}
				lv_type_8_0=ruleAstType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstExpressionLambdaRule());
					}
					set(
						$current,
						"type",
						lv_type_8_0,
						"streamblocks.eclipse.cal.Cal.AstType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_9='var'
			{
				newLeafNode(otherlv_9, grammarAccess.getAstExpressionLambdaAccess().getVarKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstExpressionLambdaAccess().getVariablesAstValuedVariableDeclarationParserRuleCall_7_1_0());
					}
					lv_variables_10_0=ruleAstValuedVariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstExpressionLambdaRule());
						}
						add(
							$current,
							"variables",
							lv_variables_10_0,
							"streamblocks.eclipse.cal.Cal.AstValuedVariableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_11=','
				{
					newLeafNode(otherlv_11, grammarAccess.getAstExpressionLambdaAccess().getCommaKeyword_7_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstExpressionLambdaAccess().getVariablesAstValuedVariableDeclarationParserRuleCall_7_2_1_0());
						}
						lv_variables_12_0=ruleAstValuedVariableDeclaration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstExpressionLambdaRule());
							}
							add(
								$current,
								"variables",
								lv_variables_12_0,
								"streamblocks.eclipse.cal.Cal.AstValuedVariableDeclaration");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_13=':'
		{
			newLeafNode(otherlv_13, grammarAccess.getAstExpressionLambdaAccess().getColonKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstExpressionLambdaAccess().getExpressionAstExpressionParserRuleCall_9_0());
				}
				lv_expression_14_0=ruleAstExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstExpressionLambdaRule());
					}
					set(
						$current,
						"expression",
						lv_expression_14_0,
						"streamblocks.eclipse.cal.Cal.AstExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_15='end'
			{
				newLeafNode(otherlv_15, grammarAccess.getAstExpressionLambdaAccess().getEndKeyword_10_0());
			}
			    |
			otherlv_16='endlambda'
			{
				newLeafNode(otherlv_16, grammarAccess.getAstExpressionLambdaAccess().getEndlambdaKeyword_10_1());
			}
		)
	)
;

// Entry rule entryRuleAstExpressionProc
entryRuleAstExpressionProc returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstExpressionProcRule()); }
	iv_ruleAstExpressionProc=ruleAstExpressionProc
	{ $current=$iv_ruleAstExpressionProc.current; }
	EOF;

// Rule AstExpressionProc
ruleAstExpressionProc returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='proc'
		{
			newLeafNode(otherlv_0, grammarAccess.getAstExpressionProcAccess().getProcKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getAstExpressionProcAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstExpressionProcRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"streamblocks.eclipse.cal.Cal.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getAstExpressionProcAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAstExpressionProcAccess().getParametersAstVariableDeclarationParserRuleCall_3_0_0());
					}
					lv_parameters_3_0=ruleAstVariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstExpressionProcRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_3_0,
							"streamblocks.eclipse.cal.Cal.AstVariableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getAstExpressionProcAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstExpressionProcAccess().getParametersAstVariableDeclarationParserRuleCall_3_1_1_0());
						}
						lv_parameters_5_0=ruleAstVariableDeclaration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstExpressionProcRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_5_0,
								"streamblocks.eclipse.cal.Cal.AstVariableDeclaration");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getAstExpressionProcAccess().getRightParenthesisKeyword_4());
		}
		(
			otherlv_7='var'
			{
				newLeafNode(otherlv_7, grammarAccess.getAstExpressionProcAccess().getVarKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstExpressionProcAccess().getVariablesAstValuedVariableDeclarationParserRuleCall_5_1_0());
					}
					lv_variables_8_0=ruleAstValuedVariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstExpressionProcRule());
						}
						add(
							$current,
							"variables",
							lv_variables_8_0,
							"streamblocks.eclipse.cal.Cal.AstValuedVariableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_9=','
				{
					newLeafNode(otherlv_9, grammarAccess.getAstExpressionProcAccess().getCommaKeyword_5_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstExpressionProcAccess().getVariablesAstValuedVariableDeclarationParserRuleCall_5_2_1_0());
						}
						lv_variables_10_0=ruleAstValuedVariableDeclaration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstExpressionProcRule());
							}
							add(
								$current,
								"variables",
								lv_variables_10_0,
								"streamblocks.eclipse.cal.Cal.AstValuedVariableDeclaration");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_11='begin'
			{
				newLeafNode(otherlv_11, grammarAccess.getAstExpressionProcAccess().getBeginKeyword_6_0());
			}
			    |
			otherlv_12='do'
			{
				newLeafNode(otherlv_12, grammarAccess.getAstExpressionProcAccess().getDoKeyword_6_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAstExpressionProcAccess().getStatementsAstStatementParserRuleCall_7_0());
				}
				lv_statements_13_0=ruleAstStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstExpressionProcRule());
					}
					add(
						$current,
						"statements",
						lv_statements_13_0,
						"streamblocks.eclipse.cal.Cal.AstStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			otherlv_14='end'
			{
				newLeafNode(otherlv_14, grammarAccess.getAstExpressionProcAccess().getEndKeyword_8_0());
			}
			    |
			otherlv_15='endproc'
			{
				newLeafNode(otherlv_15, grammarAccess.getAstExpressionProcAccess().getEndprocKeyword_8_1());
			}
		)
	)
;

// Entry rule entryRuleAstExpressionCase
entryRuleAstExpressionCase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstExpressionCaseRule()); }
	iv_ruleAstExpressionCase=ruleAstExpressionCase
	{ $current=$iv_ruleAstExpressionCase.current; }
	EOF;

// Rule AstExpressionCase
ruleAstExpressionCase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='case'
		{
			newLeafNode(otherlv_0, grammarAccess.getAstExpressionCaseAccess().getCaseKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstExpressionCaseAccess().getExpressionAstExpressionSymbolReferenceParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleAstExpressionSymbolReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstExpressionCaseRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"streamblocks.eclipse.cal.Cal.AstExpressionSymbolReference");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='of'
		{
			newLeafNode(otherlv_2, grammarAccess.getAstExpressionCaseAccess().getOfKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstExpressionCaseAccess().getCasesAstExpressionAlternativeParserRuleCall_3_0());
				}
				lv_cases_3_0=ruleAstExpressionAlternative
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstExpressionCaseRule());
					}
					add(
						$current,
						"cases",
						lv_cases_3_0,
						"streamblocks.eclipse.cal.Cal.AstExpressionAlternative");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			otherlv_4='else'
			{
				newLeafNode(otherlv_4, grammarAccess.getAstExpressionCaseAccess().getElseKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstExpressionCaseAccess().getDefaultAstExpressionParserRuleCall_4_1_0());
					}
					lv_default_5_0=ruleAstExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstExpressionCaseRule());
						}
						set(
							$current,
							"default",
							lv_default_5_0,
							"streamblocks.eclipse.cal.Cal.AstExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6='end'
		{
			newLeafNode(otherlv_6, grammarAccess.getAstExpressionCaseAccess().getEndKeyword_5());
		}
	)
;

// Entry rule entryRuleAstExpressionAlternative
entryRuleAstExpressionAlternative returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstExpressionAlternativeRule()); }
	iv_ruleAstExpressionAlternative=ruleAstExpressionAlternative
	{ $current=$iv_ruleAstExpressionAlternative.current; }
	EOF;

// Rule AstExpressionAlternative
ruleAstExpressionAlternative returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAstExpressionAlternativeAccess().getPatternAstPatternParserRuleCall_0_0());
				}
				lv_pattern_0_0=ruleAstPattern
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstExpressionAlternativeRule());
					}
					set(
						$current,
						"pattern",
						lv_pattern_0_0,
						"streamblocks.eclipse.cal.Cal.AstPattern");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='guard'
			{
				newLeafNode(otherlv_1, grammarAccess.getAstExpressionAlternativeAccess().getGuardKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstExpressionAlternativeAccess().getGuardsAstExpressionParserRuleCall_1_1_0());
					}
					lv_guards_2_0=ruleAstExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstExpressionAlternativeRule());
						}
						add(
							$current,
							"guards",
							lv_guards_2_0,
							"streamblocks.eclipse.cal.Cal.AstExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getAstExpressionAlternativeAccess().getCommaKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstExpressionAlternativeAccess().getGuardsAstExpressionParserRuleCall_1_2_1_0());
						}
						lv_guards_4_0=ruleAstExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstExpressionAlternativeRule());
							}
							add(
								$current,
								"guards",
								lv_guards_4_0,
								"streamblocks.eclipse.cal.Cal.AstExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=':'
		{
			newLeafNode(otherlv_5, grammarAccess.getAstExpressionAlternativeAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstExpressionAlternativeAccess().getExpressionAstExpressionParserRuleCall_3_0());
				}
				lv_expression_6_0=ruleAstExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstExpressionAlternativeRule());
					}
					set(
						$current,
						"expression",
						lv_expression_6_0,
						"streamblocks.eclipse.cal.Cal.AstExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='end'
		{
			newLeafNode(otherlv_7, grammarAccess.getAstExpressionAlternativeAccess().getEndKeyword_4());
		}
	)
;

// Entry rule entryRuleAstExpressionLiteral
entryRuleAstExpressionLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstExpressionLiteralRule()); }
	iv_ruleAstExpressionLiteral=ruleAstExpressionLiteral
	{ $current=$iv_ruleAstExpressionLiteral.current; }
	EOF;

// Rule AstExpressionLiteral
ruleAstExpressionLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAstExpressionLiteralAccess().getAstExpressionBooleanParserRuleCall_0());
		}
		this_AstExpressionBoolean_0=ruleAstExpressionBoolean
		{
			$current = $this_AstExpressionBoolean_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAstExpressionLiteralAccess().getAstExpressionFloatParserRuleCall_1());
		}
		this_AstExpressionFloat_1=ruleAstExpressionFloat
		{
			$current = $this_AstExpressionFloat_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAstExpressionLiteralAccess().getAstExpressionIntegerParserRuleCall_2());
		}
		this_AstExpressionInteger_2=ruleAstExpressionInteger
		{
			$current = $this_AstExpressionInteger_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAstExpressionLiteralAccess().getAstExpressionStringParserRuleCall_3());
		}
		this_AstExpressionString_3=ruleAstExpressionString
		{
			$current = $this_AstExpressionString_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAstExpressionBoolean
entryRuleAstExpressionBoolean returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstExpressionBooleanRule()); }
	iv_ruleAstExpressionBoolean=ruleAstExpressionBoolean
	{ $current=$iv_ruleAstExpressionBoolean.current; }
	EOF;

// Rule AstExpressionBoolean
ruleAstExpressionBoolean returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_BOOL
			{
				newLeafNode(lv_value_0_0, grammarAccess.getAstExpressionBooleanAccess().getValueBOOLTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getAstExpressionBooleanRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"streamblocks.eclipse.cal.Cal.BOOL");
			}
		)
	)
;

// Entry rule entryRuleAstExpressionFloat
entryRuleAstExpressionFloat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstExpressionFloatRule()); }
	iv_ruleAstExpressionFloat=ruleAstExpressionFloat
	{ $current=$iv_ruleAstExpressionFloat.current; }
	EOF;

// Rule AstExpressionFloat
ruleAstExpressionFloat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_REAL
			{
				newLeafNode(lv_value_0_0, grammarAccess.getAstExpressionFloatAccess().getValueREALTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getAstExpressionFloatRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"streamblocks.eclipse.cal.Cal.REAL");
			}
		)
	)
;

// Entry rule entryRuleAstExpressionInteger
entryRuleAstExpressionInteger returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstExpressionIntegerRule()); }
	iv_ruleAstExpressionInteger=ruleAstExpressionInteger
	{ $current=$iv_ruleAstExpressionInteger.current; }
	EOF;

// Rule AstExpressionInteger
ruleAstExpressionInteger returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_value_0_1=RULE_DECIMAL
				{
					newLeafNode(lv_value_0_1, grammarAccess.getAstExpressionIntegerAccess().getValueDECIMALTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstExpressionIntegerRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_0_1,
						"streamblocks.eclipse.cal.Cal.DECIMAL");
				}
				    |
				lv_value_0_2=RULE_OCTAL
				{
					newLeafNode(lv_value_0_2, grammarAccess.getAstExpressionIntegerAccess().getValueOCTALTerminalRuleCall_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstExpressionIntegerRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_0_2,
						"streamblocks.eclipse.cal.Cal.OCTAL");
				}
				    |
				lv_value_0_3=RULE_HEX
				{
					newLeafNode(lv_value_0_3, grammarAccess.getAstExpressionIntegerAccess().getValueHEXTerminalRuleCall_0_2());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstExpressionIntegerRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_0_3,
						"streamblocks.eclipse.cal.Cal.HEX");
				}
			)
		)
	)
;

// Entry rule entryRuleAstExpressionString
entryRuleAstExpressionString returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstExpressionStringRule()); }
	iv_ruleAstExpressionString=ruleAstExpressionString
	{ $current=$iv_ruleAstExpressionString.current; }
	EOF;

// Rule AstExpressionString
ruleAstExpressionString returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getAstExpressionStringAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getAstExpressionStringRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"streamblocks.eclipse.cal.Cal.STRING");
			}
		)
	)
;

// Entry rule entryRuleAstPattern
entryRuleAstPattern returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstPatternRule()); }
	iv_ruleAstPattern=ruleAstPattern
	{ $current=$iv_ruleAstPattern.current; }
	EOF;

// Rule AstPattern
ruleAstPattern returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAstPatternAccess().getAstPatternAlternativeParserRuleCall_0());
		}
		this_AstPatternAlternative_0=ruleAstPatternAlternative
		{
			$current = $this_AstPatternAlternative_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAstPatternAccess().getAstPatternAliasParserRuleCall_1());
		}
		this_AstPatternAlias_1=ruleAstPatternAlias
		{
			$current = $this_AstPatternAlias_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAstPatternAccess().getAstPatternDeconstructionParserRuleCall_2());
		}
		this_AstPatternDeconstruction_2=ruleAstPatternDeconstruction
		{
			$current = $this_AstPatternDeconstruction_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAstPatternAccess().getAstPatternListParserRuleCall_3());
		}
		this_AstPatternList_3=ruleAstPatternList
		{
			$current = $this_AstPatternList_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAstPatternAccess().getAstPatternDeclarationParserRuleCall_4());
		}
		this_AstPatternDeclaration_4=ruleAstPatternDeclaration
		{
			$current = $this_AstPatternDeclaration_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAstPatternAccess().getAstPatternWildcardParserRuleCall_5());
		}
		this_AstPatternWildcard_5=ruleAstPatternWildcard
		{
			$current = $this_AstPatternWildcard_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAstPatternDeclaration
entryRuleAstPatternDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstPatternDeclarationRule()); }
	iv_ruleAstPatternDeclaration=ruleAstPatternDeclaration
	{ $current=$iv_ruleAstPatternDeclaration.current; }
	EOF;

// Rule AstPatternDeclaration
ruleAstPatternDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getAstPatternDeclarationAccess().getVariableAstTokenParserRuleCall_0());
			}
			lv_variable_0_0=ruleAstToken
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getAstPatternDeclarationRule());
				}
				set(
					$current,
					"variable",
					lv_variable_0_0,
					"streamblocks.eclipse.cal.Cal.AstToken");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleAstPatternWildcard
entryRuleAstPatternWildcard returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstPatternWildcardRule()); }
	iv_ruleAstPatternWildcard=ruleAstPatternWildcard
	{ $current=$iv_ruleAstPatternWildcard.current; }
	EOF;

// Rule AstPatternWildcard
ruleAstPatternWildcard returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAstPatternWildcardAccess().getAstPatternAction_0(),
					$current);
			}
		)
		otherlv_1='_'
		{
			newLeafNode(otherlv_1, grammarAccess.getAstPatternWildcardAccess().get_Keyword_1());
		}
	)
;

// Entry rule entryRuleAstPatternAlternative
entryRuleAstPatternAlternative returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstPatternAlternativeRule()); }
	iv_ruleAstPatternAlternative=ruleAstPatternAlternative
	{ $current=$iv_ruleAstPatternAlternative.current; }
	EOF;

// Rule AstPatternAlternative
ruleAstPatternAlternative returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAstPatternAlternativeAccess().getPatternsAstPatternLiteralParserRuleCall_0_0_0());
					}
					lv_patterns_0_0=ruleAstPatternLiteral
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstPatternAlternativeRule());
						}
						add(
							$current,
							"patterns",
							lv_patterns_0_0,
							"streamblocks.eclipse.cal.Cal.AstPatternLiteral");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAstPatternAlternativeAccess().getPatternsAstPatternExpressionParserRuleCall_0_1_0());
					}
					lv_patterns_1_0=ruleAstPatternExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstPatternAlternativeRule());
						}
						add(
							$current,
							"patterns",
							lv_patterns_1_0,
							"streamblocks.eclipse.cal.Cal.AstPatternExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			otherlv_2='|'
			{
				newLeafNode(otherlv_2, grammarAccess.getAstPatternAlternativeAccess().getVerticalLineKeyword_1_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getAstPatternAlternativeAccess().getPatternsAstPatternLiteralParserRuleCall_1_1_0_0());
						}
						lv_patterns_3_0=ruleAstPatternLiteral
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstPatternAlternativeRule());
							}
							add(
								$current,
								"patterns",
								lv_patterns_3_0,
								"streamblocks.eclipse.cal.Cal.AstPatternLiteral");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getAstPatternAlternativeAccess().getPatternsAstPatternExpressionParserRuleCall_1_1_1_0());
						}
						lv_patterns_4_0=ruleAstPatternExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstPatternAlternativeRule());
							}
							add(
								$current,
								"patterns",
								lv_patterns_4_0,
								"streamblocks.eclipse.cal.Cal.AstPatternExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleAstPatternAlias
entryRuleAstPatternAlias returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstPatternAliasRule()); }
	iv_ruleAstPatternAlias=ruleAstPatternAlias
	{ $current=$iv_ruleAstPatternAlias.current; }
	EOF;

// Rule AstPatternAlias
ruleAstPatternAlias returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAstPatternAliasAccess().getAliasAstPatternDeclarationParserRuleCall_0_0_0());
					}
					lv_alias_0_1=ruleAstPatternDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstPatternAliasRule());
						}
						set(
							$current,
							"alias",
							lv_alias_0_1,
							"streamblocks.eclipse.cal.Cal.AstPatternDeclaration");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getAstPatternAliasAccess().getAliasAstPatternWildcardParserRuleCall_0_0_1());
					}
					lv_alias_0_2=ruleAstPatternWildcard
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstPatternAliasRule());
						}
						set(
							$current,
							"alias",
							lv_alias_0_2,
							"streamblocks.eclipse.cal.Cal.AstPatternWildcard");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_1='@'
		{
			newLeafNode(otherlv_1, grammarAccess.getAstPatternAliasAccess().getCommercialAtKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstPatternAliasAccess().getExpressionAstPatternExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleAstPatternExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstPatternAliasRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"streamblocks.eclipse.cal.Cal.AstPatternExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAstPatternList
entryRuleAstPatternList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstPatternListRule()); }
	iv_ruleAstPatternList=ruleAstPatternList
	{ $current=$iv_ruleAstPatternList.current; }
	EOF;

// Rule AstPatternList
ruleAstPatternList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getAstPatternListAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstPatternListAccess().getPatternsAstPatternParserRuleCall_1_0());
				}
				lv_patterns_1_0=ruleAstPattern
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstPatternListRule());
					}
					add(
						$current,
						"patterns",
						lv_patterns_1_0,
						"streamblocks.eclipse.cal.Cal.AstPattern");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getAstPatternListAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstPatternListAccess().getPatternsAstPatternParserRuleCall_2_1_0());
					}
					lv_patterns_3_0=ruleAstPattern
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstPatternListRule());
						}
						add(
							$current,
							"patterns",
							lv_patterns_3_0,
							"streamblocks.eclipse.cal.Cal.AstPattern");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getAstPatternListAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleAstPatternLiteral
entryRuleAstPatternLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstPatternLiteralRule()); }
	iv_ruleAstPatternLiteral=ruleAstPatternLiteral
	{ $current=$iv_ruleAstPatternLiteral.current; }
	EOF;

// Rule AstPatternLiteral
ruleAstPatternLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getAstPatternLiteralAccess().getLiteralAstExpressionLiteralParserRuleCall_0());
			}
			lv_literal_0_0=ruleAstExpressionLiteral
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getAstPatternLiteralRule());
				}
				set(
					$current,
					"literal",
					lv_literal_0_0,
					"streamblocks.eclipse.cal.Cal.AstExpressionLiteral");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleAstPatternExpression
entryRuleAstPatternExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstPatternExpressionRule()); }
	iv_ruleAstPatternExpression=ruleAstPatternExpression
	{ $current=$iv_ruleAstPatternExpression.current; }
	EOF;

// Rule AstPatternExpression
ruleAstPatternExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='`'
		{
			newLeafNode(otherlv_0, grammarAccess.getAstPatternExpressionAccess().getGraveAccentKeyword_0());
		}
		(
			(
				otherlv_1='('
				{
					newLeafNode(otherlv_1, grammarAccess.getAstPatternExpressionAccess().getLeftParenthesisKeyword_1_0_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstPatternExpressionAccess().getExpressionAstExpressionParserRuleCall_1_0_1_0());
						}
						lv_expression_2_0=ruleAstExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstPatternExpressionRule());
							}
							set(
								$current,
								"expression",
								lv_expression_2_0,
								"streamblocks.eclipse.cal.Cal.AstExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_3=')'
				{
					newLeafNode(otherlv_3, grammarAccess.getAstPatternExpressionAccess().getRightParenthesisKeyword_1_0_2());
				}
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAstPatternExpressionAccess().getExpressionAstExpressionSymbolReferenceParserRuleCall_1_1_0());
					}
					lv_expression_4_0=ruleAstExpressionSymbolReference
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstPatternExpressionRule());
						}
						set(
							$current,
							"expression",
							lv_expression_4_0,
							"streamblocks.eclipse.cal.Cal.AstExpressionSymbolReference");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleAstPatternDeconstruction
entryRuleAstPatternDeconstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstPatternDeconstructionRule()); }
	iv_ruleAstPatternDeconstruction=ruleAstPatternDeconstruction
	{ $current=$iv_ruleAstPatternDeconstruction.current; }
	EOF;

// Rule AstPatternDeconstruction
ruleAstPatternDeconstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getAstPatternDeconstructionAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstPatternDeconstructionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"streamblocks.eclipse.cal.Cal.ID");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getAstPatternDeconstructionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstPatternDeconstructionAccess().getPatternsAstPatternParserRuleCall_2_0());
				}
				lv_patterns_2_0=ruleAstPattern
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstPatternDeconstructionRule());
					}
					add(
						$current,
						"patterns",
						lv_patterns_2_0,
						"streamblocks.eclipse.cal.Cal.AstPattern");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getAstPatternDeconstructionAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstPatternDeconstructionAccess().getPatternsAstPatternParserRuleCall_3_1_0());
					}
					lv_patterns_4_0=ruleAstPattern
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstPatternDeconstructionRule());
						}
						add(
							$current,
							"patterns",
							lv_patterns_4_0,
							"streamblocks.eclipse.cal.Cal.AstPattern");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getAstPatternDeconstructionAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleAstTypeBuiltIn
entryRuleAstTypeBuiltIn returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAstTypeBuiltInRule()); }
	iv_ruleAstTypeBuiltIn=ruleAstTypeBuiltIn
	{ $current=$iv_ruleAstTypeBuiltIn.current.getText(); }
	EOF;

// Rule AstTypeBuiltIn
ruleAstTypeBuiltIn returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='int'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAstTypeBuiltInAccess().getIntKeyword_0());
		}
		    |
		kw='uint'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAstTypeBuiltInAccess().getUintKeyword_1());
		}
		    |
		kw='float'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAstTypeBuiltInAccess().getFloatKeyword_2());
		}
		    |
		kw='double'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAstTypeBuiltInAccess().getDoubleKeyword_3());
		}
		    |
		kw='bool'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAstTypeBuiltInAccess().getBoolKeyword_4());
		}
		    |
		kw='List'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAstTypeBuiltInAccess().getListKeyword_5());
		}
		    |
		kw='String'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAstTypeBuiltInAccess().getStringKeyword_6());
		}
		    |
		kw='set'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAstTypeBuiltInAccess().getSetKeyword_7());
		}
		    |
		kw='map'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAstTypeBuiltInAccess().getMapKeyword_8());
		}
	)
;

// Entry rule entryRuleAstType
entryRuleAstType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstTypeRule()); }
	iv_ruleAstType=ruleAstType
	{ $current=$iv_ruleAstType.current; }
	EOF;

// Rule AstType
ruleAstType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAstTypeAccess().getAstTypeAction_0(),
					$current);
			}
		)
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getAstTypeAccess().getBuiltinAstTypeBuiltInParserRuleCall_1_0_0_0());
						}
						lv_builtin_1_0=ruleAstTypeBuiltIn
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstTypeRule());
							}
							set(
								$current,
								"builtin",
								lv_builtin_1_0,
								"streamblocks.eclipse.cal.Cal.AstTypeBuiltIn");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getAstTypeAccess().getTypeParamsAstTypeParameterListParserRuleCall_1_0_1_0());
						}
						lv_typeParams_2_0=ruleAstTypeParameterList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstTypeRule());
							}
							set(
								$current,
								"typeParams",
								lv_typeParams_2_0,
								"streamblocks.eclipse.cal.Cal.AstTypeParameterList");
							afterParserOrEnumRuleCall();
						}
					)
				)?
				(
					otherlv_3='['
					{
						newLeafNode(otherlv_3, grammarAccess.getAstTypeAccess().getLeftSquareBracketKeyword_1_0_2_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getAstTypeAccess().getDimensionsAstExpressionParserRuleCall_1_0_2_1_0());
							}
							lv_dimensions_4_0=ruleAstExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getAstTypeRule());
								}
								add(
									$current,
									"dimensions",
									lv_dimensions_4_0,
									"streamblocks.eclipse.cal.Cal.AstExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
					otherlv_5=']'
					{
						newLeafNode(otherlv_5, grammarAccess.getAstTypeAccess().getRightSquareBracketKeyword_1_0_2_2());
					}
				)*
			)
			    |
			(
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAstTypeRule());
							}
						}
						otherlv_6=RULE_ID
						{
							newLeafNode(otherlv_6, grammarAccess.getAstTypeAccess().getNameAstTypeUserCrossReference_1_1_0_0());
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getAstTypeAccess().getTypeParamsAstTypeParameterListParserRuleCall_1_1_1_0());
						}
						lv_typeParams_7_0=ruleAstTypeParameterList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstTypeRule());
							}
							set(
								$current,
								"typeParams",
								lv_typeParams_7_0,
								"streamblocks.eclipse.cal.Cal.AstTypeParameterList");
							afterParserOrEnumRuleCall();
						}
					)
				)?
				(
					otherlv_8='['
					{
						newLeafNode(otherlv_8, grammarAccess.getAstTypeAccess().getLeftSquareBracketKeyword_1_1_2_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getAstTypeAccess().getDimensionsAstExpressionParserRuleCall_1_1_2_1_0());
							}
							lv_dimensions_9_0=ruleAstExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getAstTypeRule());
								}
								add(
									$current,
									"dimensions",
									lv_dimensions_9_0,
									"streamblocks.eclipse.cal.Cal.AstExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
					otherlv_10=']'
					{
						newLeafNode(otherlv_10, grammarAccess.getAstTypeAccess().getRightSquareBracketKeyword_1_1_2_2());
					}
				)*
			)
			    |
			(
				otherlv_11='['
				{
					newLeafNode(otherlv_11, grammarAccess.getAstTypeAccess().getLeftSquareBracketKeyword_1_2_0());
				}
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getAstTypeAccess().getDomainAstTypeParserRuleCall_1_2_1_0_0());
							}
							lv_domain_12_0=ruleAstType
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getAstTypeRule());
								}
								add(
									$current,
									"domain",
									lv_domain_12_0,
									"streamblocks.eclipse.cal.Cal.AstType");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_13=','
						{
							newLeafNode(otherlv_13, grammarAccess.getAstTypeAccess().getCommaKeyword_1_2_1_1_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getAstTypeAccess().getDomainAstTypeParserRuleCall_1_2_1_1_1_0());
								}
								lv_domain_14_0=ruleAstType
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getAstTypeRule());
									}
									add(
										$current,
										"domain",
										lv_domain_14_0,
										"streamblocks.eclipse.cal.Cal.AstType");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)*
				)?
				otherlv_15='-->'
				{
					newLeafNode(otherlv_15, grammarAccess.getAstTypeAccess().getHyphenMinusHyphenMinusGreaterThanSignKeyword_1_2_2());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstTypeAccess().getCodomainAstTypeParserRuleCall_1_2_3_0());
						}
						lv_codomain_16_0=ruleAstType
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstTypeRule());
							}
							set(
								$current,
								"codomain",
								lv_codomain_16_0,
								"streamblocks.eclipse.cal.Cal.AstType");
							afterParserOrEnumRuleCall();
						}
					)
				)?
				otherlv_17=']'
				{
					newLeafNode(otherlv_17, grammarAccess.getAstTypeAccess().getRightSquareBracketKeyword_1_2_4());
				}
			)
		)
	)
;

// Entry rule entryRuleAstTypeParameterList
entryRuleAstTypeParameterList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstTypeParameterListRule()); }
	iv_ruleAstTypeParameterList=ruleAstTypeParameterList
	{ $current=$iv_ruleAstTypeParameterList.current; }
	EOF;

// Rule AstTypeParameterList
ruleAstTypeParameterList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getAstTypeParameterListAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAstTypeParameterListAccess().getParamsAstTypeParamParserRuleCall_1_0());
				}
				lv_params_1_0=ruleAstTypeParam
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstTypeParameterListRule());
					}
					add(
						$current,
						"params",
						lv_params_1_0,
						"streamblocks.eclipse.cal.Cal.AstTypeParam");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getAstTypeParameterListAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstTypeParameterListAccess().getParamsAstTypeParamParserRuleCall_2_1_0());
					}
					lv_params_3_0=ruleAstTypeParam
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstTypeParameterListRule());
						}
						add(
							$current,
							"params",
							lv_params_3_0,
							"streamblocks.eclipse.cal.Cal.AstTypeParam");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getAstTypeParameterListAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleAstTypeParam
entryRuleAstTypeParam returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstTypeParamRule()); }
	iv_ruleAstTypeParam=ruleAstTypeParam
	{ $current=$iv_ruleAstTypeParam.current; }
	EOF;

// Rule AstTypeParam
ruleAstTypeParam returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_name_0_0=RULE_ID
					{
						newLeafNode(lv_name_0_0, grammarAccess.getAstTypeParamAccess().getNameIDTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAstTypeParamRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_0_0,
							"streamblocks.eclipse.cal.Cal.ID");
					}
				)
			)
			otherlv_1='='
			{
				newLeafNode(otherlv_1, grammarAccess.getAstTypeParamAccess().getEqualsSignKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstTypeParamAccess().getValueAstExpressionParserRuleCall_0_2_0());
					}
					lv_value_2_0=ruleAstExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstTypeParamRule());
						}
						set(
							$current,
							"value",
							lv_value_2_0,
							"streamblocks.eclipse.cal.Cal.AstExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					(
						lv_name_3_1=RULE_ID
						{
							newLeafNode(lv_name_3_1, grammarAccess.getAstTypeParamAccess().getNameIDTerminalRuleCall_1_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAstTypeParamRule());
							}
							setWithLastConsumed(
								$current,
								"name",
								lv_name_3_1,
								"streamblocks.eclipse.cal.Cal.ID");
						}
						    |
						lv_name_3_2='type'
						{
							newLeafNode(lv_name_3_2, grammarAccess.getAstTypeParamAccess().getNameTypeKeyword_1_0_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAstTypeParamRule());
							}
							setWithLastConsumed($current, "name", lv_name_3_2, null);
						}
					)
				)
			)
			otherlv_4=':'
			{
				newLeafNode(otherlv_4, grammarAccess.getAstTypeParamAccess().getColonKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstTypeParamAccess().getTypeAstTypeParserRuleCall_1_2_0());
					}
					lv_type_5_0=ruleAstType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstTypeParamRule());
						}
						set(
							$current,
							"type",
							lv_type_5_0,
							"streamblocks.eclipse.cal.Cal.AstType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleAstVariableDeclaration
entryRuleAstVariableDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstVariableDeclarationRule()); }
	iv_ruleAstVariableDeclaration=ruleAstVariableDeclaration
	{ $current=$iv_ruleAstVariableDeclaration.current; }
	EOF;

// Rule AstVariableDeclaration
ruleAstVariableDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAstVariableDeclarationAccess().getAnnotationsAstAnnotationParserRuleCall_0_0());
				}
				lv_annotations_0_0=ruleAstAnnotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstVariableDeclarationRule());
					}
					add(
						$current,
						"annotations",
						lv_annotations_0_0,
						"streamblocks.eclipse.cal.Cal.AstAnnotation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getAstVariableDeclarationAccess().getTypeAstTypeParserRuleCall_1_0());
				}
				lv_type_1_0=ruleAstType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAstVariableDeclarationRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"streamblocks.eclipse.cal.Cal.AstType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getAstVariableDeclarationAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstVariableDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"streamblocks.eclipse.cal.Cal.ID");
				}
			)
		)
		(
			otherlv_3='['
			{
				newLeafNode(otherlv_3, grammarAccess.getAstVariableDeclarationAccess().getLeftSquareBracketKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstVariableDeclarationAccess().getDimensionsAstExpressionParserRuleCall_3_1_0());
					}
					lv_dimensions_4_0=ruleAstExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstVariableDeclarationRule());
						}
						add(
							$current,
							"dimensions",
							lv_dimensions_4_0,
							"streamblocks.eclipse.cal.Cal.AstExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5=']'
			{
				newLeafNode(otherlv_5, grammarAccess.getAstVariableDeclarationAccess().getRightSquareBracketKeyword_3_2());
			}
		)*
	)
;

// Entry rule entryRuleAstValuedVariableDeclaration
entryRuleAstValuedVariableDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstValuedVariableDeclarationRule()); }
	iv_ruleAstValuedVariableDeclaration=ruleAstValuedVariableDeclaration
	{ $current=$iv_ruleAstValuedVariableDeclaration.current; }
	EOF;

// Rule AstValuedVariableDeclaration
ruleAstValuedVariableDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAstValuedVariableDeclarationAccess().getAstVariableDeclarationParserRuleCall_0());
		}
		this_AstVariableDeclaration_0=ruleAstVariableDeclaration
		{
			$current = $this_AstVariableDeclaration_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						lv_constant_1_0='='
						{
							newLeafNode(lv_constant_1_0, grammarAccess.getAstValuedVariableDeclarationAccess().getConstantEqualsSignKeyword_1_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAstValuedVariableDeclarationRule());
							}
							setWithLastConsumed($current, "constant", true, "=");
						}
					)
				)
				    |
				otherlv_2=':='
				{
					newLeafNode(otherlv_2, grammarAccess.getAstValuedVariableDeclarationAccess().getColonEqualsSignKeyword_1_0_1());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAstValuedVariableDeclarationAccess().getValueAstExpressionParserRuleCall_1_1_0());
					}
					lv_value_3_0=ruleAstExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstValuedVariableDeclarationRule());
						}
						set(
							$current,
							"value",
							lv_value_3_0,
							"streamblocks.eclipse.cal.Cal.AstExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleAstMemberAccess
entryRuleAstMemberAccess returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstMemberAccessRule()); }
	iv_ruleAstMemberAccess=ruleAstMemberAccess
	{ $current=$iv_ruleAstMemberAccess.current; }
	EOF;

// Rule AstMemberAccess
ruleAstMemberAccess returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='.'
		{
			newLeafNode(otherlv_0, grammarAccess.getAstMemberAccessAccess().getFullStopKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getAstMemberAccessAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstMemberAccessRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"streamblocks.eclipse.cal.Cal.ID");
				}
			)
		)
		(
			otherlv_2='['
			{
				newLeafNode(otherlv_2, grammarAccess.getAstMemberAccessAccess().getLeftSquareBracketKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstMemberAccessAccess().getMemberIndexAstExpressionParserRuleCall_2_1_0());
					}
					lv_memberIndex_3_0=ruleAstExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstMemberAccessRule());
						}
						add(
							$current,
							"memberIndex",
							lv_memberIndex_3_0,
							"streamblocks.eclipse.cal.Cal.AstExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=']'
			{
				newLeafNode(otherlv_4, grammarAccess.getAstMemberAccessAccess().getRightSquareBracketKeyword_2_2());
			}
		)*
	)
;

// Entry rule entryRuleAstAnnotation
entryRuleAstAnnotation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstAnnotationRule()); }
	iv_ruleAstAnnotation=ruleAstAnnotation
	{ $current=$iv_ruleAstAnnotation.current; }
	EOF;

// Rule AstAnnotation
ruleAstAnnotation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='@'
		{
			newLeafNode(otherlv_0, grammarAccess.getAstAnnotationAccess().getCommercialAtKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getAstAnnotationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstAnnotationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"streamblocks.eclipse.cal.Cal.ID");
				}
			)
		)
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getAstAnnotationAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAstAnnotationAccess().getArgumentsAstAnnotationArgumentParserRuleCall_2_1_0());
					}
					lv_arguments_3_0=ruleAstAnnotationArgument
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAstAnnotationRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_3_0,
							"streamblocks.eclipse.cal.Cal.AstAnnotationArgument");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getAstAnnotationAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAstAnnotationAccess().getArgumentsAstAnnotationArgumentParserRuleCall_2_2_1_0());
						}
						lv_arguments_5_0=ruleAstAnnotationArgument
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAstAnnotationRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_5_0,
								"streamblocks.eclipse.cal.Cal.AstAnnotationArgument");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getAstAnnotationAccess().getRightParenthesisKeyword_2_3());
			}
		)?
	)
;

// Entry rule entryRuleAstAnnotationArgument
entryRuleAstAnnotationArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAstAnnotationArgumentRule()); }
	iv_ruleAstAnnotationArgument=ruleAstAnnotationArgument
	{ $current=$iv_ruleAstAnnotationArgument.current; }
	EOF;

// Rule AstAnnotationArgument
ruleAstAnnotationArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getAstAnnotationArgumentAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstAnnotationArgumentRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"streamblocks.eclipse.cal.Cal.ID");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getAstAnnotationArgumentAccess().getEqualsSignKeyword_1());
		}
		(
			(
				lv_value_2_0=RULE_STRING
				{
					newLeafNode(lv_value_2_0, grammarAccess.getAstAnnotationArgumentAccess().getValueSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAstAnnotationArgumentRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_2_0,
						"streamblocks.eclipse.cal.Cal.STRING");
				}
			)
		)
	)
;

// Rule ImportKind
ruleImportKind returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='var'
			{
				$current = grammarAccess.getImportKindAccess().getVAREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getImportKindAccess().getVAREnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='type'
			{
				$current = grammarAccess.getImportKindAccess().getTYPEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getImportKindAccess().getTYPEEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='entity'
			{
				$current = grammarAccess.getImportKindAccess().getENTITYEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getImportKindAccess().getENTITYEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_BOOL : ('true'|'false');

RULE_REAL : (('0'..'9')+ '.' ('0'..'9')* (('e'|'E') ('+'|'-')? ('0'..'9')+)?|'.' ('0'..'9')+ (('e'|'E') ('+'|'-')? ('0'..'9')+)?|('0'..'9')+ ('e'|'E') ('+'|'-')? ('0'..'9')+);

RULE_DECIMAL : '1'..'9' ('0'..'9')*;

RULE_OCTAL : '0' ('0'..'7')*;

RULE_HEX : '0' ('x'|'X') ('0'..'9'|'a'..'f'|'A'..'F')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ID : ('a'..'z'|'A'..'Z'|'_'|'$') ('a'..'z'|'A'..'Z'|'0'..'9'|'_'|'$')*;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

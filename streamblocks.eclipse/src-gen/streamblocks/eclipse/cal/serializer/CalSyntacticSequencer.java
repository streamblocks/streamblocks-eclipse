/*
 * generated by Xtext 2.21.0
 */
package streamblocks.eclipse.cal.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import streamblocks.eclipse.cal.services.CalGrammarAccess;

@SuppressWarnings("all")
public class CalSyntacticSequencer extends AbstractSyntacticSequencer {

	protected CalGrammarAccess grammarAccess;
	protected AbstractElementAlias match_AstAction_DoKeyword_9_0_q;
	protected AbstractElementAlias match_AstExpressionLambda_EndKeyword_10_0_or_EndlambdaKeyword_10_1;
	protected AbstractElementAlias match_AstExpressionLet_EndKeyword_4_0_or_EndletKeyword_4_1;
	protected AbstractElementAlias match_AstExpressionPostfix_LeftParenthesisKeyword_10_0_a;
	protected AbstractElementAlias match_AstExpressionPostfix_LeftParenthesisKeyword_10_0_p;
	protected AbstractElementAlias match_AstExpressionProc_BeginKeyword_6_0_or_DoKeyword_6_1;
	protected AbstractElementAlias match_AstExpressionProc_EndKeyword_8_0_or_EndprocKeyword_8_1;
	protected AbstractElementAlias match_AstInitialize_DoKeyword_8_0_q;
	protected AbstractElementAlias match_AstInvariant_EndKeyword_3_0_or_EndinvariantKeyword_3_1;
	protected AbstractElementAlias match_AstProcedure_BeginKeyword_8_0_q;
	protected AbstractElementAlias match_AstSchedule_EndKeyword_5_0_or_EndscheduleKeyword_5_1;
	protected AbstractElementAlias match_AstStatementIf_ElseKeyword_5_0_q;
	protected AbstractElementAlias match_AstStructureStatementConnection___LeftCurlyBracketKeyword_5_0_RightCurlyBracketKeyword_5_2__q;
	protected AbstractElementAlias match_AstStructureStatementIf_ElseKeyword_5_0_q;
	protected AbstractElementAlias match_AstTaggedTuple___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q;
	protected AbstractElementAlias match_AstTypeDefinition___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q;
	protected AbstractElementAlias match_RegExpGrouping_LeftParenthesisKeyword_1_0_a;
	protected AbstractElementAlias match_RegExpGrouping_LeftParenthesisKeyword_1_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (CalGrammarAccess) access;
		match_AstAction_DoKeyword_9_0_q = new TokenAlias(false, true, grammarAccess.getAstActionAccess().getDoKeyword_9_0());
		match_AstExpressionLambda_EndKeyword_10_0_or_EndlambdaKeyword_10_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAstExpressionLambdaAccess().getEndKeyword_10_0()), new TokenAlias(false, false, grammarAccess.getAstExpressionLambdaAccess().getEndlambdaKeyword_10_1()));
		match_AstExpressionLet_EndKeyword_4_0_or_EndletKeyword_4_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAstExpressionLetAccess().getEndKeyword_4_0()), new TokenAlias(false, false, grammarAccess.getAstExpressionLetAccess().getEndletKeyword_4_1()));
		match_AstExpressionPostfix_LeftParenthesisKeyword_10_0_a = new TokenAlias(true, true, grammarAccess.getAstExpressionPostfixAccess().getLeftParenthesisKeyword_10_0());
		match_AstExpressionPostfix_LeftParenthesisKeyword_10_0_p = new TokenAlias(true, false, grammarAccess.getAstExpressionPostfixAccess().getLeftParenthesisKeyword_10_0());
		match_AstExpressionProc_BeginKeyword_6_0_or_DoKeyword_6_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAstExpressionProcAccess().getBeginKeyword_6_0()), new TokenAlias(false, false, grammarAccess.getAstExpressionProcAccess().getDoKeyword_6_1()));
		match_AstExpressionProc_EndKeyword_8_0_or_EndprocKeyword_8_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAstExpressionProcAccess().getEndKeyword_8_0()), new TokenAlias(false, false, grammarAccess.getAstExpressionProcAccess().getEndprocKeyword_8_1()));
		match_AstInitialize_DoKeyword_8_0_q = new TokenAlias(false, true, grammarAccess.getAstInitializeAccess().getDoKeyword_8_0());
		match_AstInvariant_EndKeyword_3_0_or_EndinvariantKeyword_3_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAstInvariantAccess().getEndKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getAstInvariantAccess().getEndinvariantKeyword_3_1()));
		match_AstProcedure_BeginKeyword_8_0_q = new TokenAlias(false, true, grammarAccess.getAstProcedureAccess().getBeginKeyword_8_0());
		match_AstSchedule_EndKeyword_5_0_or_EndscheduleKeyword_5_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAstScheduleAccess().getEndKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getAstScheduleAccess().getEndscheduleKeyword_5_1()));
		match_AstStatementIf_ElseKeyword_5_0_q = new TokenAlias(false, true, grammarAccess.getAstStatementIfAccess().getElseKeyword_5_0());
		match_AstStructureStatementConnection___LeftCurlyBracketKeyword_5_0_RightCurlyBracketKeyword_5_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getAstStructureStatementConnectionAccess().getLeftCurlyBracketKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getAstStructureStatementConnectionAccess().getRightCurlyBracketKeyword_5_2()));
		match_AstStructureStatementIf_ElseKeyword_5_0_q = new TokenAlias(false, true, grammarAccess.getAstStructureStatementIfAccess().getElseKeyword_5_0());
		match_AstTaggedTuple___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getAstTaggedTupleAccess().getLeftParenthesisKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getAstTaggedTupleAccess().getRightParenthesisKeyword_1_2()));
		match_AstTypeDefinition___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getAstTypeDefinitionAccess().getLeftParenthesisKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getAstTypeDefinitionAccess().getRightParenthesisKeyword_2_2()));
		match_RegExpGrouping_LeftParenthesisKeyword_1_0_a = new TokenAlias(true, true, grammarAccess.getRegExpGroupingAccess().getLeftParenthesisKeyword_1_0());
		match_RegExpGrouping_LeftParenthesisKeyword_1_0_p = new TokenAlias(true, false, grammarAccess.getRegExpGroupingAccess().getLeftParenthesisKeyword_1_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal ID returns ecore::EString:
	 * 	('a'..'z' | 'A'..'Z' | '_' | '$') ('a'..'z' | 'A'..'Z' | '0'..'9' | '_' | '$')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_AstAction_DoKeyword_9_0_q.equals(syntax))
				emit_AstAction_DoKeyword_9_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AstExpressionLambda_EndKeyword_10_0_or_EndlambdaKeyword_10_1.equals(syntax))
				emit_AstExpressionLambda_EndKeyword_10_0_or_EndlambdaKeyword_10_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AstExpressionLet_EndKeyword_4_0_or_EndletKeyword_4_1.equals(syntax))
				emit_AstExpressionLet_EndKeyword_4_0_or_EndletKeyword_4_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AstExpressionPostfix_LeftParenthesisKeyword_10_0_a.equals(syntax))
				emit_AstExpressionPostfix_LeftParenthesisKeyword_10_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AstExpressionPostfix_LeftParenthesisKeyword_10_0_p.equals(syntax))
				emit_AstExpressionPostfix_LeftParenthesisKeyword_10_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AstExpressionProc_BeginKeyword_6_0_or_DoKeyword_6_1.equals(syntax))
				emit_AstExpressionProc_BeginKeyword_6_0_or_DoKeyword_6_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AstExpressionProc_EndKeyword_8_0_or_EndprocKeyword_8_1.equals(syntax))
				emit_AstExpressionProc_EndKeyword_8_0_or_EndprocKeyword_8_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AstInitialize_DoKeyword_8_0_q.equals(syntax))
				emit_AstInitialize_DoKeyword_8_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AstInvariant_EndKeyword_3_0_or_EndinvariantKeyword_3_1.equals(syntax))
				emit_AstInvariant_EndKeyword_3_0_or_EndinvariantKeyword_3_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AstProcedure_BeginKeyword_8_0_q.equals(syntax))
				emit_AstProcedure_BeginKeyword_8_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AstSchedule_EndKeyword_5_0_or_EndscheduleKeyword_5_1.equals(syntax))
				emit_AstSchedule_EndKeyword_5_0_or_EndscheduleKeyword_5_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AstStatementIf_ElseKeyword_5_0_q.equals(syntax))
				emit_AstStatementIf_ElseKeyword_5_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AstStructureStatementConnection___LeftCurlyBracketKeyword_5_0_RightCurlyBracketKeyword_5_2__q.equals(syntax))
				emit_AstStructureStatementConnection___LeftCurlyBracketKeyword_5_0_RightCurlyBracketKeyword_5_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AstStructureStatementIf_ElseKeyword_5_0_q.equals(syntax))
				emit_AstStructureStatementIf_ElseKeyword_5_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AstTaggedTuple___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q.equals(syntax))
				emit_AstTaggedTuple___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AstTypeDefinition___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q.equals(syntax))
				emit_AstTypeDefinition___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RegExpGrouping_LeftParenthesisKeyword_1_0_a.equals(syntax))
				emit_RegExpGrouping_LeftParenthesisKeyword_1_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RegExpGrouping_LeftParenthesisKeyword_1_0_p.equals(syntax))
				emit_RegExpGrouping_LeftParenthesisKeyword_1_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'do'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'action' '==>' (ambiguity) 'end' (rule start)
	 *     annotations+=AstAnnotation 'action' '==>' (ambiguity) 'end' (rule end)
	 *     guards+=AstExpression (ambiguity) 'end' (rule end)
	 *     inputs+=AstInputPattern '==>' (ambiguity) 'end' (rule end)
	 *     outputs+=AstOutputExpression (ambiguity) 'end' (rule end)
	 *     tag=AstTag ':' 'action' '==>' (ambiguity) 'end' (rule end)
	 *     variables+=AstValuedVariableDeclaration (ambiguity) 'end' (rule end)
	 */
	protected void emit_AstAction_DoKeyword_9_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'end' | 'endlambda'
	 *
	 * This ambiguous syntax occurs at:
	 *     expression=AstExpression (ambiguity) (rule end)
	 */
	protected void emit_AstExpressionLambda_EndKeyword_10_0_or_EndlambdaKeyword_10_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'end' | 'endlet'
	 *
	 * This ambiguous syntax occurs at:
	 *     expr=AstExpression (ambiguity) (rule end)
	 */
	protected void emit_AstExpressionLet_EndKeyword_4_0_or_EndletKeyword_4_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '[' expressions+=AstExpression
	 *     (rule start) (ambiguity) 'case' expression=AstExpressionSymbolReference
	 *     (rule start) (ambiguity) 'if' condition=AstExpression
	 *     (rule start) (ambiguity) 'lambda' name=ID
	 *     (rule start) (ambiguity) 'let' ':' expr=AstExpression
	 *     (rule start) (ambiguity) 'let' variables+=AstValuedVariableDeclaration
	 *     (rule start) (ambiguity) 'map' '{' ':' generator=AstGenerator
	 *     (rule start) (ambiguity) 'map' '{' '}' (rule start)
	 *     (rule start) (ambiguity) 'map' '{' mappings+=Mapping
	 *     (rule start) (ambiguity) 'proc' name=ID
	 *     (rule start) (ambiguity) '{' ':' generator=AstGenerator
	 *     (rule start) (ambiguity) '{' '}' (rule start)
	 *     (rule start) (ambiguity) '{' exprs+=AstExpression
	 *     (rule start) (ambiguity) annotations+=AstAnnotation
	 *     (rule start) (ambiguity) symbol=[AstVariable|ID]
	 *     (rule start) (ambiguity) unaryOperator='#'
	 *     (rule start) (ambiguity) unaryOperator='-'
	 *     (rule start) (ambiguity) unaryOperator='not'
	 *     (rule start) (ambiguity) unaryOperator='old'
	 *     (rule start) (ambiguity) unaryOperator='~'
	 *     (rule start) (ambiguity) value=BOOL
	 *     (rule start) (ambiguity) value=DECIMAL
	 *     (rule start) (ambiguity) value=HEX
	 *     (rule start) (ambiguity) value=OCTAL
	 *     (rule start) (ambiguity) value=REAL
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) {AstExpressionAssertion.target=}
	 *     (rule start) (ambiguity) {AstExpressionBinary.left=}
	 */
	protected void emit_AstExpressionPostfix_LeftParenthesisKeyword_10_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) unaryOperator='#'
	 *     (rule start) (ambiguity) unaryOperator='-'
	 *     (rule start) (ambiguity) unaryOperator='not'
	 *     (rule start) (ambiguity) unaryOperator='old'
	 *     (rule start) (ambiguity) unaryOperator='~'
	 *     (rule start) (ambiguity) {AstExpressionAssertion.target=}
	 *     (rule start) (ambiguity) {AstExpressionBinary.left=}
	 */
	protected void emit_AstExpressionPostfix_LeftParenthesisKeyword_10_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'begin' | 'do'
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID '(' ')' (ambiguity) ('end' | 'endproc') (rule end)
	 *     name=ID '(' ')' (ambiguity) statements+=AstStatement
	 *     parameters+=AstVariableDeclaration ')' (ambiguity) ('end' | 'endproc') (rule end)
	 *     parameters+=AstVariableDeclaration ')' (ambiguity) statements+=AstStatement
	 *     variables+=AstValuedVariableDeclaration (ambiguity) ('end' | 'endproc') (rule end)
	 *     variables+=AstValuedVariableDeclaration (ambiguity) statements+=AstStatement
	 */
	protected void emit_AstExpressionProc_BeginKeyword_6_0_or_DoKeyword_6_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'end' | 'endproc'
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID '(' ')' ('begin' | 'do') (ambiguity) (rule end)
	 *     parameters+=AstVariableDeclaration ')' ('begin' | 'do') (ambiguity) (rule end)
	 *     statements+=AstStatement (ambiguity) (rule end)
	 *     variables+=AstValuedVariableDeclaration ('begin' | 'do') (ambiguity) (rule end)
	 */
	protected void emit_AstExpressionProc_EndKeyword_8_0_or_EndprocKeyword_8_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'do'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'initialize' '==>' (ambiguity) 'end' (rule start)
	 *     annotations+=AstAnnotation 'initialize' '==>' (ambiguity) 'end' (rule end)
	 *     guards+=AstExpression (ambiguity) 'end' (rule end)
	 *     outputs+=AstOutputExpression (ambiguity) 'end' (rule end)
	 *     tag=AstTag ':' 'initialize' '==>' (ambiguity) 'end' (rule end)
	 *     variables+=AstValuedVariableDeclaration (ambiguity) 'end' (rule end)
	 */
	protected void emit_AstInitialize_DoKeyword_8_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'end' | 'endinvariant'
	 *
	 * This ambiguous syntax occurs at:
	 *     invariants+=AstExpression (ambiguity) (rule end)
	 */
	protected void emit_AstInvariant_EndKeyword_3_0_or_EndinvariantKeyword_3_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'begin'?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID '(' ')' (ambiguity) 'end' (rule end)
	 *     parameters+=AstVariableDeclaration ')' (ambiguity) 'end' (rule end)
	 *     variables+=AstValuedVariableDeclaration (ambiguity) 'end' (rule end)
	 */
	protected void emit_AstProcedure_BeginKeyword_8_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'end' | 'endschedule'
	 *
	 * This ambiguous syntax occurs at:
	 *     initialState=[AstState|ID] ':' (ambiguity) (rule end)
	 *     transitions+=AstTransition (ambiguity) (rule end)
	 */
	protected void emit_AstSchedule_EndKeyword_5_0_or_EndscheduleKeyword_5_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'else'?
	 *
	 * This ambiguous syntax occurs at:
	 *     condition=AstExpression 'then' (ambiguity) 'end' (rule end)
	 *     elsifs+=AstStatementElsif (ambiguity) 'end' (rule end)
	 *     then+=AstStatement (ambiguity) 'end' (rule end)
	 */
	protected void emit_AstStatementIf_ElseKeyword_5_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     inPort=ID (ambiguity) ';' (rule end)
	 */
	protected void emit_AstStructureStatementConnection___LeftCurlyBracketKeyword_5_0_RightCurlyBracketKeyword_5_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'else'?
	 *
	 * This ambiguous syntax occurs at:
	 *     condition=AstExpression 'then' (ambiguity) 'end' (rule end)
	 *     elsifs+=AstStructureStatementElsif (ambiguity) 'end' (rule end)
	 *     then+=AstStructureStatement (ambiguity) 'end' (rule end)
	 */
	protected void emit_AstStructureStatementIf_ElseKeyword_5_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) (rule end)
	 */
	protected void emit_AstTaggedTuple___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) ':' tuples+=AstTaggedTuple
	 *     name=ID (ambiguity) ':' tuples+=AstTuple
	 */
	protected void emit_AstTypeDefinition___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) tag=AstTag
	 *     (rule start) (ambiguity) {RegExpBinary.left=}
	 *     (rule start) (ambiguity) {RegExpUnary.child=}
	 */
	protected void emit_RegExpGrouping_LeftParenthesisKeyword_1_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) {RegExpBinary.left=}
	 *     (rule start) (ambiguity) {RegExpUnary.child=}
	 */
	protected void emit_RegExpGrouping_LeftParenthesisKeyword_1_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}

/*
 * generated by Xtext 2.21.0
 */
package streamblocks.eclipse.cal.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CalGrammarAccess extends AbstractGrammarElementFinder {
	
	public class CompilationUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.CompilationUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAstPackageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAstNamespaceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// -- /////////////////////////////////////////////////////////////////////////////
		//// RVC compatibility layer
		//// -- /////////////////////////////////////////////////////////////////////////////
		//CompilationUnit:
		//	AstPackage | AstNamespace;
		@Override public ParserRule getRule() { return rule; }
		
		//AstPackage | AstNamespace
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AstPackage
		public RuleCall getAstPackageParserRuleCall_0() { return cAstPackageParserRuleCall_0; }
		
		//AstNamespace
		public RuleCall getAstNamespaceParserRuleCall_1() { return cAstNamespaceParserRuleCall_1; }
	}
	public class AstPackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstPackage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstNamespaceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRvcAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRvcPackageKeyword_1_0 = (Keyword)cRvcAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cEntitiesAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cEntitiesAstEntityParserRuleCall_4_0_0 = (RuleCall)cEntitiesAssignment_4_0.eContents().get(0);
		private final Assignment cImportsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cImportsRvcImportParserRuleCall_4_1_0 = (RuleCall)cImportsAssignment_4_1.eContents().get(0);
		private final Assignment cUnitsAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final RuleCall cUnitsAstUnitParserRuleCall_4_2_0 = (RuleCall)cUnitsAssignment_4_2.eContents().get(0);
		
		//AstPackage:
		//	{AstNamespace} rvc?='package' name=QualifiedName ';' (entities+=AstEntity
		//	| imports+=RvcImport
		//	| units+=AstUnit)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{AstNamespace} rvc?='package' name=QualifiedName ';' (entities+=AstEntity | imports+=RvcImport | units+=AstUnit)*
		public Group getGroup() { return cGroup; }
		
		//{AstNamespace}
		public Action getAstNamespaceAction_0() { return cAstNamespaceAction_0; }
		
		//rvc?='package'
		public Assignment getRvcAssignment_1() { return cRvcAssignment_1; }
		
		//'package'
		public Keyword getRvcPackageKeyword_1_0() { return cRvcPackageKeyword_1_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//(entities+=AstEntity | imports+=RvcImport | units+=AstUnit)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//entities+=AstEntity
		public Assignment getEntitiesAssignment_4_0() { return cEntitiesAssignment_4_0; }
		
		//AstEntity
		public RuleCall getEntitiesAstEntityParserRuleCall_4_0_0() { return cEntitiesAstEntityParserRuleCall_4_0_0; }
		
		//imports+=RvcImport
		public Assignment getImportsAssignment_4_1() { return cImportsAssignment_4_1; }
		
		//RvcImport
		public RuleCall getImportsRvcImportParserRuleCall_4_1_0() { return cImportsRvcImportParserRuleCall_4_1_0; }
		
		//units+=AstUnit
		public Assignment getUnitsAssignment_4_2() { return cUnitsAssignment_4_2; }
		
		//AstUnit
		public RuleCall getUnitsAstUnitParserRuleCall_4_2_0() { return cUnitsAstUnitParserRuleCall_4_2_0; }
	}
	public class AstUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstNamespaceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRvcAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRvcUnitKeyword_1_0 = (Keyword)cRvcAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cFunctionsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cFunctionsAstFunctionParserRuleCall_4_0_0 = (RuleCall)cFunctionsAssignment_4_0.eContents().get(0);
		private final Assignment cProceduresAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cProceduresAstProcedureParserRuleCall_4_1_0 = (RuleCall)cProceduresAssignment_4_1.eContents().get(0);
		private final Assignment cVariablesAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final RuleCall cVariablesAstConstantVariableParserRuleCall_4_2_0 = (RuleCall)cVariablesAssignment_4_2.eContents().get(0);
		private final Assignment cExternalsAssignment_4_3 = (Assignment)cAlternatives_4.eContents().get(3);
		private final Alternatives cExternalsAlternatives_4_3_0 = (Alternatives)cExternalsAssignment_4_3.eContents().get(0);
		private final RuleCall cExternalsAstExternalVariableParserRuleCall_4_3_0_0 = (RuleCall)cExternalsAlternatives_4_3_0.eContents().get(0);
		private final RuleCall cExternalsAstExternalFunctionParserRuleCall_4_3_0_1 = (RuleCall)cExternalsAlternatives_4_3_0.eContents().get(1);
		private final RuleCall cExternalsAstExternalProcedureParserRuleCall_4_3_0_2 = (RuleCall)cExternalsAlternatives_4_3_0.eContents().get(2);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AstUnit:
		//	{AstNamespace} rvc?='unit' name=QualifiedName ':' (functions+=AstFunction
		//	| procedures+=AstProcedure
		//	| variables+=AstConstantVariable
		//	| externals+=(AstExternalVariable | AstExternalFunction | AstExternalProcedure))*
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{AstNamespace} rvc?='unit' name=QualifiedName ':' (functions+=AstFunction | procedures+=AstProcedure |
		//variables+=AstConstantVariable | externals+=(AstExternalVariable | AstExternalFunction | AstExternalProcedure))* 'end'
		public Group getGroup() { return cGroup; }
		
		//{AstNamespace}
		public Action getAstNamespaceAction_0() { return cAstNamespaceAction_0; }
		
		//rvc?='unit'
		public Assignment getRvcAssignment_1() { return cRvcAssignment_1; }
		
		//'unit'
		public Keyword getRvcUnitKeyword_1_0() { return cRvcUnitKeyword_1_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//(functions+=AstFunction | procedures+=AstProcedure | variables+=AstConstantVariable | externals+=(AstExternalVariable |
		//AstExternalFunction | AstExternalProcedure))*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//functions+=AstFunction
		public Assignment getFunctionsAssignment_4_0() { return cFunctionsAssignment_4_0; }
		
		//AstFunction
		public RuleCall getFunctionsAstFunctionParserRuleCall_4_0_0() { return cFunctionsAstFunctionParserRuleCall_4_0_0; }
		
		//procedures+=AstProcedure
		public Assignment getProceduresAssignment_4_1() { return cProceduresAssignment_4_1; }
		
		//AstProcedure
		public RuleCall getProceduresAstProcedureParserRuleCall_4_1_0() { return cProceduresAstProcedureParserRuleCall_4_1_0; }
		
		//variables+=AstConstantVariable
		public Assignment getVariablesAssignment_4_2() { return cVariablesAssignment_4_2; }
		
		//AstConstantVariable
		public RuleCall getVariablesAstConstantVariableParserRuleCall_4_2_0() { return cVariablesAstConstantVariableParserRuleCall_4_2_0; }
		
		//externals+=(AstExternalVariable | AstExternalFunction | AstExternalProcedure)
		public Assignment getExternalsAssignment_4_3() { return cExternalsAssignment_4_3; }
		
		//(AstExternalVariable | AstExternalFunction | AstExternalProcedure)
		public Alternatives getExternalsAlternatives_4_3_0() { return cExternalsAlternatives_4_3_0; }
		
		//AstExternalVariable
		public RuleCall getExternalsAstExternalVariableParserRuleCall_4_3_0_0() { return cExternalsAstExternalVariableParserRuleCall_4_3_0_0; }
		
		//AstExternalFunction
		public RuleCall getExternalsAstExternalFunctionParserRuleCall_4_3_0_1() { return cExternalsAstExternalFunctionParserRuleCall_4_3_0_1; }
		
		//AstExternalProcedure
		public RuleCall getExternalsAstExternalProcedureParserRuleCall_4_3_0_2() { return cExternalsAstExternalProcedureParserRuleCall_4_3_0_2; }
		
		//'end'
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}
	public class AstNamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstNamespace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAstAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cNamespaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cFunctionsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cFunctionsAstFunctionParserRuleCall_4_0_0 = (RuleCall)cFunctionsAssignment_4_0.eContents().get(0);
		private final Assignment cProceduresAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cProceduresAstProcedureParserRuleCall_4_1_0 = (RuleCall)cProceduresAssignment_4_1.eContents().get(0);
		private final Assignment cVariablesAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final RuleCall cVariablesAstConstantVariableParserRuleCall_4_2_0 = (RuleCall)cVariablesAssignment_4_2.eContents().get(0);
		private final Assignment cExternalsAssignment_4_3 = (Assignment)cAlternatives_4.eContents().get(3);
		private final Alternatives cExternalsAlternatives_4_3_0 = (Alternatives)cExternalsAssignment_4_3.eContents().get(0);
		private final RuleCall cExternalsAstExternalVariableParserRuleCall_4_3_0_0 = (RuleCall)cExternalsAlternatives_4_3_0.eContents().get(0);
		private final RuleCall cExternalsAstExternalFunctionParserRuleCall_4_3_0_1 = (RuleCall)cExternalsAlternatives_4_3_0.eContents().get(1);
		private final RuleCall cExternalsAstExternalProcedureParserRuleCall_4_3_0_2 = (RuleCall)cExternalsAlternatives_4_3_0.eContents().get(2);
		private final Assignment cTypedefsAssignment_4_4 = (Assignment)cAlternatives_4.eContents().get(4);
		private final RuleCall cTypedefsAstTypeDefinitionParserRuleCall_4_4_0 = (RuleCall)cTypedefsAssignment_4_4.eContents().get(0);
		private final Assignment cImportsAssignment_4_5 = (Assignment)cAlternatives_4.eContents().get(5);
		private final RuleCall cImportsImportParserRuleCall_4_5_0 = (RuleCall)cImportsAssignment_4_5.eContents().get(0);
		private final Assignment cEntitiesAssignment_4_6 = (Assignment)cAlternatives_4.eContents().get(6);
		private final RuleCall cEntitiesAstEntityParserRuleCall_4_6_0 = (RuleCall)cEntitiesAssignment_4_6.eContents().get(0);
		private final Assignment cNamespacesAssignment_4_7 = (Assignment)cAlternatives_4.eContents().get(7);
		private final RuleCall cNamespacesAstNamespaceParserRuleCall_4_7_0 = (RuleCall)cNamespacesAssignment_4_7.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// -- /////////////////////////////////////////////////////////////////////////////
		//// -- Namespace
		//// -- /////////////////////////////////////////////////////////////////////////////
		//AstNamespace:
		//	annotations+=AstAnnotation*
		//	'namespace' name=QualifiedName ':' (functions+=AstFunction
		//	| procedures+=AstProcedure
		//	| variables+=AstConstantVariable
		//	| externals+=(AstExternalVariable | AstExternalFunction | AstExternalProcedure) | typedefs+=AstTypeDefinition
		//	| imports+=Import
		//	| entities+=AstEntity
		//	| namespaces+=AstNamespace)*
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=AstAnnotation* 'namespace' name=QualifiedName ':' (functions+=AstFunction | procedures+=AstProcedure |
		//variables+=AstConstantVariable | externals+=(AstExternalVariable | AstExternalFunction | AstExternalProcedure) |
		//typedefs+=AstTypeDefinition | imports+=Import | entities+=AstEntity | namespaces+=AstNamespace)* 'end'
		public Group getGroup() { return cGroup; }
		
		//annotations+=AstAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//AstAnnotation
		public RuleCall getAnnotationsAstAnnotationParserRuleCall_0_0() { return cAnnotationsAstAnnotationParserRuleCall_0_0; }
		
		//'namespace'
		public Keyword getNamespaceKeyword_1() { return cNamespaceKeyword_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//(functions+=AstFunction | procedures+=AstProcedure | variables+=AstConstantVariable | externals+=(AstExternalVariable |
		//AstExternalFunction | AstExternalProcedure) | typedefs+=AstTypeDefinition | imports+=Import | entities+=AstEntity |
		//namespaces+=AstNamespace)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//functions+=AstFunction
		public Assignment getFunctionsAssignment_4_0() { return cFunctionsAssignment_4_0; }
		
		//AstFunction
		public RuleCall getFunctionsAstFunctionParserRuleCall_4_0_0() { return cFunctionsAstFunctionParserRuleCall_4_0_0; }
		
		//procedures+=AstProcedure
		public Assignment getProceduresAssignment_4_1() { return cProceduresAssignment_4_1; }
		
		//AstProcedure
		public RuleCall getProceduresAstProcedureParserRuleCall_4_1_0() { return cProceduresAstProcedureParserRuleCall_4_1_0; }
		
		//variables+=AstConstantVariable
		public Assignment getVariablesAssignment_4_2() { return cVariablesAssignment_4_2; }
		
		//AstConstantVariable
		public RuleCall getVariablesAstConstantVariableParserRuleCall_4_2_0() { return cVariablesAstConstantVariableParserRuleCall_4_2_0; }
		
		//externals+=(AstExternalVariable | AstExternalFunction | AstExternalProcedure)
		public Assignment getExternalsAssignment_4_3() { return cExternalsAssignment_4_3; }
		
		//(AstExternalVariable | AstExternalFunction | AstExternalProcedure)
		public Alternatives getExternalsAlternatives_4_3_0() { return cExternalsAlternatives_4_3_0; }
		
		//AstExternalVariable
		public RuleCall getExternalsAstExternalVariableParserRuleCall_4_3_0_0() { return cExternalsAstExternalVariableParserRuleCall_4_3_0_0; }
		
		//AstExternalFunction
		public RuleCall getExternalsAstExternalFunctionParserRuleCall_4_3_0_1() { return cExternalsAstExternalFunctionParserRuleCall_4_3_0_1; }
		
		//AstExternalProcedure
		public RuleCall getExternalsAstExternalProcedureParserRuleCall_4_3_0_2() { return cExternalsAstExternalProcedureParserRuleCall_4_3_0_2; }
		
		//typedefs+=AstTypeDefinition
		public Assignment getTypedefsAssignment_4_4() { return cTypedefsAssignment_4_4; }
		
		//AstTypeDefinition
		public RuleCall getTypedefsAstTypeDefinitionParserRuleCall_4_4_0() { return cTypedefsAstTypeDefinitionParserRuleCall_4_4_0; }
		
		//imports+=Import
		public Assignment getImportsAssignment_4_5() { return cImportsAssignment_4_5; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_4_5_0() { return cImportsImportParserRuleCall_4_5_0; }
		
		//entities+=AstEntity
		public Assignment getEntitiesAssignment_4_6() { return cEntitiesAssignment_4_6; }
		
		//AstEntity
		public RuleCall getEntitiesAstEntityParserRuleCall_4_6_0() { return cEntitiesAstEntityParserRuleCall_4_6_0; }
		
		//namespaces+=AstNamespace
		public Assignment getNamespacesAssignment_4_7() { return cNamespacesAssignment_4_7; }
		
		//AstNamespace
		public RuleCall getNamespacesAstNamespaceParserRuleCall_4_7_0() { return cNamespacesAstNamespaceParserRuleCall_4_7_0; }
		
		//'end'
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}
	public class AstEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstEntity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAstAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cActorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActorAstAbstractActorParserRuleCall_1_0 = (RuleCall)cActorAssignment_1.eContents().get(0);
		
		//AstEntity:
		//	annotations+=AstAnnotation*
		//	actor=AstAbstractActor;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=AstAnnotation* actor=AstAbstractActor
		public Group getGroup() { return cGroup; }
		
		//annotations+=AstAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//AstAnnotation
		public RuleCall getAnnotationsAstAnnotationParserRuleCall_0_0() { return cAnnotationsAstAnnotationParserRuleCall_0_0; }
		
		//actor=AstAbstractActor
		public Assignment getActorAssignment_1() { return cActorAssignment_1; }
		
		//AstAbstractActor
		public RuleCall getActorAstAbstractActorParserRuleCall_1_0() { return cActorAstAbstractActorParserRuleCall_1_0; }
	}
	public class AstAbstractActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstAbstractActor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAstActorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAstNetworkParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAstExternalActorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AstAbstractActor:
		//	AstActor | AstNetwork | AstExternalActor;
		@Override public ParserRule getRule() { return rule; }
		
		//AstActor | AstNetwork | AstExternalActor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AstActor
		public RuleCall getAstActorParserRuleCall_0() { return cAstActorParserRuleCall_0; }
		
		//AstNetwork
		public RuleCall getAstNetworkParserRuleCall_1() { return cAstNetworkParserRuleCall_1; }
		
		//AstExternalActor
		public RuleCall getAstExternalActorParserRuleCall_2() { return cAstExternalActorParserRuleCall_2; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cGroupImportTailParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cSingleImportTailParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Import:
		//	'import' (GroupImportTail | SingleImportTail) ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'import' (GroupImportTail | SingleImportTail) ';'
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//(GroupImportTail | SingleImportTail)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//GroupImportTail
		public RuleCall getGroupImportTailParserRuleCall_1_0() { return cGroupImportTailParserRuleCall_1_0; }
		
		//SingleImportTail
		public RuleCall getSingleImportTailParserRuleCall_1_1() { return cSingleImportTailParserRuleCall_1_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class RvcImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.RvcImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//RvcImport:
		//	'import' importedNamespace=QualifiedNameWithWildCard ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=QualifiedNameWithWildCard ';'
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=QualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedNameWithWildCard
		public RuleCall getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class GroupImportTailElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.GroupImportTail");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAllKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKindAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKindImportKindEnumRuleCall_1_0 = (RuleCall)cKindAssignment_1.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportedNamespaceQualifiedNameParserRuleCall_2_0 = (RuleCall)cImportedNamespaceAssignment_2.eContents().get(0);
		
		//GroupImportTail:
		//	'all' kind=ImportKind? importedNamespace=QualifiedName;
		@Override public ParserRule getRule() { return rule; }
		
		//'all' kind=ImportKind? importedNamespace=QualifiedName
		public Group getGroup() { return cGroup; }
		
		//'all'
		public Keyword getAllKeyword_0() { return cAllKeyword_0; }
		
		//kind=ImportKind?
		public Assignment getKindAssignment_1() { return cKindAssignment_1; }
		
		//ImportKind
		public RuleCall getKindImportKindEnumRuleCall_1_0() { return cKindImportKindEnumRuleCall_1_0; }
		
		//importedNamespace=QualifiedName
		public Assignment getImportedNamespaceAssignment_2() { return cImportedNamespaceAssignment_2; }
		
		//QualifiedName
		public RuleCall getImportedNamespaceQualifiedNameParserRuleCall_2_0() { return cImportedNamespaceQualifiedNameParserRuleCall_2_0; }
	}
	public class SingleImportTailElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.SingleImportTail");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKindAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKindImportKindEnumRuleCall_0_0 = (RuleCall)cKindAssignment_0.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLocalNameTokenAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLocalNameTokenIDTerminalRuleCall_2_1_0 = (RuleCall)cLocalNameTokenAssignment_2_1.eContents().get(0);
		
		//SingleImportTail:
		//	kind=ImportKind? importedNamespace=QualifiedName ('=' localNameToken=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//kind=ImportKind? importedNamespace=QualifiedName ('=' localNameToken=ID)?
		public Group getGroup() { return cGroup; }
		
		//kind=ImportKind?
		public Assignment getKindAssignment_0() { return cKindAssignment_0; }
		
		//ImportKind
		public RuleCall getKindImportKindEnumRuleCall_0_0() { return cKindImportKindEnumRuleCall_0_0; }
		
		//importedNamespace=QualifiedName
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedName
		public RuleCall getImportedNamespaceQualifiedNameParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameParserRuleCall_1_0; }
		
		//('=' localNameToken=ID)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//localNameToken=ID
		public Assignment getLocalNameTokenAssignment_2_1() { return cLocalNameTokenAssignment_2_1; }
		
		//ID
		public RuleCall getLocalNameTokenIDTerminalRuleCall_2_1_0() { return cLocalNameTokenIDTerminalRuleCall_2_1_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class QualifiedNameWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.QualifiedNameWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildCard:
		//	QualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class AstNetworkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstNetwork");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstNetworkAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNetworkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParametersAstParameterParserRuleCall_4_0_0 = (RuleCall)cParametersAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParametersAstParameterParserRuleCall_4_1_1_0 = (RuleCall)cParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cInputsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cInputsAstPortParserRuleCall_6_0_0 = (RuleCall)cInputsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cInputsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cInputsAstPortParserRuleCall_6_1_1_0 = (RuleCall)cInputsAssignment_6_1_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignGreaterThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cOutputsAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cOutputsAstPortParserRuleCall_8_0_0 = (RuleCall)cOutputsAssignment_8_0.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cGroup_8.eContents().get(1);
		private final Keyword cCommaKeyword_8_1_0 = (Keyword)cGroup_8_1.eContents().get(0);
		private final Assignment cOutputsAssignment_8_1_1 = (Assignment)cGroup_8_1.eContents().get(1);
		private final RuleCall cOutputsAstPortParserRuleCall_8_1_1_0 = (RuleCall)cOutputsAssignment_8_1_1.eContents().get(0);
		private final Keyword cColonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cVarKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cVariablesAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cVariablesAstValuedVariableDeclarationParserRuleCall_10_1_0 = (RuleCall)cVariablesAssignment_10_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final Group cGroup_10_3 = (Group)cGroup_10.eContents().get(3);
		private final Assignment cVariablesAssignment_10_3_0 = (Assignment)cGroup_10_3.eContents().get(0);
		private final RuleCall cVariablesAstValuedVariableDeclarationParserRuleCall_10_3_0_0 = (RuleCall)cVariablesAssignment_10_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_10_3_1 = (Keyword)cGroup_10_3.eContents().get(1);
		private final Keyword cEntitiesKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cEntitiesAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cEntitiesAstEntityDeclarationParserRuleCall_12_0 = (RuleCall)cEntitiesAssignment_12.eContents().get(0);
		private final Assignment cStructureAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cStructureAstStructureParserRuleCall_13_0 = (RuleCall)cStructureAssignment_13.eContents().get(0);
		private final Keyword cEndKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//// -- /////////////////////////////////////////////////////////////////////////////
		//// -- Network
		//// -- /////////////////////////////////////////////////////////////////////////////
		//AstNetwork:
		//	{AstNetwork}
		//	'network' name=ID
		//	'(' (parameters+=AstParameter (',' parameters+=AstParameter)*)? ')' (inputs+=AstPort (',' inputs+=AstPort)*)? '==>'
		//	(outputs+=AstPort (',' outputs+=AstPort)*)? ':' ('var'
		//	variables+=AstValuedVariableDeclaration ';' (variables+=AstValuedVariableDeclaration ';')*)?
		//	'entities'
		//	entities+=AstEntityDeclaration+
		//	structure=AstStructure?
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{AstNetwork} 'network' name=ID '(' (parameters+=AstParameter (',' parameters+=AstParameter)*)? ')' (inputs+=AstPort (','
		//inputs+=AstPort)*)? '==>' (outputs+=AstPort (',' outputs+=AstPort)*)? ':' ('var'
		//variables+=AstValuedVariableDeclaration ';' (variables+=AstValuedVariableDeclaration ';')*)? 'entities'
		//entities+=AstEntityDeclaration+ structure=AstStructure? 'end'
		public Group getGroup() { return cGroup; }
		
		//{AstNetwork}
		public Action getAstNetworkAction_0() { return cAstNetworkAction_0; }
		
		//'network'
		public Keyword getNetworkKeyword_1() { return cNetworkKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(parameters+=AstParameter (',' parameters+=AstParameter)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//parameters+=AstParameter
		public Assignment getParametersAssignment_4_0() { return cParametersAssignment_4_0; }
		
		//AstParameter
		public RuleCall getParametersAstParameterParserRuleCall_4_0_0() { return cParametersAstParameterParserRuleCall_4_0_0; }
		
		//(',' parameters+=AstParameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//parameters+=AstParameter
		public Assignment getParametersAssignment_4_1_1() { return cParametersAssignment_4_1_1; }
		
		//AstParameter
		public RuleCall getParametersAstParameterParserRuleCall_4_1_1_0() { return cParametersAstParameterParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//(inputs+=AstPort (',' inputs+=AstPort)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//inputs+=AstPort
		public Assignment getInputsAssignment_6_0() { return cInputsAssignment_6_0; }
		
		//AstPort
		public RuleCall getInputsAstPortParserRuleCall_6_0_0() { return cInputsAstPortParserRuleCall_6_0_0; }
		
		//(',' inputs+=AstPort)*
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//','
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }
		
		//inputs+=AstPort
		public Assignment getInputsAssignment_6_1_1() { return cInputsAssignment_6_1_1; }
		
		//AstPort
		public RuleCall getInputsAstPortParserRuleCall_6_1_1_0() { return cInputsAstPortParserRuleCall_6_1_1_0; }
		
		//'==>'
		public Keyword getEqualsSignEqualsSignGreaterThanSignKeyword_7() { return cEqualsSignEqualsSignGreaterThanSignKeyword_7; }
		
		//(outputs+=AstPort (',' outputs+=AstPort)*)?
		public Group getGroup_8() { return cGroup_8; }
		
		//outputs+=AstPort
		public Assignment getOutputsAssignment_8_0() { return cOutputsAssignment_8_0; }
		
		//AstPort
		public RuleCall getOutputsAstPortParserRuleCall_8_0_0() { return cOutputsAstPortParserRuleCall_8_0_0; }
		
		//(',' outputs+=AstPort)*
		public Group getGroup_8_1() { return cGroup_8_1; }
		
		//','
		public Keyword getCommaKeyword_8_1_0() { return cCommaKeyword_8_1_0; }
		
		//outputs+=AstPort
		public Assignment getOutputsAssignment_8_1_1() { return cOutputsAssignment_8_1_1; }
		
		//AstPort
		public RuleCall getOutputsAstPortParserRuleCall_8_1_1_0() { return cOutputsAstPortParserRuleCall_8_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_9() { return cColonKeyword_9; }
		
		//('var' variables+=AstValuedVariableDeclaration ';' (variables+=AstValuedVariableDeclaration ';')*)?
		public Group getGroup_10() { return cGroup_10; }
		
		//'var'
		public Keyword getVarKeyword_10_0() { return cVarKeyword_10_0; }
		
		//variables+=AstValuedVariableDeclaration
		public Assignment getVariablesAssignment_10_1() { return cVariablesAssignment_10_1; }
		
		//AstValuedVariableDeclaration
		public RuleCall getVariablesAstValuedVariableDeclarationParserRuleCall_10_1_0() { return cVariablesAstValuedVariableDeclarationParserRuleCall_10_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_10_2() { return cSemicolonKeyword_10_2; }
		
		//(variables+=AstValuedVariableDeclaration ';')*
		public Group getGroup_10_3() { return cGroup_10_3; }
		
		//variables+=AstValuedVariableDeclaration
		public Assignment getVariablesAssignment_10_3_0() { return cVariablesAssignment_10_3_0; }
		
		//AstValuedVariableDeclaration
		public RuleCall getVariablesAstValuedVariableDeclarationParserRuleCall_10_3_0_0() { return cVariablesAstValuedVariableDeclarationParserRuleCall_10_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_10_3_1() { return cSemicolonKeyword_10_3_1; }
		
		//'entities'
		public Keyword getEntitiesKeyword_11() { return cEntitiesKeyword_11; }
		
		//entities+=AstEntityDeclaration+
		public Assignment getEntitiesAssignment_12() { return cEntitiesAssignment_12; }
		
		//AstEntityDeclaration
		public RuleCall getEntitiesAstEntityDeclarationParserRuleCall_12_0() { return cEntitiesAstEntityDeclarationParserRuleCall_12_0; }
		
		//structure=AstStructure?
		public Assignment getStructureAssignment_13() { return cStructureAssignment_13; }
		
		//AstStructure
		public RuleCall getStructureAstStructureParserRuleCall_13_0() { return cStructureAstStructureParserRuleCall_13_0; }
		
		//'end'
		public Keyword getEndKeyword_14() { return cEndKeyword_14; }
	}
	public class AstEntityDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstEntityDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEntityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEntityAstEntityExprParserRuleCall_2_0 = (RuleCall)cEntityAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// -- AstExprEntity
		//AstEntityDeclaration AstEntityVariable:
		//	name=ID '=' entity=AstEntityExpr ';';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '=' entity=AstEntityExpr ';'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//entity=AstEntityExpr
		public Assignment getEntityAssignment_2() { return cEntityAssignment_2; }
		
		//AstEntityExpr
		public RuleCall getEntityAstEntityExprParserRuleCall_2_0() { return cEntityAstEntityExprParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class AstEntityExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstEntityExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAstEntityInstanceExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAstEntityIfExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAstEntityListExprParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AstEntityExpr:
		//	AstEntityInstanceExpr
		//	| AstEntityIfExpr
		//	| AstEntityListExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//AstEntityInstanceExpr | AstEntityIfExpr | AstEntityListExpr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AstEntityInstanceExpr
		public RuleCall getAstEntityInstanceExprParserRuleCall_0() { return cAstEntityInstanceExprParserRuleCall_0; }
		
		//AstEntityIfExpr
		public RuleCall getAstEntityIfExprParserRuleCall_1() { return cAstEntityIfExprParserRuleCall_1; }
		
		//AstEntityListExpr
		public RuleCall getAstEntityListExprParserRuleCall_2() { return cAstEntityListExprParserRuleCall_2; }
	}
	public class AstEntityInstanceExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstEntityInstanceExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeAstEntityCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeAstEntityQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeAstEntityCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametersAstAssignParameterParserRuleCall_2_0_0 = (RuleCall)cParametersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametersAstAssignParameterParserRuleCall_2_1_1_0 = (RuleCall)cParametersAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AstEntityInstanceExpr:
		//	type=[AstEntity|QualifiedName] '(' (parameters+=AstAssignParameter (',' parameters+=AstAssignParameter)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//type=[AstEntity|QualifiedName] '(' (parameters+=AstAssignParameter (',' parameters+=AstAssignParameter)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//type=[AstEntity|QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[AstEntity|QualifiedName]
		public CrossReference getTypeAstEntityCrossReference_0_0() { return cTypeAstEntityCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getTypeAstEntityQualifiedNameParserRuleCall_0_0_1() { return cTypeAstEntityQualifiedNameParserRuleCall_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(parameters+=AstAssignParameter (',' parameters+=AstAssignParameter)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//parameters+=AstAssignParameter
		public Assignment getParametersAssignment_2_0() { return cParametersAssignment_2_0; }
		
		//AstAssignParameter
		public RuleCall getParametersAstAssignParameterParserRuleCall_2_0_0() { return cParametersAstAssignParameterParserRuleCall_2_0_0; }
		
		//(',' parameters+=AstAssignParameter)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//parameters+=AstAssignParameter
		public Assignment getParametersAssignment_2_1_1() { return cParametersAssignment_2_1_1; }
		
		//AstAssignParameter
		public RuleCall getParametersAstAssignParameterParserRuleCall_2_1_1_0() { return cParametersAstAssignParameterParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class AstAssignParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstAssignParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueAstExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//AstAssignParameter:
		//	name=ID "=" value=AstExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID "=" value=AstExpression
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=AstExpression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//AstExpression
		public RuleCall getValueAstExpressionParserRuleCall_2_0() { return cValueAstExpressionParserRuleCall_2_0; }
	}
	public class AstEntityIfExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstEntityIfExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionAstExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTrueEntityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTrueEntityAstEntityExprParserRuleCall_3_0 = (RuleCall)cTrueEntityAssignment_3.eContents().get(0);
		private final Keyword cElseKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFalseEntityAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFalseEntityAstEntityExprParserRuleCall_5_0 = (RuleCall)cFalseEntityAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//AstEntityIfExpr:
		//	'if'
		//	condition=AstExpression
		//	'then'
		//	trueEntity=AstEntityExpr
		//	'else'
		//	falseEntity=AstEntityExpr
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'if' condition=AstExpression 'then' trueEntity=AstEntityExpr 'else' falseEntity=AstEntityExpr 'end'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//condition=AstExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//AstExpression
		public RuleCall getConditionAstExpressionParserRuleCall_1_0() { return cConditionAstExpressionParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//trueEntity=AstEntityExpr
		public Assignment getTrueEntityAssignment_3() { return cTrueEntityAssignment_3; }
		
		//AstEntityExpr
		public RuleCall getTrueEntityAstEntityExprParserRuleCall_3_0() { return cTrueEntityAstEntityExprParserRuleCall_3_0; }
		
		//'else'
		public Keyword getElseKeyword_4() { return cElseKeyword_4; }
		
		//falseEntity=AstEntityExpr
		public Assignment getFalseEntityAssignment_5() { return cFalseEntityAssignment_5; }
		
		//AstEntityExpr
		public RuleCall getFalseEntityAstEntityExprParserRuleCall_5_0() { return cFalseEntityAstEntityExprParserRuleCall_5_0; }
		
		//'end'
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}
	public class AstEntityListExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstEntityListExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprsAstEntityExprParserRuleCall_1_0 = (RuleCall)cExprsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExprsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprsAstEntityExprParserRuleCall_2_1_0 = (RuleCall)cExprsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cGeneratorAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cGeneratorAstGeneratorParserRuleCall_3_1_0 = (RuleCall)cGeneratorAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AstEntityListExpr:
		//	'[' exprs+=AstEntityExpr (',' exprs+=AstEntityExpr)* (':' generator=AstGenerator)? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' exprs+=AstEntityExpr (',' exprs+=AstEntityExpr)* (':' generator=AstGenerator)? ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//exprs+=AstEntityExpr
		public Assignment getExprsAssignment_1() { return cExprsAssignment_1; }
		
		//AstEntityExpr
		public RuleCall getExprsAstEntityExprParserRuleCall_1_0() { return cExprsAstEntityExprParserRuleCall_1_0; }
		
		//(',' exprs+=AstEntityExpr)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//exprs+=AstEntityExpr
		public Assignment getExprsAssignment_2_1() { return cExprsAssignment_2_1; }
		
		//AstEntityExpr
		public RuleCall getExprsAstEntityExprParserRuleCall_2_1_0() { return cExprsAstEntityExprParserRuleCall_2_1_0; }
		
		//(':' generator=AstGenerator)?
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//generator=AstGenerator
		public Assignment getGeneratorAssignment_3_1() { return cGeneratorAssignment_3_1; }
		
		//AstGenerator
		public RuleCall getGeneratorAstGeneratorParserRuleCall_3_1_0() { return cGeneratorAstGeneratorParserRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class AstStructureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstStructure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConnectionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConnectionsAstStructureStatementParserRuleCall_1_0 = (RuleCall)cConnectionsAssignment_1.eContents().get(0);
		
		//// -- AstStructure	
		//AstStructure:
		//	'structure'
		//	connections+=AstStructureStatement+;
		@Override public ParserRule getRule() { return rule; }
		
		//'structure' connections+=AstStructureStatement+
		public Group getGroup() { return cGroup; }
		
		//'structure'
		public Keyword getStructureKeyword_0() { return cStructureKeyword_0; }
		
		//connections+=AstStructureStatement+
		public Assignment getConnectionsAssignment_1() { return cConnectionsAssignment_1; }
		
		//AstStructureStatement
		public RuleCall getConnectionsAstStructureStatementParserRuleCall_1_0() { return cConnectionsAstStructureStatementParserRuleCall_1_0; }
	}
	public class AstStructureStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstStructureStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAstStructureStatementConnectionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAstStructureStatementForeachParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAstStructureStatementIfParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AstStructureStatement:
		//	AstStructureStatementConnection | AstStructureStatementForeach | AstStructureStatementIf;
		@Override public ParserRule getRule() { return rule; }
		
		//AstStructureStatementConnection | AstStructureStatementForeach | AstStructureStatementIf
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AstStructureStatementConnection
		public RuleCall getAstStructureStatementConnectionParserRuleCall_0() { return cAstStructureStatementConnectionParserRuleCall_0; }
		
		//AstStructureStatementForeach
		public RuleCall getAstStructureStatementForeachParserRuleCall_1() { return cAstStructureStatementForeachParserRuleCall_1; }
		
		//AstStructureStatementIf
		public RuleCall getAstStructureStatementIfParserRuleCall_2() { return cAstStructureStatementIfParserRuleCall_2; }
	}
	public class AstStructureStatementConnectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstStructureStatementConnection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cFromAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFromAstEntityVariableReferenceParserRuleCall_0_0_0 = (RuleCall)cFromAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cFromIndexesAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cFromIndexesAstExpressionParserRuleCall_0_1_1_0 = (RuleCall)cFromIndexesAssignment_0_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Keyword cFullStopKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cOutPortAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOutPortIDTerminalRuleCall_1_0 = (RuleCall)cOutPortAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cToAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cToAstEntityVariableReferenceParserRuleCall_3_0_0 = (RuleCall)cToAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cFromIndexesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cFromIndexesAstExpressionParserRuleCall_3_1_1_0 = (RuleCall)cFromIndexesAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		private final Keyword cFullStopKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cInPortAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInPortIDTerminalRuleCall_4_0 = (RuleCall)cInPortAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAttributeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAttributeAstConnectionAttributeParserRuleCall_5_1_0 = (RuleCall)cAttributeAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//AstStructureStatementConnection:
		//	(from=AstEntityVariableReference ('[' fromIndexes+=AstExpression ']')* '.')? outPort=ID
		//	'-->' (to=AstEntityVariableReference ('[' fromIndexes+=AstExpression ']')* '.')? inPort=ID ('{'
		//	attribute+=AstConnectionAttribute* '}')? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//(from=AstEntityVariableReference ('[' fromIndexes+=AstExpression ']')* '.')? outPort=ID '-->'
		//(to=AstEntityVariableReference ('[' fromIndexes+=AstExpression ']')* '.')? inPort=ID ('{'
		//attribute+=AstConnectionAttribute* '}')? ';'
		public Group getGroup() { return cGroup; }
		
		//(from=AstEntityVariableReference ('[' fromIndexes+=AstExpression ']')* '.')?
		public Group getGroup_0() { return cGroup_0; }
		
		//from=AstEntityVariableReference
		public Assignment getFromAssignment_0_0() { return cFromAssignment_0_0; }
		
		//AstEntityVariableReference
		public RuleCall getFromAstEntityVariableReferenceParserRuleCall_0_0_0() { return cFromAstEntityVariableReferenceParserRuleCall_0_0_0; }
		
		//('[' fromIndexes+=AstExpression ']')*
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_1_0() { return cLeftSquareBracketKeyword_0_1_0; }
		
		//fromIndexes+=AstExpression
		public Assignment getFromIndexesAssignment_0_1_1() { return cFromIndexesAssignment_0_1_1; }
		
		//AstExpression
		public RuleCall getFromIndexesAstExpressionParserRuleCall_0_1_1_0() { return cFromIndexesAstExpressionParserRuleCall_0_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_1_2() { return cRightSquareBracketKeyword_0_1_2; }
		
		//'.'
		public Keyword getFullStopKeyword_0_2() { return cFullStopKeyword_0_2; }
		
		//outPort=ID
		public Assignment getOutPortAssignment_1() { return cOutPortAssignment_1; }
		
		//ID
		public RuleCall getOutPortIDTerminalRuleCall_1_0() { return cOutPortIDTerminalRuleCall_1_0; }
		
		//'-->'
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_2; }
		
		//(to=AstEntityVariableReference ('[' fromIndexes+=AstExpression ']')* '.')?
		public Group getGroup_3() { return cGroup_3; }
		
		//to=AstEntityVariableReference
		public Assignment getToAssignment_3_0() { return cToAssignment_3_0; }
		
		//AstEntityVariableReference
		public RuleCall getToAstEntityVariableReferenceParserRuleCall_3_0_0() { return cToAstEntityVariableReferenceParserRuleCall_3_0_0; }
		
		//('[' fromIndexes+=AstExpression ']')*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_1_0() { return cLeftSquareBracketKeyword_3_1_0; }
		
		//fromIndexes+=AstExpression
		public Assignment getFromIndexesAssignment_3_1_1() { return cFromIndexesAssignment_3_1_1; }
		
		//AstExpression
		public RuleCall getFromIndexesAstExpressionParserRuleCall_3_1_1_0() { return cFromIndexesAstExpressionParserRuleCall_3_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_1_2() { return cRightSquareBracketKeyword_3_1_2; }
		
		//'.'
		public Keyword getFullStopKeyword_3_2() { return cFullStopKeyword_3_2; }
		
		//inPort=ID
		public Assignment getInPortAssignment_4() { return cInPortAssignment_4; }
		
		//ID
		public RuleCall getInPortIDTerminalRuleCall_4_0() { return cInPortIDTerminalRuleCall_4_0; }
		
		//('{' attribute+=AstConnectionAttribute* '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }
		
		//attribute+=AstConnectionAttribute*
		public Assignment getAttributeAssignment_5_1() { return cAttributeAssignment_5_1; }
		
		//AstConnectionAttribute
		public RuleCall getAttributeAstConnectionAttributeParserRuleCall_5_1_0() { return cAttributeAstConnectionAttributeParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_2() { return cRightCurlyBracketKeyword_5_2; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class AstEntityVariableReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstEntityVariableReference");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVariableAstEntityVariableCrossReference_0 = (CrossReference)cVariableAssignment.eContents().get(0);
		private final RuleCall cVariableAstEntityVariableIDTerminalRuleCall_0_1 = (RuleCall)cVariableAstEntityVariableCrossReference_0.eContents().get(1);
		
		//AstEntityVariableReference:
		//	variable=[AstEntityVariable];
		@Override public ParserRule getRule() { return rule; }
		
		//variable=[AstEntityVariable]
		public Assignment getVariableAssignment() { return cVariableAssignment; }
		
		//[AstEntityVariable]
		public CrossReference getVariableAstEntityVariableCrossReference_0() { return cVariableAstEntityVariableCrossReference_0; }
		
		//ID
		public RuleCall getVariableAstEntityVariableIDTerminalRuleCall_0_1() { return cVariableAstEntityVariableIDTerminalRuleCall_0_1; }
	}
	public class AstConnectionAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstConnectionAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueAstExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AstConnectionAttribute:
		//	name=ID '=' value=AstExpression ";";
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '=' value=AstExpression ";"
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=AstExpression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//AstExpression
		public RuleCall getValueAstExpressionParserRuleCall_2_0() { return cValueAstExpressionParserRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class AstStructureStatementForeachElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstStructureStatementForeach");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForeachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGeneratorsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGeneratorsAstForeachGeneratorParserRuleCall_1_0 = (RuleCall)cGeneratorsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cGeneratorsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cGeneratorsAstForeachGeneratorParserRuleCall_2_1_0 = (RuleCall)cGeneratorsAssignment_2_1.eContents().get(0);
		private final Keyword cDoKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cVarKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cVariablesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cVariablesAstValuedVariableDeclarationParserRuleCall_4_1_0 = (RuleCall)cVariablesAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cVariablesAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cVariablesAstValuedVariableDeclarationParserRuleCall_4_2_1_0 = (RuleCall)cVariablesAssignment_4_2_1.eContents().get(0);
		private final Assignment cStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsAstStructureStatementParserRuleCall_5_0 = (RuleCall)cStatementsAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//AstStructureStatementForeach:
		//	'foreach' generators+=AstForeachGenerator ("," generators+=AstForeachGenerator)* 'do' ('var'
		//	variables+=AstValuedVariableDeclaration (',' variables+=AstValuedVariableDeclaration)*)?
		//	statements+=AstStructureStatement*
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'foreach' generators+=AstForeachGenerator ("," generators+=AstForeachGenerator)* 'do' ('var'
		//variables+=AstValuedVariableDeclaration (',' variables+=AstValuedVariableDeclaration)*)?
		//statements+=AstStructureStatement* 'end'
		public Group getGroup() { return cGroup; }
		
		//'foreach'
		public Keyword getForeachKeyword_0() { return cForeachKeyword_0; }
		
		//generators+=AstForeachGenerator
		public Assignment getGeneratorsAssignment_1() { return cGeneratorsAssignment_1; }
		
		//AstForeachGenerator
		public RuleCall getGeneratorsAstForeachGeneratorParserRuleCall_1_0() { return cGeneratorsAstForeachGeneratorParserRuleCall_1_0; }
		
		//("," generators+=AstForeachGenerator)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//generators+=AstForeachGenerator
		public Assignment getGeneratorsAssignment_2_1() { return cGeneratorsAssignment_2_1; }
		
		//AstForeachGenerator
		public RuleCall getGeneratorsAstForeachGeneratorParserRuleCall_2_1_0() { return cGeneratorsAstForeachGeneratorParserRuleCall_2_1_0; }
		
		//'do'
		public Keyword getDoKeyword_3() { return cDoKeyword_3; }
		
		//('var' variables+=AstValuedVariableDeclaration (',' variables+=AstValuedVariableDeclaration)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'var'
		public Keyword getVarKeyword_4_0() { return cVarKeyword_4_0; }
		
		//variables+=AstValuedVariableDeclaration
		public Assignment getVariablesAssignment_4_1() { return cVariablesAssignment_4_1; }
		
		//AstValuedVariableDeclaration
		public RuleCall getVariablesAstValuedVariableDeclarationParserRuleCall_4_1_0() { return cVariablesAstValuedVariableDeclarationParserRuleCall_4_1_0; }
		
		//(',' variables+=AstValuedVariableDeclaration)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//variables+=AstValuedVariableDeclaration
		public Assignment getVariablesAssignment_4_2_1() { return cVariablesAssignment_4_2_1; }
		
		//AstValuedVariableDeclaration
		public RuleCall getVariablesAstValuedVariableDeclarationParserRuleCall_4_2_1_0() { return cVariablesAstValuedVariableDeclarationParserRuleCall_4_2_1_0; }
		
		//statements+=AstStructureStatement*
		public Assignment getStatementsAssignment_5() { return cStatementsAssignment_5; }
		
		//AstStructureStatement
		public RuleCall getStatementsAstStructureStatementParserRuleCall_5_0() { return cStatementsAstStructureStatementParserRuleCall_5_0; }
		
		//'end'
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}
	public class AstStructureStatementIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstStructureStatementIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionAstExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenAstStructureStatementParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		private final Assignment cElsifsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElsifsAstStructureStatementElsifParserRuleCall_4_0 = (RuleCall)cElsifsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseAstStructureStatementParserRuleCall_5_1_0 = (RuleCall)cElseAssignment_5_1.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//AstStructureStatementIf:
		//	'if' condition=AstExpression 'then'
		//	then+=AstStructureStatement*
		//	elsifs+=AstStructureStatementElsif* ('else' else+=AstStructureStatement*)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'if' condition=AstExpression 'then' then+=AstStructureStatement* elsifs+=AstStructureStatementElsif* ('else'
		//else+=AstStructureStatement*)? 'end'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//condition=AstExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//AstExpression
		public RuleCall getConditionAstExpressionParserRuleCall_1_0() { return cConditionAstExpressionParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//then+=AstStructureStatement*
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }
		
		//AstStructureStatement
		public RuleCall getThenAstStructureStatementParserRuleCall_3_0() { return cThenAstStructureStatementParserRuleCall_3_0; }
		
		//elsifs+=AstStructureStatementElsif*
		public Assignment getElsifsAssignment_4() { return cElsifsAssignment_4; }
		
		//AstStructureStatementElsif
		public RuleCall getElsifsAstStructureStatementElsifParserRuleCall_4_0() { return cElsifsAstStructureStatementElsifParserRuleCall_4_0; }
		
		//('else' else+=AstStructureStatement*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//else+=AstStructureStatement*
		public Assignment getElseAssignment_5_1() { return cElseAssignment_5_1; }
		
		//AstStructureStatement
		public RuleCall getElseAstStructureStatementParserRuleCall_5_1_0() { return cElseAstStructureStatementParserRuleCall_5_1_0; }
		
		//'end'
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}
	public class AstStructureStatementElsifElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstStructureStatementElsif");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElsifKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionAstExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenAstStructureStatementParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		
		//AstStructureStatementElsif:
		//	'elsif' condition=AstExpression 'then'
		//	then+=AstStructureStatement*;
		@Override public ParserRule getRule() { return rule; }
		
		//'elsif' condition=AstExpression 'then' then+=AstStructureStatement*
		public Group getGroup() { return cGroup; }
		
		//'elsif'
		public Keyword getElsifKeyword_0() { return cElsifKeyword_0; }
		
		//condition=AstExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//AstExpression
		public RuleCall getConditionAstExpressionParserRuleCall_1_0() { return cConditionAstExpressionParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//then+=AstStructureStatement*
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }
		
		//AstStructureStatement
		public RuleCall getThenAstStructureStatementParserRuleCall_3_0() { return cThenAstStructureStatementParserRuleCall_3_0; }
	}
	public class AstConstantVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstConstantVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAstVariableDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cConstantAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cConstantEqualsSignKeyword_1_0 = (Keyword)cConstantAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueAstExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AstConstantVariable AstVariable:
		//	AstVariableDeclaration constant?='=' value=AstExpression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//AstVariableDeclaration constant?='=' value=AstExpression ';'
		public Group getGroup() { return cGroup; }
		
		//AstVariableDeclaration
		public RuleCall getAstVariableDeclarationParserRuleCall_0() { return cAstVariableDeclarationParserRuleCall_0; }
		
		//constant?='='
		public Assignment getConstantAssignment_1() { return cConstantAssignment_1; }
		
		//'='
		public Keyword getConstantEqualsSignKeyword_1_0() { return cConstantEqualsSignKeyword_1_0; }
		
		//value=AstExpression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//AstExpression
		public RuleCall getValueAstExpressionParserRuleCall_2_0() { return cValueAstExpressionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class AstExternalVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstExternalVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExternalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAstVariableDeclarationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AstExternalVariable AstVariable:
		//	'external' AstVariableDeclaration ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'external' AstVariableDeclaration ';'
		public Group getGroup() { return cGroup; }
		
		//'external'
		public Keyword getExternalKeyword_0() { return cExternalKeyword_0; }
		
		//AstVariableDeclaration
		public RuleCall getAstVariableDeclarationParserRuleCall_1() { return cAstVariableDeclarationParserRuleCall_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class AstTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDefinitionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDefinitionTypeKeyword_0_0 = (Keyword)cDefinitionAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cParametersAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cParametersAstTypeDefinitionParameterParserRuleCall_2_1_0_0 = (RuleCall)cParametersAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cParametersAstTypeDefinitionParameterParserRuleCall_2_1_1_1_0 = (RuleCall)cParametersAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cTuplesAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cTuplesAstTupleParserRuleCall_4_0_0 = (RuleCall)cTuplesAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Assignment cTuplesAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cTuplesAstTaggedTupleParserRuleCall_4_1_0_0 = (RuleCall)cTuplesAssignment_4_1_0.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cGroup_4_1.eContents().get(1);
		private final Keyword cVerticalLineKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Assignment cTuplesAssignment_4_1_1_1 = (Assignment)cGroup_4_1_1.eContents().get(1);
		private final RuleCall cTuplesAstTaggedTupleParserRuleCall_4_1_1_1_0 = (RuleCall)cTuplesAssignment_4_1_1_1.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// -- /////////////////////////////////////////////////////////////////////////////
		//// type definitions
		//// -- /////////////////////////////////////////////////////////////////////////////
		//AstTypeDefinition AstTypeUser:
		//	definition?='type' name=ID ('(' (parameters+=AstTypeDefinitionParameter (','
		//	parameters+=AstTypeDefinitionParameter)*)? ')')?
		//	':' (tuples+=AstTuple
		//	| tuples+=AstTaggedTuple ('|' tuples+=AstTaggedTuple)*)
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//definition?='type' name=ID ('(' (parameters+=AstTypeDefinitionParameter (',' parameters+=AstTypeDefinitionParameter)*)?
		//')')? ':' (tuples+=AstTuple | tuples+=AstTaggedTuple ('|' tuples+=AstTaggedTuple)*) 'end'
		public Group getGroup() { return cGroup; }
		
		//definition?='type'
		public Assignment getDefinitionAssignment_0() { return cDefinitionAssignment_0; }
		
		//'type'
		public Keyword getDefinitionTypeKeyword_0_0() { return cDefinitionTypeKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('(' (parameters+=AstTypeDefinitionParameter (',' parameters+=AstTypeDefinitionParameter)*)? ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//(parameters+=AstTypeDefinitionParameter (',' parameters+=AstTypeDefinitionParameter)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//parameters+=AstTypeDefinitionParameter
		public Assignment getParametersAssignment_2_1_0() { return cParametersAssignment_2_1_0; }
		
		//AstTypeDefinitionParameter
		public RuleCall getParametersAstTypeDefinitionParameterParserRuleCall_2_1_0_0() { return cParametersAstTypeDefinitionParameterParserRuleCall_2_1_0_0; }
		
		//(',' parameters+=AstTypeDefinitionParameter)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }
		
		//parameters+=AstTypeDefinitionParameter
		public Assignment getParametersAssignment_2_1_1_1() { return cParametersAssignment_2_1_1_1; }
		
		//AstTypeDefinitionParameter
		public RuleCall getParametersAstTypeDefinitionParameterParserRuleCall_2_1_1_1_0() { return cParametersAstTypeDefinitionParameterParserRuleCall_2_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//(tuples+=AstTuple | tuples+=AstTaggedTuple ('|' tuples+=AstTaggedTuple)*)
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//tuples+=AstTuple
		public Assignment getTuplesAssignment_4_0() { return cTuplesAssignment_4_0; }
		
		//AstTuple
		public RuleCall getTuplesAstTupleParserRuleCall_4_0_0() { return cTuplesAstTupleParserRuleCall_4_0_0; }
		
		//tuples+=AstTaggedTuple ('|' tuples+=AstTaggedTuple)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//tuples+=AstTaggedTuple
		public Assignment getTuplesAssignment_4_1_0() { return cTuplesAssignment_4_1_0; }
		
		//AstTaggedTuple
		public RuleCall getTuplesAstTaggedTupleParserRuleCall_4_1_0_0() { return cTuplesAstTaggedTupleParserRuleCall_4_1_0_0; }
		
		//('|' tuples+=AstTaggedTuple)*
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }
		
		//'|'
		public Keyword getVerticalLineKeyword_4_1_1_0() { return cVerticalLineKeyword_4_1_1_0; }
		
		//tuples+=AstTaggedTuple
		public Assignment getTuplesAssignment_4_1_1_1() { return cTuplesAssignment_4_1_1_1; }
		
		//AstTaggedTuple
		public RuleCall getTuplesAstTaggedTupleParserRuleCall_4_1_1_1_0() { return cTuplesAstTaggedTupleParserRuleCall_4_1_1_1_0; }
		
		//'end'
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}
	public class AstTypeDefinitionParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstTypeDefinitionParameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueAstVariableDeclarationParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTypeAstTypeDefinitionTypeParameterParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//AstTypeDefinitionParameter:
		//	value=AstVariableDeclaration | type=AstTypeDefinitionTypeParameter;
		@Override public ParserRule getRule() { return rule; }
		
		//value=AstVariableDeclaration | type=AstTypeDefinitionTypeParameter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=AstVariableDeclaration
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//AstVariableDeclaration
		public RuleCall getValueAstVariableDeclarationParserRuleCall_0_0() { return cValueAstVariableDeclarationParserRuleCall_0_0; }
		
		//type=AstTypeDefinitionTypeParameter
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//AstTypeDefinitionTypeParameter
		public RuleCall getTypeAstTypeDefinitionTypeParameterParserRuleCall_1_0() { return cTypeAstTypeDefinitionTypeParameterParserRuleCall_1_0; }
	}
	public class AstTypeDefinitionTypeParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstTypeDefinitionTypeParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cVariableTypeKeyword_0_0 = (Keyword)cVariableAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//AstTypeDefinitionTypeParameter AstTypeUser:
		//	variable?='type' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//variable?='type' name=ID
		public Group getGroup() { return cGroup; }
		
		//variable?='type'
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//'type'
		public Keyword getVariableTypeKeyword_0_0() { return cVariableTypeKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class AstTaggedTupleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstTaggedTuple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cFieldsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cFieldsAstValuedVariableDeclarationParserRuleCall_1_1_0_0 = (RuleCall)cFieldsAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cFieldsAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cFieldsAstValuedVariableDeclarationParserRuleCall_1_1_1_1_0 = (RuleCall)cFieldsAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//AstTaggedTuple:
		//	name=ID ('(' (fields+=AstValuedVariableDeclaration (',' fields+=AstValuedVariableDeclaration)*)? ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('(' (fields+=AstValuedVariableDeclaration (',' fields+=AstValuedVariableDeclaration)*)? ')')?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('(' (fields+=AstValuedVariableDeclaration (',' fields+=AstValuedVariableDeclaration)*)? ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//(fields+=AstValuedVariableDeclaration (',' fields+=AstValuedVariableDeclaration)*)?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//fields+=AstValuedVariableDeclaration
		public Assignment getFieldsAssignment_1_1_0() { return cFieldsAssignment_1_1_0; }
		
		//AstValuedVariableDeclaration
		public RuleCall getFieldsAstValuedVariableDeclarationParserRuleCall_1_1_0_0() { return cFieldsAstValuedVariableDeclarationParserRuleCall_1_1_0_0; }
		
		//(',' fields+=AstValuedVariableDeclaration)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }
		
		//fields+=AstValuedVariableDeclaration
		public Assignment getFieldsAssignment_1_1_1_1() { return cFieldsAssignment_1_1_1_1; }
		
		//AstValuedVariableDeclaration
		public RuleCall getFieldsAstValuedVariableDeclarationParserRuleCall_1_1_1_1_0() { return cFieldsAstValuedVariableDeclarationParserRuleCall_1_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class AstTupleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstTuple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstTupleAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cFieldsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cFieldsAstValuedVariableDeclarationParserRuleCall_1_1_0_0 = (RuleCall)cFieldsAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cFieldsAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cFieldsAstValuedVariableDeclarationParserRuleCall_1_1_1_1_0 = (RuleCall)cFieldsAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//AstTuple AstTaggedTuple:
		//	{AstTuple} ('(' (fields+=AstValuedVariableDeclaration (',' fields+=AstValuedVariableDeclaration)*)? ')');
		@Override public ParserRule getRule() { return rule; }
		
		//{AstTuple} ('(' (fields+=AstValuedVariableDeclaration (',' fields+=AstValuedVariableDeclaration)*)? ')')
		public Group getGroup() { return cGroup; }
		
		//{AstTuple}
		public Action getAstTupleAction_0() { return cAstTupleAction_0; }
		
		//('(' (fields+=AstValuedVariableDeclaration (',' fields+=AstValuedVariableDeclaration)*)? ')')
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//(fields+=AstValuedVariableDeclaration (',' fields+=AstValuedVariableDeclaration)*)?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//fields+=AstValuedVariableDeclaration
		public Assignment getFieldsAssignment_1_1_0() { return cFieldsAssignment_1_1_0; }
		
		//AstValuedVariableDeclaration
		public RuleCall getFieldsAstValuedVariableDeclarationParserRuleCall_1_1_0_0() { return cFieldsAstValuedVariableDeclarationParserRuleCall_1_1_0_0; }
		
		//(',' fields+=AstValuedVariableDeclaration)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }
		
		//fields+=AstValuedVariableDeclaration
		public Assignment getFieldsAssignment_1_1_1_1() { return cFieldsAssignment_1_1_1_1; }
		
		//AstValuedVariableDeclaration
		public RuleCall getFieldsAstValuedVariableDeclarationParserRuleCall_1_1_1_1_0() { return cFieldsAstValuedVariableDeclarationParserRuleCall_1_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class AstActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstActor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstActorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cActorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParametersAstParameterParserRuleCall_4_0_0 = (RuleCall)cParametersAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParametersAstParameterParserRuleCall_4_1_1_0 = (RuleCall)cParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cInputsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cInputsAstPortParserRuleCall_6_0_0 = (RuleCall)cInputsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cInputsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cInputsAstPortParserRuleCall_6_1_1_0 = (RuleCall)cInputsAssignment_6_1_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignGreaterThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cOutputsAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cOutputsAstPortParserRuleCall_8_0_0 = (RuleCall)cOutputsAssignment_8_0.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cGroup_8.eContents().get(1);
		private final Keyword cCommaKeyword_8_1_0 = (Keyword)cGroup_8_1.eContents().get(0);
		private final Assignment cOutputsAssignment_8_1_1 = (Assignment)cGroup_8_1.eContents().get(1);
		private final RuleCall cOutputsAstPortParserRuleCall_8_1_1_0 = (RuleCall)cOutputsAssignment_8_1_1.eContents().get(0);
		private final Keyword cColonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Alternatives cAlternatives_10 = (Alternatives)cGroup.eContents().get(10);
		private final Assignment cFunctionsAssignment_10_0 = (Assignment)cAlternatives_10.eContents().get(0);
		private final RuleCall cFunctionsAstFunctionParserRuleCall_10_0_0 = (RuleCall)cFunctionsAssignment_10_0.eContents().get(0);
		private final Assignment cProceduresAssignment_10_1 = (Assignment)cAlternatives_10.eContents().get(1);
		private final RuleCall cProceduresAstProcedureParserRuleCall_10_1_0 = (RuleCall)cProceduresAssignment_10_1.eContents().get(0);
		private final Assignment cInvariantsAssignment_10_2 = (Assignment)cAlternatives_10.eContents().get(2);
		private final RuleCall cInvariantsAstInvariantParserRuleCall_10_2_0 = (RuleCall)cInvariantsAssignment_10_2.eContents().get(0);
		private final Assignment cActionsAssignment_10_3 = (Assignment)cAlternatives_10.eContents().get(3);
		private final RuleCall cActionsAstActionParserRuleCall_10_3_0 = (RuleCall)cActionsAssignment_10_3.eContents().get(0);
		private final Assignment cProcessesAssignment_10_4 = (Assignment)cAlternatives_10.eContents().get(4);
		private final RuleCall cProcessesAstProcessDescriptionParserRuleCall_10_4_0 = (RuleCall)cProcessesAssignment_10_4.eContents().get(0);
		private final Assignment cInitializesAssignment_10_5 = (Assignment)cAlternatives_10.eContents().get(5);
		private final RuleCall cInitializesAstInitializeParserRuleCall_10_5_0 = (RuleCall)cInitializesAssignment_10_5.eContents().get(0);
		private final Assignment cStateVariablesAssignment_10_6 = (Assignment)cAlternatives_10.eContents().get(6);
		private final RuleCall cStateVariablesAstStateVariableParserRuleCall_10_6_0 = (RuleCall)cStateVariablesAssignment_10_6.eContents().get(0);
		private final Alternatives cAlternatives_11 = (Alternatives)cGroup.eContents().get(11);
		private final Assignment cSchedulesAssignment_11_0 = (Assignment)cAlternatives_11.eContents().get(0);
		private final RuleCall cSchedulesAstScheduleParserRuleCall_11_0_0 = (RuleCall)cSchedulesAssignment_11_0.eContents().get(0);
		private final Assignment cScheduleRegExpAssignment_11_1 = (Assignment)cAlternatives_11.eContents().get(1);
		private final RuleCall cScheduleRegExpAstScheduleRegExpParserRuleCall_11_1_0 = (RuleCall)cScheduleRegExpAssignment_11_1.eContents().get(0);
		private final Assignment cPrioritiesAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cPrioritiesAstPriorityParserRuleCall_12_0 = (RuleCall)cPrioritiesAssignment_12.eContents().get(0);
		private final Keyword cEndKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//// -- /////////////////////////////////////////////////////////////////////////////
		//// actor
		//// -- /////////////////////////////////////////////////////////////////////////////
		//AstActor:
		//	{AstActor}
		//	'actor' name=ID
		//	'(' (parameters+=AstParameter (',' parameters+=AstParameter)*)? ')' (inputs+=AstPort (',' inputs+=AstPort)*)? '==>'
		//	(outputs+=AstPort (',' outputs+=AstPort)*)? ':' (functions+=AstFunction
		//	| procedures+=AstProcedure
		//	| invariants+=AstInvariant
		//	| actions+=AstAction
		//	| processes+=AstProcessDescription
		//	| initializes+=AstInitialize
		//	| stateVariables+=AstStateVariable)* (schedules=AstSchedule | scheduleRegExp=AstScheduleRegExp)?
		//	priorities+=AstPriority*
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{AstActor} 'actor' name=ID '(' (parameters+=AstParameter (',' parameters+=AstParameter)*)? ')' (inputs+=AstPort (','
		//inputs+=AstPort)*)? '==>' (outputs+=AstPort (',' outputs+=AstPort)*)? ':' (functions+=AstFunction |
		//procedures+=AstProcedure | invariants+=AstInvariant | actions+=AstAction | processes+=AstProcessDescription |
		//initializes+=AstInitialize | stateVariables+=AstStateVariable)* (schedules=AstSchedule |
		//scheduleRegExp=AstScheduleRegExp)? priorities+=AstPriority* 'end'
		public Group getGroup() { return cGroup; }
		
		//{AstActor}
		public Action getAstActorAction_0() { return cAstActorAction_0; }
		
		//'actor'
		public Keyword getActorKeyword_1() { return cActorKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(parameters+=AstParameter (',' parameters+=AstParameter)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//parameters+=AstParameter
		public Assignment getParametersAssignment_4_0() { return cParametersAssignment_4_0; }
		
		//AstParameter
		public RuleCall getParametersAstParameterParserRuleCall_4_0_0() { return cParametersAstParameterParserRuleCall_4_0_0; }
		
		//(',' parameters+=AstParameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//parameters+=AstParameter
		public Assignment getParametersAssignment_4_1_1() { return cParametersAssignment_4_1_1; }
		
		//AstParameter
		public RuleCall getParametersAstParameterParserRuleCall_4_1_1_0() { return cParametersAstParameterParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//(inputs+=AstPort (',' inputs+=AstPort)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//inputs+=AstPort
		public Assignment getInputsAssignment_6_0() { return cInputsAssignment_6_0; }
		
		//AstPort
		public RuleCall getInputsAstPortParserRuleCall_6_0_0() { return cInputsAstPortParserRuleCall_6_0_0; }
		
		//(',' inputs+=AstPort)*
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//','
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }
		
		//inputs+=AstPort
		public Assignment getInputsAssignment_6_1_1() { return cInputsAssignment_6_1_1; }
		
		//AstPort
		public RuleCall getInputsAstPortParserRuleCall_6_1_1_0() { return cInputsAstPortParserRuleCall_6_1_1_0; }
		
		//'==>'
		public Keyword getEqualsSignEqualsSignGreaterThanSignKeyword_7() { return cEqualsSignEqualsSignGreaterThanSignKeyword_7; }
		
		//(outputs+=AstPort (',' outputs+=AstPort)*)?
		public Group getGroup_8() { return cGroup_8; }
		
		//outputs+=AstPort
		public Assignment getOutputsAssignment_8_0() { return cOutputsAssignment_8_0; }
		
		//AstPort
		public RuleCall getOutputsAstPortParserRuleCall_8_0_0() { return cOutputsAstPortParserRuleCall_8_0_0; }
		
		//(',' outputs+=AstPort)*
		public Group getGroup_8_1() { return cGroup_8_1; }
		
		//','
		public Keyword getCommaKeyword_8_1_0() { return cCommaKeyword_8_1_0; }
		
		//outputs+=AstPort
		public Assignment getOutputsAssignment_8_1_1() { return cOutputsAssignment_8_1_1; }
		
		//AstPort
		public RuleCall getOutputsAstPortParserRuleCall_8_1_1_0() { return cOutputsAstPortParserRuleCall_8_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_9() { return cColonKeyword_9; }
		
		//(functions+=AstFunction | procedures+=AstProcedure | invariants+=AstInvariant | actions+=AstAction |
		//processes+=AstProcessDescription | initializes+=AstInitialize | stateVariables+=AstStateVariable)*
		public Alternatives getAlternatives_10() { return cAlternatives_10; }
		
		//functions+=AstFunction
		public Assignment getFunctionsAssignment_10_0() { return cFunctionsAssignment_10_0; }
		
		//AstFunction
		public RuleCall getFunctionsAstFunctionParserRuleCall_10_0_0() { return cFunctionsAstFunctionParserRuleCall_10_0_0; }
		
		//procedures+=AstProcedure
		public Assignment getProceduresAssignment_10_1() { return cProceduresAssignment_10_1; }
		
		//AstProcedure
		public RuleCall getProceduresAstProcedureParserRuleCall_10_1_0() { return cProceduresAstProcedureParserRuleCall_10_1_0; }
		
		//invariants+=AstInvariant
		public Assignment getInvariantsAssignment_10_2() { return cInvariantsAssignment_10_2; }
		
		//AstInvariant
		public RuleCall getInvariantsAstInvariantParserRuleCall_10_2_0() { return cInvariantsAstInvariantParserRuleCall_10_2_0; }
		
		//actions+=AstAction
		public Assignment getActionsAssignment_10_3() { return cActionsAssignment_10_3; }
		
		//AstAction
		public RuleCall getActionsAstActionParserRuleCall_10_3_0() { return cActionsAstActionParserRuleCall_10_3_0; }
		
		//processes+=AstProcessDescription
		public Assignment getProcessesAssignment_10_4() { return cProcessesAssignment_10_4; }
		
		//AstProcessDescription
		public RuleCall getProcessesAstProcessDescriptionParserRuleCall_10_4_0() { return cProcessesAstProcessDescriptionParserRuleCall_10_4_0; }
		
		//initializes+=AstInitialize
		public Assignment getInitializesAssignment_10_5() { return cInitializesAssignment_10_5; }
		
		//AstInitialize
		public RuleCall getInitializesAstInitializeParserRuleCall_10_5_0() { return cInitializesAstInitializeParserRuleCall_10_5_0; }
		
		//stateVariables+=AstStateVariable
		public Assignment getStateVariablesAssignment_10_6() { return cStateVariablesAssignment_10_6; }
		
		//AstStateVariable
		public RuleCall getStateVariablesAstStateVariableParserRuleCall_10_6_0() { return cStateVariablesAstStateVariableParserRuleCall_10_6_0; }
		
		//(schedules=AstSchedule | scheduleRegExp=AstScheduleRegExp)?
		public Alternatives getAlternatives_11() { return cAlternatives_11; }
		
		//schedules=AstSchedule
		public Assignment getSchedulesAssignment_11_0() { return cSchedulesAssignment_11_0; }
		
		//AstSchedule
		public RuleCall getSchedulesAstScheduleParserRuleCall_11_0_0() { return cSchedulesAstScheduleParserRuleCall_11_0_0; }
		
		//scheduleRegExp=AstScheduleRegExp
		public Assignment getScheduleRegExpAssignment_11_1() { return cScheduleRegExpAssignment_11_1; }
		
		//AstScheduleRegExp
		public RuleCall getScheduleRegExpAstScheduleRegExpParserRuleCall_11_1_0() { return cScheduleRegExpAstScheduleRegExpParserRuleCall_11_1_0; }
		
		//priorities+=AstPriority*
		public Assignment getPrioritiesAssignment_12() { return cPrioritiesAssignment_12; }
		
		//AstPriority
		public RuleCall getPrioritiesAstPriorityParserRuleCall_12_0() { return cPrioritiesAstPriorityParserRuleCall_12_0; }
		
		//'end'
		public Keyword getEndKeyword_13() { return cEndKeyword_13; }
	}
	public class AstProcessDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstProcessDescription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstProcessDescriptionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cRepeatedAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cRepeatedRepeatKeyword_1_0_0 = (Keyword)cRepeatedAssignment_1_0.eContents().get(0);
		private final Keyword cDoKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsAstStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AstProcessDescription:
		//	{AstProcessDescription} (repeated?='repeat' | 'do') statements+=AstStatement*
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{AstProcessDescription} (repeated?='repeat' | 'do') statements+=AstStatement* 'end'
		public Group getGroup() { return cGroup; }
		
		//{AstProcessDescription}
		public Action getAstProcessDescriptionAction_0() { return cAstProcessDescriptionAction_0; }
		
		//(repeated?='repeat' | 'do')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//repeated?='repeat'
		public Assignment getRepeatedAssignment_1_0() { return cRepeatedAssignment_1_0; }
		
		//'repeat'
		public Keyword getRepeatedRepeatKeyword_1_0_0() { return cRepeatedRepeatKeyword_1_0_0; }
		
		//'do'
		public Keyword getDoKeyword_1_1() { return cDoKeyword_1_1; }
		
		//statements+=AstStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }
		
		//AstStatement
		public RuleCall getStatementsAstStatementParserRuleCall_2_0() { return cStatementsAstStatementParserRuleCall_2_0; }
		
		//'end'
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}
	public class AstPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAstAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeAstTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//AstPort:
		//	annotations+=AstAnnotation* type=AstType name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=AstAnnotation* type=AstType name=ID
		public Group getGroup() { return cGroup; }
		
		//annotations+=AstAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//AstAnnotation
		public RuleCall getAnnotationsAstAnnotationParserRuleCall_0_0() { return cAnnotationsAstAnnotationParserRuleCall_0_0; }
		
		//type=AstType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//AstType
		public RuleCall getTypeAstTypeParserRuleCall_1_0() { return cTypeAstTypeParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class AstFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAstAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cFunctionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cParametersAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cParametersAstVariableDeclarationParserRuleCall_5_0_0 = (RuleCall)cParametersAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cParametersAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cParametersAstVariableDeclarationParserRuleCall_5_1_1_0 = (RuleCall)cParametersAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTypeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTypeAstTypeParserRuleCall_8_0 = (RuleCall)cTypeAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cVarKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cVariablesAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cVariablesAstValuedVariableDeclarationParserRuleCall_9_1_0 = (RuleCall)cVariablesAssignment_9_1.eContents().get(0);
		private final Group cGroup_9_2 = (Group)cGroup_9.eContents().get(2);
		private final Keyword cCommaKeyword_9_2_0 = (Keyword)cGroup_9_2.eContents().get(0);
		private final Assignment cVariablesAssignment_9_2_1 = (Assignment)cGroup_9_2.eContents().get(1);
		private final RuleCall cVariablesAstValuedVariableDeclarationParserRuleCall_9_2_1_0 = (RuleCall)cVariablesAssignment_9_2_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cColonKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cExpressionAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cExpressionAstExpressionParserRuleCall_10_1_0 = (RuleCall)cExpressionAssignment_10_1.eContents().get(0);
		private final Keyword cEndKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//AstFunction AstVariable:
		//	{AstFunction} annotations+=AstAnnotation*
		//	'function' name=ID
		//	'(' (parameters+=AstVariableDeclaration (',' parameters+=AstVariableDeclaration)*)?
		//	')' '-->' type=AstType ('var'
		//	variables+=AstValuedVariableDeclaration (',' variables+=AstValuedVariableDeclaration)*)? (':'
		//	expression=AstExpression)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{AstFunction} annotations+=AstAnnotation* 'function' name=ID '(' (parameters+=AstVariableDeclaration (','
		//parameters+=AstVariableDeclaration)*)? ')' '-->' type=AstType ('var' variables+=AstValuedVariableDeclaration (','
		//variables+=AstValuedVariableDeclaration)*)? (':' expression=AstExpression)? 'end'
		public Group getGroup() { return cGroup; }
		
		//{AstFunction}
		public Action getAstFunctionAction_0() { return cAstFunctionAction_0; }
		
		//annotations+=AstAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//AstAnnotation
		public RuleCall getAnnotationsAstAnnotationParserRuleCall_1_0() { return cAnnotationsAstAnnotationParserRuleCall_1_0; }
		
		//'function'
		public Keyword getFunctionKeyword_2() { return cFunctionKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//(parameters+=AstVariableDeclaration (',' parameters+=AstVariableDeclaration)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//parameters+=AstVariableDeclaration
		public Assignment getParametersAssignment_5_0() { return cParametersAssignment_5_0; }
		
		//AstVariableDeclaration
		public RuleCall getParametersAstVariableDeclarationParserRuleCall_5_0_0() { return cParametersAstVariableDeclarationParserRuleCall_5_0_0; }
		
		//(',' parameters+=AstVariableDeclaration)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//','
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//parameters+=AstVariableDeclaration
		public Assignment getParametersAssignment_5_1_1() { return cParametersAssignment_5_1_1; }
		
		//AstVariableDeclaration
		public RuleCall getParametersAstVariableDeclarationParserRuleCall_5_1_1_0() { return cParametersAstVariableDeclarationParserRuleCall_5_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//'-->'
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_7() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_7; }
		
		//type=AstType
		public Assignment getTypeAssignment_8() { return cTypeAssignment_8; }
		
		//AstType
		public RuleCall getTypeAstTypeParserRuleCall_8_0() { return cTypeAstTypeParserRuleCall_8_0; }
		
		//('var' variables+=AstValuedVariableDeclaration (',' variables+=AstValuedVariableDeclaration)*)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'var'
		public Keyword getVarKeyword_9_0() { return cVarKeyword_9_0; }
		
		//variables+=AstValuedVariableDeclaration
		public Assignment getVariablesAssignment_9_1() { return cVariablesAssignment_9_1; }
		
		//AstValuedVariableDeclaration
		public RuleCall getVariablesAstValuedVariableDeclarationParserRuleCall_9_1_0() { return cVariablesAstValuedVariableDeclarationParserRuleCall_9_1_0; }
		
		//(',' variables+=AstValuedVariableDeclaration)*
		public Group getGroup_9_2() { return cGroup_9_2; }
		
		//','
		public Keyword getCommaKeyword_9_2_0() { return cCommaKeyword_9_2_0; }
		
		//variables+=AstValuedVariableDeclaration
		public Assignment getVariablesAssignment_9_2_1() { return cVariablesAssignment_9_2_1; }
		
		//AstValuedVariableDeclaration
		public RuleCall getVariablesAstValuedVariableDeclarationParserRuleCall_9_2_1_0() { return cVariablesAstValuedVariableDeclarationParserRuleCall_9_2_1_0; }
		
		//(':' expression=AstExpression)?
		public Group getGroup_10() { return cGroup_10; }
		
		//':'
		public Keyword getColonKeyword_10_0() { return cColonKeyword_10_0; }
		
		//expression=AstExpression
		public Assignment getExpressionAssignment_10_1() { return cExpressionAssignment_10_1; }
		
		//AstExpression
		public RuleCall getExpressionAstExpressionParserRuleCall_10_1_0() { return cExpressionAstExpressionParserRuleCall_10_1_0; }
		
		//'end'
		public Keyword getEndKeyword_11() { return cEndKeyword_11; }
	}
	public class AstExternalFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstExternalFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAstAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cExternalKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cFunctionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cParametersAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cParametersAstVariableDeclarationParserRuleCall_6_0_0 = (RuleCall)cParametersAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cParametersAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cParametersAstVariableDeclarationParserRuleCall_6_1_1_0 = (RuleCall)cParametersAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cTypeAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cTypeAstTypeParserRuleCall_9_0 = (RuleCall)cTypeAssignment_9.eContents().get(0);
		private final Keyword cEndKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//AstExternalFunction:
		//	{AstFunction} annotations+=AstAnnotation*
		//	'external' 'function' name=ID
		//	'(' (parameters+=AstVariableDeclaration (',' parameters+=AstVariableDeclaration)*)?
		//	')' '-->' type=AstType 'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{AstFunction} annotations+=AstAnnotation* 'external' 'function' name=ID '(' (parameters+=AstVariableDeclaration (','
		//parameters+=AstVariableDeclaration)*)? ')' '-->' type=AstType 'end'
		public Group getGroup() { return cGroup; }
		
		//{AstFunction}
		public Action getAstFunctionAction_0() { return cAstFunctionAction_0; }
		
		//annotations+=AstAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//AstAnnotation
		public RuleCall getAnnotationsAstAnnotationParserRuleCall_1_0() { return cAnnotationsAstAnnotationParserRuleCall_1_0; }
		
		//'external'
		public Keyword getExternalKeyword_2() { return cExternalKeyword_2; }
		
		//'function'
		public Keyword getFunctionKeyword_3() { return cFunctionKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//(parameters+=AstVariableDeclaration (',' parameters+=AstVariableDeclaration)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//parameters+=AstVariableDeclaration
		public Assignment getParametersAssignment_6_0() { return cParametersAssignment_6_0; }
		
		//AstVariableDeclaration
		public RuleCall getParametersAstVariableDeclarationParserRuleCall_6_0_0() { return cParametersAstVariableDeclarationParserRuleCall_6_0_0; }
		
		//(',' parameters+=AstVariableDeclaration)*
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//','
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }
		
		//parameters+=AstVariableDeclaration
		public Assignment getParametersAssignment_6_1_1() { return cParametersAssignment_6_1_1; }
		
		//AstVariableDeclaration
		public RuleCall getParametersAstVariableDeclarationParserRuleCall_6_1_1_0() { return cParametersAstVariableDeclarationParserRuleCall_6_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//'-->'
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_8() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_8; }
		
		//type=AstType
		public Assignment getTypeAssignment_9() { return cTypeAssignment_9; }
		
		//AstType
		public RuleCall getTypeAstTypeParserRuleCall_9_0() { return cTypeAstTypeParserRuleCall_9_0; }
		
		//'end'
		public Keyword getEndKeyword_10() { return cEndKeyword_10; }
	}
	public class AstProcedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstProcedure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstProcedureAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAstAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cProcedureKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cParametersAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cParametersAstVariableDeclarationParserRuleCall_5_0_0 = (RuleCall)cParametersAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cParametersAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cParametersAstVariableDeclarationParserRuleCall_5_1_1_0 = (RuleCall)cParametersAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cVarKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cVariablesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cVariablesAstValuedVariableDeclarationParserRuleCall_7_1_0 = (RuleCall)cVariablesAssignment_7_1.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cCommaKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Assignment cVariablesAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final RuleCall cVariablesAstValuedVariableDeclarationParserRuleCall_7_2_1_0 = (RuleCall)cVariablesAssignment_7_2_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cBeginKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cStatementsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cStatementsAstStatementParserRuleCall_8_1_0 = (RuleCall)cStatementsAssignment_8_1.eContents().get(0);
		private final Keyword cEndKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//AstProcedure AstVariable:
		//	{AstProcedure} annotations+=AstAnnotation*
		//	'procedure' name=ID
		//	'(' (parameters+=AstVariableDeclaration (',' parameters+=AstVariableDeclaration)*)?
		//	')' ('var'
		//	variables+=AstValuedVariableDeclaration (',' variables+=AstValuedVariableDeclaration)*)? ('begin'
		//	statements+=AstStatement*)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{AstProcedure} annotations+=AstAnnotation* 'procedure' name=ID '(' (parameters+=AstVariableDeclaration (','
		//parameters+=AstVariableDeclaration)*)? ')' ('var' variables+=AstValuedVariableDeclaration (','
		//variables+=AstValuedVariableDeclaration)*)? ('begin' statements+=AstStatement*)? 'end'
		public Group getGroup() { return cGroup; }
		
		//{AstProcedure}
		public Action getAstProcedureAction_0() { return cAstProcedureAction_0; }
		
		//annotations+=AstAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//AstAnnotation
		public RuleCall getAnnotationsAstAnnotationParserRuleCall_1_0() { return cAnnotationsAstAnnotationParserRuleCall_1_0; }
		
		//'procedure'
		public Keyword getProcedureKeyword_2() { return cProcedureKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//(parameters+=AstVariableDeclaration (',' parameters+=AstVariableDeclaration)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//parameters+=AstVariableDeclaration
		public Assignment getParametersAssignment_5_0() { return cParametersAssignment_5_0; }
		
		//AstVariableDeclaration
		public RuleCall getParametersAstVariableDeclarationParserRuleCall_5_0_0() { return cParametersAstVariableDeclarationParserRuleCall_5_0_0; }
		
		//(',' parameters+=AstVariableDeclaration)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//','
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//parameters+=AstVariableDeclaration
		public Assignment getParametersAssignment_5_1_1() { return cParametersAssignment_5_1_1; }
		
		//AstVariableDeclaration
		public RuleCall getParametersAstVariableDeclarationParserRuleCall_5_1_1_0() { return cParametersAstVariableDeclarationParserRuleCall_5_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//('var' variables+=AstValuedVariableDeclaration (',' variables+=AstValuedVariableDeclaration)*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'var'
		public Keyword getVarKeyword_7_0() { return cVarKeyword_7_0; }
		
		//variables+=AstValuedVariableDeclaration
		public Assignment getVariablesAssignment_7_1() { return cVariablesAssignment_7_1; }
		
		//AstValuedVariableDeclaration
		public RuleCall getVariablesAstValuedVariableDeclarationParserRuleCall_7_1_0() { return cVariablesAstValuedVariableDeclarationParserRuleCall_7_1_0; }
		
		//(',' variables+=AstValuedVariableDeclaration)*
		public Group getGroup_7_2() { return cGroup_7_2; }
		
		//','
		public Keyword getCommaKeyword_7_2_0() { return cCommaKeyword_7_2_0; }
		
		//variables+=AstValuedVariableDeclaration
		public Assignment getVariablesAssignment_7_2_1() { return cVariablesAssignment_7_2_1; }
		
		//AstValuedVariableDeclaration
		public RuleCall getVariablesAstValuedVariableDeclarationParserRuleCall_7_2_1_0() { return cVariablesAstValuedVariableDeclarationParserRuleCall_7_2_1_0; }
		
		//('begin' statements+=AstStatement*)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'begin'
		public Keyword getBeginKeyword_8_0() { return cBeginKeyword_8_0; }
		
		//statements+=AstStatement*
		public Assignment getStatementsAssignment_8_1() { return cStatementsAssignment_8_1; }
		
		//AstStatement
		public RuleCall getStatementsAstStatementParserRuleCall_8_1_0() { return cStatementsAstStatementParserRuleCall_8_1_0; }
		
		//'end'
		public Keyword getEndKeyword_9() { return cEndKeyword_9; }
	}
	public class AstExternalProcedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstExternalProcedure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstProcedureAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAstAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cExternalKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cProcedureKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cParametersAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cParametersAstVariableDeclarationParserRuleCall_6_0_0 = (RuleCall)cParametersAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cParametersAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cParametersAstVariableDeclarationParserRuleCall_6_1_1_0 = (RuleCall)cParametersAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cEndKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//AstExternalProcedure:
		//	{AstProcedure} annotations+=AstAnnotation*
		//	'external' 'procedure' name=ID
		//	'(' (parameters+=AstVariableDeclaration (',' parameters+=AstVariableDeclaration)*)?
		//	')' 'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{AstProcedure} annotations+=AstAnnotation* 'external' 'procedure' name=ID '(' (parameters+=AstVariableDeclaration (','
		//parameters+=AstVariableDeclaration)*)? ')' 'end'
		public Group getGroup() { return cGroup; }
		
		//{AstProcedure}
		public Action getAstProcedureAction_0() { return cAstProcedureAction_0; }
		
		//annotations+=AstAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//AstAnnotation
		public RuleCall getAnnotationsAstAnnotationParserRuleCall_1_0() { return cAnnotationsAstAnnotationParserRuleCall_1_0; }
		
		//'external'
		public Keyword getExternalKeyword_2() { return cExternalKeyword_2; }
		
		//'procedure'
		public Keyword getProcedureKeyword_3() { return cProcedureKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//(parameters+=AstVariableDeclaration (',' parameters+=AstVariableDeclaration)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//parameters+=AstVariableDeclaration
		public Assignment getParametersAssignment_6_0() { return cParametersAssignment_6_0; }
		
		//AstVariableDeclaration
		public RuleCall getParametersAstVariableDeclarationParserRuleCall_6_0_0() { return cParametersAstVariableDeclarationParserRuleCall_6_0_0; }
		
		//(',' parameters+=AstVariableDeclaration)*
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//','
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }
		
		//parameters+=AstVariableDeclaration
		public Assignment getParametersAssignment_6_1_1() { return cParametersAssignment_6_1_1; }
		
		//AstVariableDeclaration
		public RuleCall getParametersAstVariableDeclarationParserRuleCall_6_1_1_0() { return cParametersAstVariableDeclarationParserRuleCall_6_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//'end'
		public Keyword getEndKeyword_8() { return cEndKeyword_8; }
	}
	public class AstParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAstVariableDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueAstExpressionParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//AstParameter AstVariable:
		//	AstVariableDeclaration ('=' value=AstExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//AstVariableDeclaration ('=' value=AstExpression)?
		public Group getGroup() { return cGroup; }
		
		//AstVariableDeclaration
		public RuleCall getAstVariableDeclarationParserRuleCall_0() { return cAstVariableDeclarationParserRuleCall_0; }
		
		//('=' value=AstExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//value=AstExpression
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//AstExpression
		public RuleCall getValueAstExpressionParserRuleCall_1_1_0() { return cValueAstExpressionParserRuleCall_1_1_0; }
	}
	public class AstStateVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstStateVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAstValuedVariableDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//AstStateVariable AstVariable:
		//	AstValuedVariableDeclaration ';';
		@Override public ParserRule getRule() { return rule; }
		
		//AstValuedVariableDeclaration ';'
		public Group getGroup() { return cGroup; }
		
		//AstValuedVariableDeclaration
		public RuleCall getAstValuedVariableDeclarationParserRuleCall_0() { return cAstValuedVariableDeclarationParserRuleCall_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class AstTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifiersIDTerminalRuleCall_0_0 = (RuleCall)cIdentifiersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdentifiersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdentifiersIDTerminalRuleCall_1_1_0 = (RuleCall)cIdentifiersAssignment_1_1.eContents().get(0);
		
		//AstTag:
		//	identifiers+=ID ('.' identifiers+=ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//identifiers+=ID ('.' identifiers+=ID)*
		public Group getGroup() { return cGroup; }
		
		//identifiers+=ID
		public Assignment getIdentifiersAssignment_0() { return cIdentifiersAssignment_0; }
		
		//ID
		public RuleCall getIdentifiersIDTerminalRuleCall_0_0() { return cIdentifiersIDTerminalRuleCall_0_0; }
		
		//('.' identifiers+=ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//identifiers+=ID
		public Assignment getIdentifiersAssignment_1_1() { return cIdentifiersAssignment_1_1; }
		
		//ID
		public RuleCall getIdentifiersIDTerminalRuleCall_1_1_0() { return cIdentifiersIDTerminalRuleCall_1_1_0; }
	}
	public class AstInvariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstInvariant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInvariantKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInvariantsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInvariantsAstExpressionParserRuleCall_1_0 = (RuleCall)cInvariantsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInvariantsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInvariantsAstExpressionParserRuleCall_2_1_0 = (RuleCall)cInvariantsAssignment_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cEndKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cEndinvariantKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		
		//AstInvariant:
		//	'invariant'
		//	invariants+=AstExpression (',' invariants+=AstExpression)* ('end' | 'endinvariant');
		@Override public ParserRule getRule() { return rule; }
		
		//'invariant' invariants+=AstExpression (',' invariants+=AstExpression)* ('end' | 'endinvariant')
		public Group getGroup() { return cGroup; }
		
		//'invariant'
		public Keyword getInvariantKeyword_0() { return cInvariantKeyword_0; }
		
		//invariants+=AstExpression
		public Assignment getInvariantsAssignment_1() { return cInvariantsAssignment_1; }
		
		//AstExpression
		public RuleCall getInvariantsAstExpressionParserRuleCall_1_0() { return cInvariantsAstExpressionParserRuleCall_1_0; }
		
		//(',' invariants+=AstExpression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//invariants+=AstExpression
		public Assignment getInvariantsAssignment_2_1() { return cInvariantsAssignment_2_1; }
		
		//AstExpression
		public RuleCall getInvariantsAstExpressionParserRuleCall_2_1_0() { return cInvariantsAstExpressionParserRuleCall_2_1_0; }
		
		//('end' | 'endinvariant')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'end'
		public Keyword getEndKeyword_3_0() { return cEndKeyword_3_0; }
		
		//'endinvariant'
		public Keyword getEndinvariantKeyword_3_1() { return cEndinvariantKeyword_3_1; }
	}
	public class AstExternalActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstExternalActor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstExternalActorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExternalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cActorKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cParametersAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cParametersAstParameterParserRuleCall_5_0_0 = (RuleCall)cParametersAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cParametersAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cParametersAstParameterParserRuleCall_5_1_1_0 = (RuleCall)cParametersAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cInputsAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cInputsAstPortParserRuleCall_7_0_0 = (RuleCall)cInputsAssignment_7_0.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cCommaKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cInputsAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cInputsAstPortParserRuleCall_7_1_1_0 = (RuleCall)cInputsAssignment_7_1_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignGreaterThanSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Assignment cOutputsAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final RuleCall cOutputsAstPortParserRuleCall_9_0_0 = (RuleCall)cOutputsAssignment_9_0.eContents().get(0);
		private final Group cGroup_9_1 = (Group)cGroup_9.eContents().get(1);
		private final Keyword cCommaKeyword_9_1_0 = (Keyword)cGroup_9_1.eContents().get(0);
		private final Assignment cOutputsAssignment_9_1_1 = (Assignment)cGroup_9_1.eContents().get(1);
		private final RuleCall cOutputsAstPortParserRuleCall_9_1_1_0 = (RuleCall)cOutputsAssignment_9_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//// -- /////////////////////////////////////////////////////////////////////////////
		//// external entities
		//// -- /////////////////////////////////////////////////////////////////////////////
		//AstExternalActor:
		//	{AstExternalActor}
		//	'external' 'actor' name=ID
		//	'(' (parameters+=AstParameter (',' parameters+=AstParameter)*)? ')' (inputs+=AstPort (',' inputs+=AstPort)*)? '==>'
		//	(outputs+=AstPort (',' outputs+=AstPort)*)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{AstExternalActor} 'external' 'actor' name=ID '(' (parameters+=AstParameter (',' parameters+=AstParameter)*)? ')'
		//(inputs+=AstPort (',' inputs+=AstPort)*)? '==>' (outputs+=AstPort (',' outputs+=AstPort)*)? ';'
		public Group getGroup() { return cGroup; }
		
		//{AstExternalActor}
		public Action getAstExternalActorAction_0() { return cAstExternalActorAction_0; }
		
		//'external'
		public Keyword getExternalKeyword_1() { return cExternalKeyword_1; }
		
		//'actor'
		public Keyword getActorKeyword_2() { return cActorKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//(parameters+=AstParameter (',' parameters+=AstParameter)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//parameters+=AstParameter
		public Assignment getParametersAssignment_5_0() { return cParametersAssignment_5_0; }
		
		//AstParameter
		public RuleCall getParametersAstParameterParserRuleCall_5_0_0() { return cParametersAstParameterParserRuleCall_5_0_0; }
		
		//(',' parameters+=AstParameter)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//','
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//parameters+=AstParameter
		public Assignment getParametersAssignment_5_1_1() { return cParametersAssignment_5_1_1; }
		
		//AstParameter
		public RuleCall getParametersAstParameterParserRuleCall_5_1_1_0() { return cParametersAstParameterParserRuleCall_5_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//(inputs+=AstPort (',' inputs+=AstPort)*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//inputs+=AstPort
		public Assignment getInputsAssignment_7_0() { return cInputsAssignment_7_0; }
		
		//AstPort
		public RuleCall getInputsAstPortParserRuleCall_7_0_0() { return cInputsAstPortParserRuleCall_7_0_0; }
		
		//(',' inputs+=AstPort)*
		public Group getGroup_7_1() { return cGroup_7_1; }
		
		//','
		public Keyword getCommaKeyword_7_1_0() { return cCommaKeyword_7_1_0; }
		
		//inputs+=AstPort
		public Assignment getInputsAssignment_7_1_1() { return cInputsAssignment_7_1_1; }
		
		//AstPort
		public RuleCall getInputsAstPortParserRuleCall_7_1_1_0() { return cInputsAstPortParserRuleCall_7_1_1_0; }
		
		//'==>'
		public Keyword getEqualsSignEqualsSignGreaterThanSignKeyword_8() { return cEqualsSignEqualsSignGreaterThanSignKeyword_8; }
		
		//(outputs+=AstPort (',' outputs+=AstPort)*)?
		public Group getGroup_9() { return cGroup_9; }
		
		//outputs+=AstPort
		public Assignment getOutputsAssignment_9_0() { return cOutputsAssignment_9_0; }
		
		//AstPort
		public RuleCall getOutputsAstPortParserRuleCall_9_0_0() { return cOutputsAstPortParserRuleCall_9_0_0; }
		
		//(',' outputs+=AstPort)*
		public Group getGroup_9_1() { return cGroup_9_1; }
		
		//','
		public Keyword getCommaKeyword_9_1_0() { return cCommaKeyword_9_1_0; }
		
		//outputs+=AstPort
		public Assignment getOutputsAssignment_9_1_1() { return cOutputsAssignment_9_1_1; }
		
		//AstPort
		public RuleCall getOutputsAstPortParserRuleCall_9_1_1_0() { return cOutputsAstPortParserRuleCall_9_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_10() { return cSemicolonKeyword_10; }
	}
	public class AstInequalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstInequality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTagsAstTagParserRuleCall_0_0 = (RuleCall)cTagsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTagsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTagsAstTagParserRuleCall_1_1_0 = (RuleCall)cTagsAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// -- /////////////////////////////////////////////////////////////////////////////
		//// -- Priorities
		//// -- /////////////////////////////////////////////////////////////////////////////
		//AstInequality:
		//	tags+=AstTag ('>' tags+=AstTag)+ ';';
		@Override public ParserRule getRule() { return rule; }
		
		//tags+=AstTag ('>' tags+=AstTag)+ ';'
		public Group getGroup() { return cGroup; }
		
		//tags+=AstTag
		public Assignment getTagsAssignment_0() { return cTagsAssignment_0; }
		
		//AstTag
		public RuleCall getTagsAstTagParserRuleCall_0_0() { return cTagsAstTagParserRuleCall_0_0; }
		
		//('>' tags+=AstTag)+
		public Group getGroup_1() { return cGroup_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_0() { return cGreaterThanSignKeyword_1_0; }
		
		//tags+=AstTag
		public Assignment getTagsAssignment_1_1() { return cTagsAssignment_1_1; }
		
		//AstTag
		public RuleCall getTagsAstTagParserRuleCall_1_1_0() { return cTagsAstTagParserRuleCall_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class AstPriorityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstPriority");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstPriorityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPriorityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInequalitiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInequalitiesAstInequalityParserRuleCall_2_0 = (RuleCall)cInequalitiesAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AstPriority:
		//	{AstPriority}
		//	'priority'
		//	inequalities+=AstInequality*
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{AstPriority} 'priority' inequalities+=AstInequality* 'end'
		public Group getGroup() { return cGroup; }
		
		//{AstPriority}
		public Action getAstPriorityAction_0() { return cAstPriorityAction_0; }
		
		//'priority'
		public Keyword getPriorityKeyword_1() { return cPriorityKeyword_1; }
		
		//inequalities+=AstInequality*
		public Assignment getInequalitiesAssignment_2() { return cInequalitiesAssignment_2; }
		
		//AstInequality
		public RuleCall getInequalitiesAstInequalityParserRuleCall_2_0() { return cInequalitiesAstInequalityParserRuleCall_2_0; }
		
		//'end'
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}
	public class AstScheduleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstSchedule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScheduleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFsmKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInitialStateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cInitialStateAstStateCrossReference_2_0 = (CrossReference)cInitialStateAssignment_2.eContents().get(0);
		private final RuleCall cInitialStateAstStateIDTerminalRuleCall_2_0_1 = (RuleCall)cInitialStateAstStateCrossReference_2_0.eContents().get(1);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTransitionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTransitionsAstTransitionParserRuleCall_4_0 = (RuleCall)cTransitionsAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cEndKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Keyword cEndscheduleKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		
		//// -- /////////////////////////////////////////////////////////////////////////////
		//// -- Schedule
		//// -- /////////////////////////////////////////////////////////////////////////////
		//AstSchedule:
		//	'schedule' 'fsm' initialState=[AstState] ':'
		//	transitions+=AstTransition* ('end' | 'endschedule');
		@Override public ParserRule getRule() { return rule; }
		
		//'schedule' 'fsm' initialState=[AstState] ':' transitions+=AstTransition* ('end' | 'endschedule')
		public Group getGroup() { return cGroup; }
		
		//'schedule'
		public Keyword getScheduleKeyword_0() { return cScheduleKeyword_0; }
		
		//'fsm'
		public Keyword getFsmKeyword_1() { return cFsmKeyword_1; }
		
		//initialState=[AstState]
		public Assignment getInitialStateAssignment_2() { return cInitialStateAssignment_2; }
		
		//[AstState]
		public CrossReference getInitialStateAstStateCrossReference_2_0() { return cInitialStateAstStateCrossReference_2_0; }
		
		//ID
		public RuleCall getInitialStateAstStateIDTerminalRuleCall_2_0_1() { return cInitialStateAstStateIDTerminalRuleCall_2_0_1; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//transitions+=AstTransition*
		public Assignment getTransitionsAssignment_4() { return cTransitionsAssignment_4; }
		
		//AstTransition
		public RuleCall getTransitionsAstTransitionParserRuleCall_4_0() { return cTransitionsAstTransitionParserRuleCall_4_0; }
		
		//('end' | 'endschedule')
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//'end'
		public Keyword getEndKeyword_5_0() { return cEndKeyword_5_0; }
		
		//'endschedule'
		public Keyword getEndscheduleKeyword_5_1() { return cEndscheduleKeyword_5_1; }
	}
	public class AstTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceAstStateCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceAstStateIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceAstStateCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTagsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTagsAstTagParserRuleCall_2_0 = (RuleCall)cTagsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTagsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTagsAstTagParserRuleCall_3_1_0 = (RuleCall)cTagsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTargetAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cTargetAstStateCrossReference_6_0 = (CrossReference)cTargetAssignment_6.eContents().get(0);
		private final RuleCall cTargetAstStateIDTerminalRuleCall_6_0_1 = (RuleCall)cTargetAstStateCrossReference_6_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//AstTransition:
		//	source=[AstState] '(' tags+=AstTag (',' tags+=AstTag)* ')' '-->' target=[AstState] ';';
		@Override public ParserRule getRule() { return rule; }
		
		//source=[AstState] '(' tags+=AstTag (',' tags+=AstTag)* ')' '-->' target=[AstState] ';'
		public Group getGroup() { return cGroup; }
		
		//source=[AstState]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[AstState]
		public CrossReference getSourceAstStateCrossReference_0_0() { return cSourceAstStateCrossReference_0_0; }
		
		//ID
		public RuleCall getSourceAstStateIDTerminalRuleCall_0_0_1() { return cSourceAstStateIDTerminalRuleCall_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//tags+=AstTag
		public Assignment getTagsAssignment_2() { return cTagsAssignment_2; }
		
		//AstTag
		public RuleCall getTagsAstTagParserRuleCall_2_0() { return cTagsAstTagParserRuleCall_2_0; }
		
		//(',' tags+=AstTag)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//tags+=AstTag
		public Assignment getTagsAssignment_3_1() { return cTagsAssignment_3_1; }
		
		//AstTag
		public RuleCall getTagsAstTagParserRuleCall_3_1_0() { return cTagsAstTagParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'-->'
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_5() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_5; }
		
		//target=[AstState]
		public Assignment getTargetAssignment_6() { return cTargetAssignment_6; }
		
		//[AstState]
		public CrossReference getTargetAstStateCrossReference_6_0() { return cTargetAstStateCrossReference_6_0; }
		
		//ID
		public RuleCall getTargetAstStateIDTerminalRuleCall_6_0_1() { return cTargetAstStateIDTerminalRuleCall_6_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class AstStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstState");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//AstState:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class AstScheduleRegExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstScheduleRegExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScheduleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRegexpKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpRegExpParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// regular expression schedule
		//AstScheduleRegExp RegExp:
		//	'schedule' 'regexp' exp=RegExp 'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'schedule' 'regexp' exp=RegExp 'end'
		public Group getGroup() { return cGroup; }
		
		//'schedule'
		public Keyword getScheduleKeyword_0() { return cScheduleKeyword_0; }
		
		//'regexp'
		public Keyword getRegexpKeyword_1() { return cRegexpKeyword_1; }
		
		//exp=RegExp
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//RegExp
		public RuleCall getExpRegExpParserRuleCall_2_0() { return cExpRegExpParserRuleCall_2_0; }
		
		//'end'
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}
	public class RegExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.RegExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRegExpConcatenationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRegExpBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorVerticalLineKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightRegExpConcatenationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//RegExp:
		//	RegExpConcatenation ({RegExpBinary.left=current} operator='|' right=RegExpConcatenation)*;
		@Override public ParserRule getRule() { return rule; }
		
		//RegExpConcatenation ({RegExpBinary.left=current} operator='|' right=RegExpConcatenation)*
		public Group getGroup() { return cGroup; }
		
		//RegExpConcatenation
		public RuleCall getRegExpConcatenationParserRuleCall_0() { return cRegExpConcatenationParserRuleCall_0; }
		
		//({RegExpBinary.left=current} operator='|' right=RegExpConcatenation)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{RegExpBinary.left=current}
		public Action getRegExpBinaryLeftAction_1_0() { return cRegExpBinaryLeftAction_1_0; }
		
		//operator='|'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'|'
		public Keyword getOperatorVerticalLineKeyword_1_1_0() { return cOperatorVerticalLineKeyword_1_1_0; }
		
		//right=RegExpConcatenation
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//RegExpConcatenation
		public RuleCall getRightRegExpConcatenationParserRuleCall_1_2_0() { return cRightRegExpConcatenationParserRuleCall_1_2_0; }
	}
	public class RegExpConcatenationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.RegExpConcatenation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRegExpPostfixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRegExpBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightRegExpPostfixParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//RegExpConcatenation RegExp:
		//	RegExpPostfix ({RegExpBinary.left=current} right=RegExpPostfix)*;
		@Override public ParserRule getRule() { return rule; }
		
		//RegExpPostfix ({RegExpBinary.left=current} right=RegExpPostfix)*
		public Group getGroup() { return cGroup; }
		
		//RegExpPostfix
		public RuleCall getRegExpPostfixParserRuleCall_0() { return cRegExpPostfixParserRuleCall_0; }
		
		//({RegExpBinary.left=current} right=RegExpPostfix)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{RegExpBinary.left=current}
		public Action getRegExpBinaryLeftAction_1_0() { return cRegExpBinaryLeftAction_1_0; }
		
		//right=RegExpPostfix
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//RegExpPostfix
		public RuleCall getRightRegExpPostfixParserRuleCall_1_1_0() { return cRightRegExpPostfixParserRuleCall_1_1_0; }
	}
	public class RegExpPostfixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.RegExpPostfix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRegExpGroupingParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRegExpUnaryChildAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cUnaryOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cUnaryOperatorAlternatives_1_1_0 = (Alternatives)cUnaryOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cUnaryOperatorAsteriskKeyword_1_1_0_0 = (Keyword)cUnaryOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cUnaryOperatorQuestionMarkKeyword_1_1_0_1 = (Keyword)cUnaryOperatorAlternatives_1_1_0.eContents().get(1);
		
		//RegExpPostfix RegExp:
		//	RegExpGrouping ({RegExpUnary.child=current} unaryOperator=('*' | '?'))*;
		@Override public ParserRule getRule() { return rule; }
		
		//RegExpGrouping ({RegExpUnary.child=current} unaryOperator=('*' | '?'))*
		public Group getGroup() { return cGroup; }
		
		//RegExpGrouping
		public RuleCall getRegExpGroupingParserRuleCall_0() { return cRegExpGroupingParserRuleCall_0; }
		
		//({RegExpUnary.child=current} unaryOperator=('*' | '?'))*
		public Group getGroup_1() { return cGroup_1; }
		
		//{RegExpUnary.child=current}
		public Action getRegExpUnaryChildAction_1_0() { return cRegExpUnaryChildAction_1_0; }
		
		//unaryOperator=('*' | '?')
		public Assignment getUnaryOperatorAssignment_1_1() { return cUnaryOperatorAssignment_1_1; }
		
		//('*' | '?')
		public Alternatives getUnaryOperatorAlternatives_1_1_0() { return cUnaryOperatorAlternatives_1_1_0; }
		
		//'*'
		public Keyword getUnaryOperatorAsteriskKeyword_1_1_0_0() { return cUnaryOperatorAsteriskKeyword_1_1_0_0; }
		
		//'?'
		public Keyword getUnaryOperatorQuestionMarkKeyword_1_1_0_1() { return cUnaryOperatorQuestionMarkKeyword_1_1_0_1; }
	}
	public class RegExpGroupingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.RegExpGrouping");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRegExpTerminalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cRegExpParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//RegExpGrouping RegExp:
		//	RegExpTerminal
		//	| '(' RegExp ')';
		@Override public ParserRule getRule() { return rule; }
		
		//RegExpTerminal | '(' RegExp ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RegExpTerminal
		public RuleCall getRegExpTerminalParserRuleCall_0() { return cRegExpTerminalParserRuleCall_0; }
		
		//'(' RegExp ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//RegExp
		public RuleCall getRegExpParserRuleCall_1_1() { return cRegExpParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class RegExpTerminalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.RegExpTerminal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRegExpTagAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTagAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTagAstTagParserRuleCall_1_0 = (RuleCall)cTagAssignment_1.eContents().get(0);
		
		//RegExpTerminal RegExp:
		//	{RegExpTag} tag=AstTag;
		@Override public ParserRule getRule() { return rule; }
		
		//{RegExpTag} tag=AstTag
		public Group getGroup() { return cGroup; }
		
		//{RegExpTag}
		public Action getRegExpTagAction_0() { return cRegExpTagAction_0; }
		
		//tag=AstTag
		public Assignment getTagAssignment_1() { return cTagAssignment_1; }
		
		//AstTag
		public RuleCall getTagAstTagParserRuleCall_1_0() { return cTagAstTagParserRuleCall_1_0; }
	}
	public class AstActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAstAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cTagAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTagAstTagParserRuleCall_2_0_0 = (RuleCall)cTagAssignment_2_0.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cActionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cInputsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cInputsAstInputPatternParserRuleCall_4_0_0 = (RuleCall)cInputsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cInputsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cInputsAstInputPatternParserRuleCall_4_1_1_0 = (RuleCall)cInputsAssignment_4_1_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cOutputsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cOutputsAstOutputExpressionParserRuleCall_6_0_0 = (RuleCall)cOutputsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cOutputsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cOutputsAstOutputExpressionParserRuleCall_6_1_1_0 = (RuleCall)cOutputsAssignment_6_1_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cGuardKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cGuardsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cGuardsAstExpressionParserRuleCall_7_1_0 = (RuleCall)cGuardsAssignment_7_1.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cCommaKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Assignment cGuardsAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final RuleCall cGuardsAstExpressionParserRuleCall_7_2_1_0 = (RuleCall)cGuardsAssignment_7_2_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cVarKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cVariablesAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cVariablesAstValuedVariableDeclarationParserRuleCall_8_1_0 = (RuleCall)cVariablesAssignment_8_1.eContents().get(0);
		private final Group cGroup_8_2 = (Group)cGroup_8.eContents().get(2);
		private final Keyword cCommaKeyword_8_2_0 = (Keyword)cGroup_8_2.eContents().get(0);
		private final Assignment cVariablesAssignment_8_2_1 = (Assignment)cGroup_8_2.eContents().get(1);
		private final RuleCall cVariablesAstValuedVariableDeclarationParserRuleCall_8_2_1_0 = (RuleCall)cVariablesAssignment_8_2_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cDoKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cStatementsAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cStatementsAstStatementParserRuleCall_9_1_0 = (RuleCall)cStatementsAssignment_9_1.eContents().get(0);
		private final Keyword cEndKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//// -- /////////////////////////////////////////////////////////////////////////////
		//// -- Actions
		//// -- /////////////////////////////////////////////////////////////////////////////
		//AstAction:
		//	{AstAction} annotations+=AstAnnotation* (tag=AstTag ':')?
		//	'action' (inputs+=AstInputPattern (',' inputs+=AstInputPattern)*)?
		//	'==>' (outputs+=AstOutputExpression (',' outputs+=AstOutputExpression)*)? ('guard' guards+=AstExpression (','
		//	guards+=AstExpression)*)? ('var'
		//	variables+=AstValuedVariableDeclaration (',' variables+=AstValuedVariableDeclaration)*)? ('do'
		//	statements+=AstStatement*)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{AstAction} annotations+=AstAnnotation* (tag=AstTag ':')? 'action' (inputs+=AstInputPattern (','
		//inputs+=AstInputPattern)*)? '==>' (outputs+=AstOutputExpression (',' outputs+=AstOutputExpression)*)? ('guard'
		//guards+=AstExpression (',' guards+=AstExpression)*)? ('var' variables+=AstValuedVariableDeclaration (','
		//variables+=AstValuedVariableDeclaration)*)? ('do' statements+=AstStatement*)? 'end'
		public Group getGroup() { return cGroup; }
		
		//{AstAction}
		public Action getAstActionAction_0() { return cAstActionAction_0; }
		
		//annotations+=AstAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//AstAnnotation
		public RuleCall getAnnotationsAstAnnotationParserRuleCall_1_0() { return cAnnotationsAstAnnotationParserRuleCall_1_0; }
		
		//(tag=AstTag ':')?
		public Group getGroup_2() { return cGroup_2; }
		
		//tag=AstTag
		public Assignment getTagAssignment_2_0() { return cTagAssignment_2_0; }
		
		//AstTag
		public RuleCall getTagAstTagParserRuleCall_2_0_0() { return cTagAstTagParserRuleCall_2_0_0; }
		
		//':'
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//'action'
		public Keyword getActionKeyword_3() { return cActionKeyword_3; }
		
		//(inputs+=AstInputPattern (',' inputs+=AstInputPattern)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//inputs+=AstInputPattern
		public Assignment getInputsAssignment_4_0() { return cInputsAssignment_4_0; }
		
		//AstInputPattern
		public RuleCall getInputsAstInputPatternParserRuleCall_4_0_0() { return cInputsAstInputPatternParserRuleCall_4_0_0; }
		
		//(',' inputs+=AstInputPattern)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//inputs+=AstInputPattern
		public Assignment getInputsAssignment_4_1_1() { return cInputsAssignment_4_1_1; }
		
		//AstInputPattern
		public RuleCall getInputsAstInputPatternParserRuleCall_4_1_1_0() { return cInputsAstInputPatternParserRuleCall_4_1_1_0; }
		
		//'==>'
		public Keyword getEqualsSignEqualsSignGreaterThanSignKeyword_5() { return cEqualsSignEqualsSignGreaterThanSignKeyword_5; }
		
		//(outputs+=AstOutputExpression (',' outputs+=AstOutputExpression)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//outputs+=AstOutputExpression
		public Assignment getOutputsAssignment_6_0() { return cOutputsAssignment_6_0; }
		
		//AstOutputExpression
		public RuleCall getOutputsAstOutputExpressionParserRuleCall_6_0_0() { return cOutputsAstOutputExpressionParserRuleCall_6_0_0; }
		
		//(',' outputs+=AstOutputExpression)*
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//','
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }
		
		//outputs+=AstOutputExpression
		public Assignment getOutputsAssignment_6_1_1() { return cOutputsAssignment_6_1_1; }
		
		//AstOutputExpression
		public RuleCall getOutputsAstOutputExpressionParserRuleCall_6_1_1_0() { return cOutputsAstOutputExpressionParserRuleCall_6_1_1_0; }
		
		//('guard' guards+=AstExpression (',' guards+=AstExpression)*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'guard'
		public Keyword getGuardKeyword_7_0() { return cGuardKeyword_7_0; }
		
		//guards+=AstExpression
		public Assignment getGuardsAssignment_7_1() { return cGuardsAssignment_7_1; }
		
		//AstExpression
		public RuleCall getGuardsAstExpressionParserRuleCall_7_1_0() { return cGuardsAstExpressionParserRuleCall_7_1_0; }
		
		//(',' guards+=AstExpression)*
		public Group getGroup_7_2() { return cGroup_7_2; }
		
		//','
		public Keyword getCommaKeyword_7_2_0() { return cCommaKeyword_7_2_0; }
		
		//guards+=AstExpression
		public Assignment getGuardsAssignment_7_2_1() { return cGuardsAssignment_7_2_1; }
		
		//AstExpression
		public RuleCall getGuardsAstExpressionParserRuleCall_7_2_1_0() { return cGuardsAstExpressionParserRuleCall_7_2_1_0; }
		
		//('var' variables+=AstValuedVariableDeclaration (',' variables+=AstValuedVariableDeclaration)*)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'var'
		public Keyword getVarKeyword_8_0() { return cVarKeyword_8_0; }
		
		//variables+=AstValuedVariableDeclaration
		public Assignment getVariablesAssignment_8_1() { return cVariablesAssignment_8_1; }
		
		//AstValuedVariableDeclaration
		public RuleCall getVariablesAstValuedVariableDeclarationParserRuleCall_8_1_0() { return cVariablesAstValuedVariableDeclarationParserRuleCall_8_1_0; }
		
		//(',' variables+=AstValuedVariableDeclaration)*
		public Group getGroup_8_2() { return cGroup_8_2; }
		
		//','
		public Keyword getCommaKeyword_8_2_0() { return cCommaKeyword_8_2_0; }
		
		//variables+=AstValuedVariableDeclaration
		public Assignment getVariablesAssignment_8_2_1() { return cVariablesAssignment_8_2_1; }
		
		//AstValuedVariableDeclaration
		public RuleCall getVariablesAstValuedVariableDeclarationParserRuleCall_8_2_1_0() { return cVariablesAstValuedVariableDeclarationParserRuleCall_8_2_1_0; }
		
		//('do' statements+=AstStatement*)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'do'
		public Keyword getDoKeyword_9_0() { return cDoKeyword_9_0; }
		
		//statements+=AstStatement*
		public Assignment getStatementsAssignment_9_1() { return cStatementsAssignment_9_1; }
		
		//AstStatement
		public RuleCall getStatementsAstStatementParserRuleCall_9_1_0() { return cStatementsAstStatementParserRuleCall_9_1_0; }
		
		//'end'
		public Keyword getEndKeyword_10() { return cEndKeyword_10; }
	}
	public class AstInitializeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstInitialize");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstInitializeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAstAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cTagAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTagAstTagParserRuleCall_2_0_0 = (RuleCall)cTagAssignment_2_0.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cInitializeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignEqualsSignGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cOutputsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cOutputsAstOutputExpressionParserRuleCall_5_0_0 = (RuleCall)cOutputsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cOutputsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cOutputsAstOutputExpressionParserRuleCall_5_1_1_0 = (RuleCall)cOutputsAssignment_5_1_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cGuardKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cGuardsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cGuardsAstExpressionParserRuleCall_6_1_0 = (RuleCall)cGuardsAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cGuardsAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cGuardsAstExpressionParserRuleCall_6_2_1_0 = (RuleCall)cGuardsAssignment_6_2_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cVarKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cVariablesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cVariablesAstValuedVariableDeclarationParserRuleCall_7_1_0 = (RuleCall)cVariablesAssignment_7_1.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cCommaKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Assignment cVariablesAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final RuleCall cVariablesAstValuedVariableDeclarationParserRuleCall_7_2_1_0 = (RuleCall)cVariablesAssignment_7_2_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cDoKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cStatementsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cStatementsAstStatementParserRuleCall_8_1_0 = (RuleCall)cStatementsAssignment_8_1.eContents().get(0);
		private final Keyword cEndKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//AstInitialize AstAction:
		//	{AstInitialize} annotations+=AstAnnotation* (tag=AstTag ':')?
		//	'initialize'
		//	'==>' (outputs+=AstOutputExpression (',' outputs+=AstOutputExpression)*)? ('guard' guards+=AstExpression (','
		//	guards+=AstExpression)*)? ('var'
		//	variables+=AstValuedVariableDeclaration (',' variables+=AstValuedVariableDeclaration)*)? ('do'
		//	statements+=AstStatement*)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{AstInitialize} annotations+=AstAnnotation* (tag=AstTag ':')? 'initialize' '==>' (outputs+=AstOutputExpression (','
		//outputs+=AstOutputExpression)*)? ('guard' guards+=AstExpression (',' guards+=AstExpression)*)? ('var'
		//variables+=AstValuedVariableDeclaration (',' variables+=AstValuedVariableDeclaration)*)? ('do'
		//statements+=AstStatement*)? 'end'
		public Group getGroup() { return cGroup; }
		
		//{AstInitialize}
		public Action getAstInitializeAction_0() { return cAstInitializeAction_0; }
		
		//annotations+=AstAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }
		
		//AstAnnotation
		public RuleCall getAnnotationsAstAnnotationParserRuleCall_1_0() { return cAnnotationsAstAnnotationParserRuleCall_1_0; }
		
		//(tag=AstTag ':')?
		public Group getGroup_2() { return cGroup_2; }
		
		//tag=AstTag
		public Assignment getTagAssignment_2_0() { return cTagAssignment_2_0; }
		
		//AstTag
		public RuleCall getTagAstTagParserRuleCall_2_0_0() { return cTagAstTagParserRuleCall_2_0_0; }
		
		//':'
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//'initialize'
		public Keyword getInitializeKeyword_3() { return cInitializeKeyword_3; }
		
		//'==>'
		public Keyword getEqualsSignEqualsSignGreaterThanSignKeyword_4() { return cEqualsSignEqualsSignGreaterThanSignKeyword_4; }
		
		//(outputs+=AstOutputExpression (',' outputs+=AstOutputExpression)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//outputs+=AstOutputExpression
		public Assignment getOutputsAssignment_5_0() { return cOutputsAssignment_5_0; }
		
		//AstOutputExpression
		public RuleCall getOutputsAstOutputExpressionParserRuleCall_5_0_0() { return cOutputsAstOutputExpressionParserRuleCall_5_0_0; }
		
		//(',' outputs+=AstOutputExpression)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//','
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//outputs+=AstOutputExpression
		public Assignment getOutputsAssignment_5_1_1() { return cOutputsAssignment_5_1_1; }
		
		//AstOutputExpression
		public RuleCall getOutputsAstOutputExpressionParserRuleCall_5_1_1_0() { return cOutputsAstOutputExpressionParserRuleCall_5_1_1_0; }
		
		//('guard' guards+=AstExpression (',' guards+=AstExpression)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'guard'
		public Keyword getGuardKeyword_6_0() { return cGuardKeyword_6_0; }
		
		//guards+=AstExpression
		public Assignment getGuardsAssignment_6_1() { return cGuardsAssignment_6_1; }
		
		//AstExpression
		public RuleCall getGuardsAstExpressionParserRuleCall_6_1_0() { return cGuardsAstExpressionParserRuleCall_6_1_0; }
		
		//(',' guards+=AstExpression)*
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//','
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }
		
		//guards+=AstExpression
		public Assignment getGuardsAssignment_6_2_1() { return cGuardsAssignment_6_2_1; }
		
		//AstExpression
		public RuleCall getGuardsAstExpressionParserRuleCall_6_2_1_0() { return cGuardsAstExpressionParserRuleCall_6_2_1_0; }
		
		//('var' variables+=AstValuedVariableDeclaration (',' variables+=AstValuedVariableDeclaration)*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'var'
		public Keyword getVarKeyword_7_0() { return cVarKeyword_7_0; }
		
		//variables+=AstValuedVariableDeclaration
		public Assignment getVariablesAssignment_7_1() { return cVariablesAssignment_7_1; }
		
		//AstValuedVariableDeclaration
		public RuleCall getVariablesAstValuedVariableDeclarationParserRuleCall_7_1_0() { return cVariablesAstValuedVariableDeclarationParserRuleCall_7_1_0; }
		
		//(',' variables+=AstValuedVariableDeclaration)*
		public Group getGroup_7_2() { return cGroup_7_2; }
		
		//','
		public Keyword getCommaKeyword_7_2_0() { return cCommaKeyword_7_2_0; }
		
		//variables+=AstValuedVariableDeclaration
		public Assignment getVariablesAssignment_7_2_1() { return cVariablesAssignment_7_2_1; }
		
		//AstValuedVariableDeclaration
		public RuleCall getVariablesAstValuedVariableDeclarationParserRuleCall_7_2_1_0() { return cVariablesAstValuedVariableDeclarationParserRuleCall_7_2_1_0; }
		
		//('do' statements+=AstStatement*)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'do'
		public Keyword getDoKeyword_8_0() { return cDoKeyword_8_0; }
		
		//statements+=AstStatement*
		public Assignment getStatementsAssignment_8_1() { return cStatementsAssignment_8_1; }
		
		//AstStatement
		public RuleCall getStatementsAstStatementParserRuleCall_8_1_0() { return cStatementsAstStatementParserRuleCall_8_1_0; }
		
		//'end'
		public Keyword getEndKeyword_9() { return cEndKeyword_9; }
	}
	public class AstInputPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstInputPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cPortAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cPortAstPortCrossReference_0_0_0 = (CrossReference)cPortAssignment_0_0.eContents().get(0);
		private final RuleCall cPortAstPortIDTerminalRuleCall_0_0_0_1 = (RuleCall)cPortAstPortCrossReference_0_0_0.eContents().get(1);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTokensAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTokensAstPatternParserRuleCall_2_0 = (RuleCall)cTokensAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTokensAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTokensAstPatternParserRuleCall_3_1_0 = (RuleCall)cTokensAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cRepeatKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRepeatAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRepeatAstExpressionParserRuleCall_5_1_0 = (RuleCall)cRepeatAssignment_5_1.eContents().get(0);
		
		//AstInputPattern:
		//	(port=[AstPort] ':')? '[' tokens+=AstPattern (',' tokens+=AstPattern)* ']' ('repeat' repeat=AstExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(port=[AstPort] ':')? '[' tokens+=AstPattern (',' tokens+=AstPattern)* ']' ('repeat' repeat=AstExpression)?
		public Group getGroup() { return cGroup; }
		
		//(port=[AstPort] ':')?
		public Group getGroup_0() { return cGroup_0; }
		
		//port=[AstPort]
		public Assignment getPortAssignment_0_0() { return cPortAssignment_0_0; }
		
		//[AstPort]
		public CrossReference getPortAstPortCrossReference_0_0_0() { return cPortAstPortCrossReference_0_0_0; }
		
		//ID
		public RuleCall getPortAstPortIDTerminalRuleCall_0_0_0_1() { return cPortAstPortIDTerminalRuleCall_0_0_0_1; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//tokens+=AstPattern
		public Assignment getTokensAssignment_2() { return cTokensAssignment_2; }
		
		//AstPattern
		public RuleCall getTokensAstPatternParserRuleCall_2_0() { return cTokensAstPatternParserRuleCall_2_0; }
		
		//(',' tokens+=AstPattern)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//tokens+=AstPattern
		public Assignment getTokensAssignment_3_1() { return cTokensAssignment_3_1; }
		
		//AstPattern
		public RuleCall getTokensAstPatternParserRuleCall_3_1_0() { return cTokensAstPatternParserRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
		
		//('repeat' repeat=AstExpression)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'repeat'
		public Keyword getRepeatKeyword_5_0() { return cRepeatKeyword_5_0; }
		
		//repeat=AstExpression
		public Assignment getRepeatAssignment_5_1() { return cRepeatAssignment_5_1; }
		
		//AstExpression
		public RuleCall getRepeatAstExpressionParserRuleCall_5_1_0() { return cRepeatAstExpressionParserRuleCall_5_1_0; }
	}
	public class AstTokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstToken");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//AstToken AstVariable:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class AstOutputExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstOutputExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cPortAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cPortAstPortCrossReference_0_0_0 = (CrossReference)cPortAssignment_0_0.eContents().get(0);
		private final RuleCall cPortAstPortIDTerminalRuleCall_0_0_0_1 = (RuleCall)cPortAstPortCrossReference_0_0_0.eContents().get(1);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesAstExpressionParserRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValuesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValuesAstExpressionParserRuleCall_3_1_0 = (RuleCall)cValuesAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cRepeatKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRepeatAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRepeatAstExpressionParserRuleCall_5_1_0 = (RuleCall)cRepeatAssignment_5_1.eContents().get(0);
		
		//AstOutputExpression:
		//	(port=[AstPort] ':')? '[' values+=AstExpression (',' values+=AstExpression)* ']' ('repeat' repeat=AstExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(port=[AstPort] ':')? '[' values+=AstExpression (',' values+=AstExpression)* ']' ('repeat' repeat=AstExpression)?
		public Group getGroup() { return cGroup; }
		
		//(port=[AstPort] ':')?
		public Group getGroup_0() { return cGroup_0; }
		
		//port=[AstPort]
		public Assignment getPortAssignment_0_0() { return cPortAssignment_0_0; }
		
		//[AstPort]
		public CrossReference getPortAstPortCrossReference_0_0_0() { return cPortAstPortCrossReference_0_0_0; }
		
		//ID
		public RuleCall getPortAstPortIDTerminalRuleCall_0_0_0_1() { return cPortAstPortIDTerminalRuleCall_0_0_0_1; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//values+=AstExpression
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }
		
		//AstExpression
		public RuleCall getValuesAstExpressionParserRuleCall_2_0() { return cValuesAstExpressionParserRuleCall_2_0; }
		
		//(',' values+=AstExpression)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//values+=AstExpression
		public Assignment getValuesAssignment_3_1() { return cValuesAssignment_3_1; }
		
		//AstExpression
		public RuleCall getValuesAstExpressionParserRuleCall_3_1_0() { return cValuesAstExpressionParserRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
		
		//('repeat' repeat=AstExpression)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'repeat'
		public Keyword getRepeatKeyword_5_0() { return cRepeatKeyword_5_0; }
		
		//repeat=AstExpression
		public Assignment getRepeatAssignment_5_1() { return cRepeatAssignment_5_1; }
		
		//AstExpression
		public RuleCall getRepeatAstExpressionParserRuleCall_5_1_0() { return cRepeatAstExpressionParserRuleCall_5_1_0; }
	}
	public class AstStatementAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstStatementAssign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLvalueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLvalueAstLValueParserRuleCall_0_0 = (RuleCall)cLvalueAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueAstExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// -- /////////////////////////////////////////////////////////////////////////////
		//// statements
		//// -- /////////////////////////////////////////////////////////////////////////////
		//AstStatementAssign:
		//	lvalue=AstLValue ':=' value=AstExpression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//lvalue=AstLValue ':=' value=AstExpression ';'
		public Group getGroup() { return cGroup; }
		
		//lvalue=AstLValue
		public Assignment getLvalueAssignment_0() { return cLvalueAssignment_0; }
		
		//AstLValue
		public RuleCall getLvalueAstLValueParserRuleCall_0_0() { return cLvalueAstLValueParserRuleCall_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//value=AstExpression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//AstExpression
		public RuleCall getValueAstExpressionParserRuleCall_2_0() { return cValueAstExpressionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class AstStatementCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstStatementCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAstAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cProcedureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cProcedureAstProcedureCrossReference_1_0 = (CrossReference)cProcedureAssignment_1.eContents().get(0);
		private final RuleCall cProcedureAstProcedureIDTerminalRuleCall_1_0_1 = (RuleCall)cProcedureAstProcedureCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersAstExpressionParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersAstExpressionParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AstStatementCall:
		//	annotations+=AstAnnotation*
		//	procedure=[AstProcedure]
		//	'(' (parameters+=AstExpression (',' parameters+=AstExpression)*)? ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=AstAnnotation* procedure=[AstProcedure] '(' (parameters+=AstExpression (',' parameters+=AstExpression)*)?
		//')' ';'
		public Group getGroup() { return cGroup; }
		
		//annotations+=AstAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//AstAnnotation
		public RuleCall getAnnotationsAstAnnotationParserRuleCall_0_0() { return cAnnotationsAstAnnotationParserRuleCall_0_0; }
		
		//procedure=[AstProcedure]
		public Assignment getProcedureAssignment_1() { return cProcedureAssignment_1; }
		
		//[AstProcedure]
		public CrossReference getProcedureAstProcedureCrossReference_1_0() { return cProcedureAstProcedureCrossReference_1_0; }
		
		//ID
		public RuleCall getProcedureAstProcedureIDTerminalRuleCall_1_0_1() { return cProcedureAstProcedureIDTerminalRuleCall_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(parameters+=AstExpression (',' parameters+=AstExpression)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//parameters+=AstExpression
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }
		
		//AstExpression
		public RuleCall getParametersAstExpressionParserRuleCall_3_0_0() { return cParametersAstExpressionParserRuleCall_3_0_0; }
		
		//(',' parameters+=AstExpression)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//parameters+=AstExpression
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }
		
		//AstExpression
		public RuleCall getParametersAstExpressionParserRuleCall_3_1_1_0() { return cParametersAstExpressionParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class AstStatementForeachElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstStatementForeach");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForeachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGeneratorsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGeneratorsAstForeachGeneratorParserRuleCall_1_0 = (RuleCall)cGeneratorsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cGeneratorsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cGeneratorsAstForeachGeneratorParserRuleCall_2_1_0 = (RuleCall)cGeneratorsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cVarKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVariablesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVariablesAstValuedVariableDeclarationParserRuleCall_3_1_0 = (RuleCall)cVariablesAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cVariablesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cVariablesAstValuedVariableDeclarationParserRuleCall_3_2_1_0 = (RuleCall)cVariablesAssignment_3_2_1.eContents().get(0);
		private final Keyword cDoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsAstStatementParserRuleCall_5_0 = (RuleCall)cStatementsAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//AstStatementForeach:
		//	'foreach' generators+=AstForeachGenerator ("," generators+=AstForeachGenerator)* ('var'
		//	variables+=AstValuedVariableDeclaration (',' variables+=AstValuedVariableDeclaration)*)?
		//	'do'
		//	statements+=AstStatement*
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'foreach' generators+=AstForeachGenerator ("," generators+=AstForeachGenerator)* ('var'
		//variables+=AstValuedVariableDeclaration (',' variables+=AstValuedVariableDeclaration)*)? 'do' statements+=AstStatement*
		//'end'
		public Group getGroup() { return cGroup; }
		
		//'foreach'
		public Keyword getForeachKeyword_0() { return cForeachKeyword_0; }
		
		//generators+=AstForeachGenerator
		public Assignment getGeneratorsAssignment_1() { return cGeneratorsAssignment_1; }
		
		//AstForeachGenerator
		public RuleCall getGeneratorsAstForeachGeneratorParserRuleCall_1_0() { return cGeneratorsAstForeachGeneratorParserRuleCall_1_0; }
		
		//("," generators+=AstForeachGenerator)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//generators+=AstForeachGenerator
		public Assignment getGeneratorsAssignment_2_1() { return cGeneratorsAssignment_2_1; }
		
		//AstForeachGenerator
		public RuleCall getGeneratorsAstForeachGeneratorParserRuleCall_2_1_0() { return cGeneratorsAstForeachGeneratorParserRuleCall_2_1_0; }
		
		//('var' variables+=AstValuedVariableDeclaration (',' variables+=AstValuedVariableDeclaration)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'var'
		public Keyword getVarKeyword_3_0() { return cVarKeyword_3_0; }
		
		//variables+=AstValuedVariableDeclaration
		public Assignment getVariablesAssignment_3_1() { return cVariablesAssignment_3_1; }
		
		//AstValuedVariableDeclaration
		public RuleCall getVariablesAstValuedVariableDeclarationParserRuleCall_3_1_0() { return cVariablesAstValuedVariableDeclarationParserRuleCall_3_1_0; }
		
		//(',' variables+=AstValuedVariableDeclaration)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//variables+=AstValuedVariableDeclaration
		public Assignment getVariablesAssignment_3_2_1() { return cVariablesAssignment_3_2_1; }
		
		//AstValuedVariableDeclaration
		public RuleCall getVariablesAstValuedVariableDeclarationParserRuleCall_3_2_1_0() { return cVariablesAstValuedVariableDeclarationParserRuleCall_3_2_1_0; }
		
		//'do'
		public Keyword getDoKeyword_4() { return cDoKeyword_4; }
		
		//statements+=AstStatement*
		public Assignment getStatementsAssignment_5() { return cStatementsAssignment_5; }
		
		//AstStatement
		public RuleCall getStatementsAstStatementParserRuleCall_5_0() { return cStatementsAstStatementParserRuleCall_5_0; }
		
		//'end'
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}
	public class AstForeachGeneratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstForeachGenerator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableAstVariableDeclarationParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionAstExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//AstForeachGenerator:
		//	variable=AstVariableDeclaration 'in' expression=AstExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=AstVariableDeclaration 'in' expression=AstExpression
		public Group getGroup() { return cGroup; }
		
		//variable=AstVariableDeclaration
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//AstVariableDeclaration
		public RuleCall getVariableAstVariableDeclarationParserRuleCall_0_0() { return cVariableAstVariableDeclarationParserRuleCall_0_0; }
		
		//'in'
		public Keyword getInKeyword_1() { return cInKeyword_1; }
		
		//expression=AstExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//AstExpression
		public RuleCall getExpressionAstExpressionParserRuleCall_2_0() { return cExpressionAstExpressionParserRuleCall_2_0; }
	}
	public class AstStatementBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstStatementBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstStatementBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBeginKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cVarKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariablesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariablesAstValuedVariableDeclarationParserRuleCall_2_1_0 = (RuleCall)cVariablesAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cVariablesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cVariablesAstValuedVariableDeclarationParserRuleCall_2_2_1_0 = (RuleCall)cVariablesAssignment_2_2_1.eContents().get(0);
		private final Keyword cDoKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsAstStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AstStatementBlock:
		//	{AstStatementBlock}
		//	'begin' ('var'
		//	variables+=AstValuedVariableDeclaration (',' variables+=AstValuedVariableDeclaration)*
		//	'do')?
		//	statements+=AstStatement*
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{AstStatementBlock} 'begin' ('var' variables+=AstValuedVariableDeclaration (','
		//variables+=AstValuedVariableDeclaration)* 'do')? statements+=AstStatement* 'end'
		public Group getGroup() { return cGroup; }
		
		//{AstStatementBlock}
		public Action getAstStatementBlockAction_0() { return cAstStatementBlockAction_0; }
		
		//'begin'
		public Keyword getBeginKeyword_1() { return cBeginKeyword_1; }
		
		//('var' variables+=AstValuedVariableDeclaration (',' variables+=AstValuedVariableDeclaration)* 'do')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'var'
		public Keyword getVarKeyword_2_0() { return cVarKeyword_2_0; }
		
		//variables+=AstValuedVariableDeclaration
		public Assignment getVariablesAssignment_2_1() { return cVariablesAssignment_2_1; }
		
		//AstValuedVariableDeclaration
		public RuleCall getVariablesAstValuedVariableDeclarationParserRuleCall_2_1_0() { return cVariablesAstValuedVariableDeclarationParserRuleCall_2_1_0; }
		
		//(',' variables+=AstValuedVariableDeclaration)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//variables+=AstValuedVariableDeclaration
		public Assignment getVariablesAssignment_2_2_1() { return cVariablesAssignment_2_2_1; }
		
		//AstValuedVariableDeclaration
		public RuleCall getVariablesAstValuedVariableDeclarationParserRuleCall_2_2_1_0() { return cVariablesAstValuedVariableDeclarationParserRuleCall_2_2_1_0; }
		
		//'do'
		public Keyword getDoKeyword_2_3() { return cDoKeyword_2_3; }
		
		//statements+=AstStatement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//AstStatement
		public RuleCall getStatementsAstStatementParserRuleCall_3_0() { return cStatementsAstStatementParserRuleCall_3_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class AstStatementIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstStatementIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionAstExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenAstStatementParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		private final Assignment cElsifsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElsifsAstStatementElsifParserRuleCall_4_0 = (RuleCall)cElsifsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseAstStatementParserRuleCall_5_1_0 = (RuleCall)cElseAssignment_5_1.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//AstStatementIf:
		//	'if' condition=AstExpression 'then'
		//	then+=AstStatement*
		//	elsifs+=AstStatementElsif* ('else' else+=AstStatement*)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'if' condition=AstExpression 'then' then+=AstStatement* elsifs+=AstStatementElsif* ('else' else+=AstStatement*)? 'end'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//condition=AstExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//AstExpression
		public RuleCall getConditionAstExpressionParserRuleCall_1_0() { return cConditionAstExpressionParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//then+=AstStatement*
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }
		
		//AstStatement
		public RuleCall getThenAstStatementParserRuleCall_3_0() { return cThenAstStatementParserRuleCall_3_0; }
		
		//elsifs+=AstStatementElsif*
		public Assignment getElsifsAssignment_4() { return cElsifsAssignment_4; }
		
		//AstStatementElsif
		public RuleCall getElsifsAstStatementElsifParserRuleCall_4_0() { return cElsifsAstStatementElsifParserRuleCall_4_0; }
		
		//('else' else+=AstStatement*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//else+=AstStatement*
		public Assignment getElseAssignment_5_1() { return cElseAssignment_5_1; }
		
		//AstStatement
		public RuleCall getElseAstStatementParserRuleCall_5_1_0() { return cElseAstStatementParserRuleCall_5_1_0; }
		
		//'end'
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}
	public class AstStatementElsifElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstStatementElsif");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElsifKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionAstExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenAstStatementParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		
		//AstStatementElsif:
		//	'elsif' condition=AstExpression 'then'
		//	then+=AstStatement*;
		@Override public ParserRule getRule() { return rule; }
		
		//'elsif' condition=AstExpression 'then' then+=AstStatement*
		public Group getGroup() { return cGroup; }
		
		//'elsif'
		public Keyword getElsifKeyword_0() { return cElsifKeyword_0; }
		
		//condition=AstExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//AstExpression
		public RuleCall getConditionAstExpressionParserRuleCall_1_0() { return cConditionAstExpressionParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//then+=AstStatement*
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }
		
		//AstStatement
		public RuleCall getThenAstStatementParserRuleCall_3_0() { return cThenAstStatementParserRuleCall_3_0; }
	}
	public class AstStatementWhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstStatementWhile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionAstExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsAstStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AstStatementWhile:
		//	'while' condition=AstExpression 'do'
		//	statements+=AstStatement*
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'while' condition=AstExpression 'do' statements+=AstStatement* 'end'
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//condition=AstExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//AstExpression
		public RuleCall getConditionAstExpressionParserRuleCall_1_0() { return cConditionAstExpressionParserRuleCall_1_0; }
		
		//'do'
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//statements+=AstStatement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//AstStatement
		public RuleCall getStatementsAstStatementParserRuleCall_3_0() { return cStatementsAstStatementParserRuleCall_3_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class AstStatementReadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstStatementRead");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPortAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPortAstPortCrossReference_0_0 = (CrossReference)cPortAssignment_0.eContents().get(0);
		private final RuleCall cPortAstPortIDTerminalRuleCall_0_0_1 = (RuleCall)cPortAstPortCrossReference_0_0.eContents().get(1);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLvaluesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLvaluesAstLValueParserRuleCall_2_0 = (RuleCall)cLvaluesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLvaluesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLvaluesAstLValueParserRuleCall_3_1_0 = (RuleCall)cLvaluesAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cRepeatKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRepeatAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRepeatAstExpressionParserRuleCall_4_1_0 = (RuleCall)cRepeatAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AstStatementRead:
		//	port=[AstPort] '-->' lvalues+=AstLValue (',' lvalues+=AstLValue)* ('repeat' repeat=AstExpression)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//port=[AstPort] '-->' lvalues+=AstLValue (',' lvalues+=AstLValue)* ('repeat' repeat=AstExpression)? ';'
		public Group getGroup() { return cGroup; }
		
		//port=[AstPort]
		public Assignment getPortAssignment_0() { return cPortAssignment_0; }
		
		//[AstPort]
		public CrossReference getPortAstPortCrossReference_0_0() { return cPortAstPortCrossReference_0_0; }
		
		//ID
		public RuleCall getPortAstPortIDTerminalRuleCall_0_0_1() { return cPortAstPortIDTerminalRuleCall_0_0_1; }
		
		//'-->'
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_1; }
		
		//lvalues+=AstLValue
		public Assignment getLvaluesAssignment_2() { return cLvaluesAssignment_2; }
		
		//AstLValue
		public RuleCall getLvaluesAstLValueParserRuleCall_2_0() { return cLvaluesAstLValueParserRuleCall_2_0; }
		
		//(',' lvalues+=AstLValue)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//lvalues+=AstLValue
		public Assignment getLvaluesAssignment_3_1() { return cLvaluesAssignment_3_1; }
		
		//AstLValue
		public RuleCall getLvaluesAstLValueParserRuleCall_3_1_0() { return cLvaluesAstLValueParserRuleCall_3_1_0; }
		
		//('repeat' repeat=AstExpression)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'repeat'
		public Keyword getRepeatKeyword_4_0() { return cRepeatKeyword_4_0; }
		
		//repeat=AstExpression
		public Assignment getRepeatAssignment_4_1() { return cRepeatAssignment_4_1; }
		
		//AstExpression
		public RuleCall getRepeatAstExpressionParserRuleCall_4_1_0() { return cRepeatAstExpressionParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class AstStatementWriteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstStatementWrite");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPortAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPortAstPortCrossReference_0_0 = (CrossReference)cPortAssignment_0.eContents().get(0);
		private final RuleCall cPortAstPortIDTerminalRuleCall_0_0_1 = (RuleCall)cPortAstPortCrossReference_0_0.eContents().get(1);
		private final Keyword cLessThanSignHyphenMinusHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesAstExpressionParserRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValuesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValuesAstExpressionParserRuleCall_3_1_0 = (RuleCall)cValuesAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cRepeatKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRepeatAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRepeatAstExpressionParserRuleCall_4_1_0 = (RuleCall)cRepeatAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AstStatementWrite:
		//	port=[AstPort] => '<--' values+=AstExpression (',' values+=AstExpression)* ('repeat' repeat=AstExpression)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//port=[AstPort] => '<--' values+=AstExpression (',' values+=AstExpression)* ('repeat' repeat=AstExpression)? ';'
		public Group getGroup() { return cGroup; }
		
		//port=[AstPort]
		public Assignment getPortAssignment_0() { return cPortAssignment_0; }
		
		//[AstPort]
		public CrossReference getPortAstPortCrossReference_0_0() { return cPortAstPortCrossReference_0_0; }
		
		//ID
		public RuleCall getPortAstPortIDTerminalRuleCall_0_0_1() { return cPortAstPortIDTerminalRuleCall_0_0_1; }
		
		//=> '<--'
		public Keyword getLessThanSignHyphenMinusHyphenMinusKeyword_1() { return cLessThanSignHyphenMinusHyphenMinusKeyword_1; }
		
		//values+=AstExpression
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }
		
		//AstExpression
		public RuleCall getValuesAstExpressionParserRuleCall_2_0() { return cValuesAstExpressionParserRuleCall_2_0; }
		
		//(',' values+=AstExpression)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//values+=AstExpression
		public Assignment getValuesAssignment_3_1() { return cValuesAssignment_3_1; }
		
		//AstExpression
		public RuleCall getValuesAstExpressionParserRuleCall_3_1_0() { return cValuesAstExpressionParserRuleCall_3_1_0; }
		
		//('repeat' repeat=AstExpression)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'repeat'
		public Keyword getRepeatKeyword_4_0() { return cRepeatKeyword_4_0; }
		
		//repeat=AstExpression
		public Assignment getRepeatAssignment_4_1() { return cRepeatAssignment_4_1; }
		
		//AstExpression
		public RuleCall getRepeatAstExpressionParserRuleCall_4_1_0() { return cRepeatAstExpressionParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class AstLValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstLValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTargetAstVariableCrossReference_0_0 = (CrossReference)cTargetAssignment_0.eContents().get(0);
		private final RuleCall cTargetAstVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cTargetAstVariableCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIndexesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndexesAstExpressionParserRuleCall_1_1_0 = (RuleCall)cIndexesAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cMemberAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMemberAstMemberAccessParserRuleCall_2_0 = (RuleCall)cMemberAssignment_2.eContents().get(0);
		
		//AstLValue:
		//	target=[AstVariable] ('[' indexes+=AstExpression ']')* member+=AstMemberAccess*;
		@Override public ParserRule getRule() { return rule; }
		
		//target=[AstVariable] ('[' indexes+=AstExpression ']')* member+=AstMemberAccess*
		public Group getGroup() { return cGroup; }
		
		//target=[AstVariable]
		public Assignment getTargetAssignment_0() { return cTargetAssignment_0; }
		
		//[AstVariable]
		public CrossReference getTargetAstVariableCrossReference_0_0() { return cTargetAstVariableCrossReference_0_0; }
		
		//ID
		public RuleCall getTargetAstVariableIDTerminalRuleCall_0_0_1() { return cTargetAstVariableIDTerminalRuleCall_0_0_1; }
		
		//('[' indexes+=AstExpression ']')*
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//indexes+=AstExpression
		public Assignment getIndexesAssignment_1_1() { return cIndexesAssignment_1_1; }
		
		//AstExpression
		public RuleCall getIndexesAstExpressionParserRuleCall_1_1_0() { return cIndexesAstExpressionParserRuleCall_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//member+=AstMemberAccess*
		public Assignment getMemberAssignment_2() { return cMemberAssignment_2; }
		
		//AstMemberAccess
		public RuleCall getMemberAstMemberAccessParserRuleCall_2_0() { return cMemberAstMemberAccessParserRuleCall_2_0; }
	}
	public class AstStatementCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstStatementCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionAstExpressionSymbolReferenceParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCasesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCasesAstStatementAlternativeParserRuleCall_3_0 = (RuleCall)cCasesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDefaultAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDefaultAstStatementParserRuleCall_4_1_0 = (RuleCall)cDefaultAssignment_4_1.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AstStatementCase:
		//	'case' expression=AstExpressionSymbolReference 'of'
		//	cases+=AstStatementAlternative+ ('else' default=AstStatement)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'case' expression=AstExpressionSymbolReference 'of' cases+=AstStatementAlternative+ ('else' default=AstStatement)? 'end'
		public Group getGroup() { return cGroup; }
		
		//'case'
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }
		
		//expression=AstExpressionSymbolReference
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//AstExpressionSymbolReference
		public RuleCall getExpressionAstExpressionSymbolReferenceParserRuleCall_1_0() { return cExpressionAstExpressionSymbolReferenceParserRuleCall_1_0; }
		
		//'of'
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//cases+=AstStatementAlternative+
		public Assignment getCasesAssignment_3() { return cCasesAssignment_3; }
		
		//AstStatementAlternative
		public RuleCall getCasesAstStatementAlternativeParserRuleCall_3_0() { return cCasesAstStatementAlternativeParserRuleCall_3_0; }
		
		//('else' default=AstStatement)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'else'
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }
		
		//default=AstStatement
		public Assignment getDefaultAssignment_4_1() { return cDefaultAssignment_4_1; }
		
		//AstStatement
		public RuleCall getDefaultAstStatementParserRuleCall_4_1_0() { return cDefaultAstStatementParserRuleCall_4_1_0; }
		
		//'end'
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}
	public class AstStatementAlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstStatementAlternative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPatternAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPatternAstPatternParserRuleCall_0_0 = (RuleCall)cPatternAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cGuardKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cGuardsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cGuardsAstExpressionParserRuleCall_1_1_0 = (RuleCall)cGuardsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cGuardsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cGuardsAstExpressionParserRuleCall_1_2_1_0 = (RuleCall)cGuardsAssignment_1_2_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsAstStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AstStatementAlternative:
		//	pattern=AstPattern ('guard' guards+=AstExpression (',' guards+=AstExpression)*)?
		//	'do' statements+=AstStatement* 'end';
		@Override public ParserRule getRule() { return rule; }
		
		//pattern=AstPattern ('guard' guards+=AstExpression (',' guards+=AstExpression)*)? 'do' statements+=AstStatement* 'end'
		public Group getGroup() { return cGroup; }
		
		//pattern=AstPattern
		public Assignment getPatternAssignment_0() { return cPatternAssignment_0; }
		
		//AstPattern
		public RuleCall getPatternAstPatternParserRuleCall_0_0() { return cPatternAstPatternParserRuleCall_0_0; }
		
		//('guard' guards+=AstExpression (',' guards+=AstExpression)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'guard'
		public Keyword getGuardKeyword_1_0() { return cGuardKeyword_1_0; }
		
		//guards+=AstExpression
		public Assignment getGuardsAssignment_1_1() { return cGuardsAssignment_1_1; }
		
		//AstExpression
		public RuleCall getGuardsAstExpressionParserRuleCall_1_1_0() { return cGuardsAstExpressionParserRuleCall_1_1_0; }
		
		//(',' guards+=AstExpression)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//guards+=AstExpression
		public Assignment getGuardsAssignment_1_2_1() { return cGuardsAssignment_1_2_1; }
		
		//AstExpression
		public RuleCall getGuardsAstExpressionParserRuleCall_1_2_1_0() { return cGuardsAstExpressionParserRuleCall_1_2_1_0; }
		
		//'do'
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//statements+=AstStatement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//AstStatement
		public RuleCall getStatementsAstStatementParserRuleCall_3_0() { return cStatementsAstStatementParserRuleCall_3_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class AstStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAstStatementAssignParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAstStatementCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAstStatementForeachParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAstStatementIfParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAstStatementReadParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAstStatementWriteParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cAstStatementWhileParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cAstStatementBlockParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cAstStatementCaseParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//AstStatement:
		//	AstStatementAssign
		//	| AstStatementCall
		//	| AstStatementForeach
		//	| AstStatementIf
		//	| AstStatementRead
		//	| AstStatementWrite
		//	| AstStatementWhile
		//	| AstStatementBlock
		//	| AstStatementCase;
		@Override public ParserRule getRule() { return rule; }
		
		//AstStatementAssign | AstStatementCall | AstStatementForeach | AstStatementIf | AstStatementRead | AstStatementWrite |
		//AstStatementWhile | AstStatementBlock | AstStatementCase
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AstStatementAssign
		public RuleCall getAstStatementAssignParserRuleCall_0() { return cAstStatementAssignParserRuleCall_0; }
		
		//AstStatementCall
		public RuleCall getAstStatementCallParserRuleCall_1() { return cAstStatementCallParserRuleCall_1; }
		
		//AstStatementForeach
		public RuleCall getAstStatementForeachParserRuleCall_2() { return cAstStatementForeachParserRuleCall_2; }
		
		//AstStatementIf
		public RuleCall getAstStatementIfParserRuleCall_3() { return cAstStatementIfParserRuleCall_3; }
		
		//AstStatementRead
		public RuleCall getAstStatementReadParserRuleCall_4() { return cAstStatementReadParserRuleCall_4; }
		
		//AstStatementWrite
		public RuleCall getAstStatementWriteParserRuleCall_5() { return cAstStatementWriteParserRuleCall_5; }
		
		//AstStatementWhile
		public RuleCall getAstStatementWhileParserRuleCall_6() { return cAstStatementWhileParserRuleCall_6; }
		
		//AstStatementBlock
		public RuleCall getAstStatementBlockParserRuleCall_7() { return cAstStatementBlockParserRuleCall_7; }
		
		//AstStatementCase
		public RuleCall getAstStatementCaseParserRuleCall_8() { return cAstStatementCaseParserRuleCall_8; }
	}
	public class AstExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAstExpressionAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAstExpressionBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorVerticalLineVerticalLineKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorOrKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorFullStopFullStopKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAstExpressionAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// -- /////////////////////////////////////////////////////////////////////////////
		//// expressions
		//// -- /////////////////////////////////////////////////////////////////////////////
		//AstExpression:
		//	AstExpressionAnd ({AstExpressionBinary.left=current} operator=('||' | 'or' | '..') right=AstExpressionAnd)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AstExpressionAnd ({AstExpressionBinary.left=current} operator=('||' | 'or' | '..') right=AstExpressionAnd)*
		public Group getGroup() { return cGroup; }
		
		//AstExpressionAnd
		public RuleCall getAstExpressionAndParserRuleCall_0() { return cAstExpressionAndParserRuleCall_0; }
		
		//({AstExpressionBinary.left=current} operator=('||' | 'or' | '..') right=AstExpressionAnd)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AstExpressionBinary.left=current}
		public Action getAstExpressionBinaryLeftAction_1_0() { return cAstExpressionBinaryLeftAction_1_0; }
		
		//operator=('||' | 'or' | '..')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('||' | 'or' | '..')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'||'
		public Keyword getOperatorVerticalLineVerticalLineKeyword_1_1_0_0() { return cOperatorVerticalLineVerticalLineKeyword_1_1_0_0; }
		
		//'or'
		public Keyword getOperatorOrKeyword_1_1_0_1() { return cOperatorOrKeyword_1_1_0_1; }
		
		//'..'
		public Keyword getOperatorFullStopFullStopKeyword_1_1_0_2() { return cOperatorFullStopFullStopKeyword_1_1_0_2; }
		
		//right=AstExpressionAnd
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AstExpressionAnd
		public RuleCall getRightAstExpressionAndParserRuleCall_1_2_0() { return cRightAstExpressionAndParserRuleCall_1_2_0; }
	}
	public class AstExpressionAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstExpressionAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAstExpressionBitorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAstExpressionBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorAmpersandAmpersandKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorAndKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAstExpressionBitorParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AstExpressionAnd AstExpression:
		//	AstExpressionBitor ({AstExpressionBinary.left=current} operator=('&&' | 'and') right=AstExpressionBitor)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AstExpressionBitor ({AstExpressionBinary.left=current} operator=('&&' | 'and') right=AstExpressionBitor)*
		public Group getGroup() { return cGroup; }
		
		//AstExpressionBitor
		public RuleCall getAstExpressionBitorParserRuleCall_0() { return cAstExpressionBitorParserRuleCall_0; }
		
		//({AstExpressionBinary.left=current} operator=('&&' | 'and') right=AstExpressionBitor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AstExpressionBinary.left=current}
		public Action getAstExpressionBinaryLeftAction_1_0() { return cAstExpressionBinaryLeftAction_1_0; }
		
		//operator=('&&' | 'and')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('&&' | 'and')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'&&'
		public Keyword getOperatorAmpersandAmpersandKeyword_1_1_0_0() { return cOperatorAmpersandAmpersandKeyword_1_1_0_0; }
		
		//'and'
		public Keyword getOperatorAndKeyword_1_1_0_1() { return cOperatorAndKeyword_1_1_0_1; }
		
		//right=AstExpressionBitor
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AstExpressionBitor
		public RuleCall getRightAstExpressionBitorParserRuleCall_1_2_0() { return cRightAstExpressionBitorParserRuleCall_1_2_0; }
	}
	public class AstExpressionBitorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstExpressionBitor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAstExpressionBitxorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAstExpressionBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorVerticalLineKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAstExpressionBitxorParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AstExpressionBitor AstExpression:
		//	AstExpressionBitxor ({AstExpressionBinary.left=current} operator='|' right=AstExpressionBitxor)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AstExpressionBitxor ({AstExpressionBinary.left=current} operator='|' right=AstExpressionBitxor)*
		public Group getGroup() { return cGroup; }
		
		//AstExpressionBitxor
		public RuleCall getAstExpressionBitxorParserRuleCall_0() { return cAstExpressionBitxorParserRuleCall_0; }
		
		//({AstExpressionBinary.left=current} operator='|' right=AstExpressionBitxor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AstExpressionBinary.left=current}
		public Action getAstExpressionBinaryLeftAction_1_0() { return cAstExpressionBinaryLeftAction_1_0; }
		
		//operator='|'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'|'
		public Keyword getOperatorVerticalLineKeyword_1_1_0() { return cOperatorVerticalLineKeyword_1_1_0; }
		
		//right=AstExpressionBitxor
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AstExpressionBitxor
		public RuleCall getRightAstExpressionBitxorParserRuleCall_1_2_0() { return cRightAstExpressionBitxorParserRuleCall_1_2_0; }
	}
	public class AstExpressionBitxorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstExpressionBitxor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAstExpressionBitandParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAstExpressionBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorCircumflexAccentKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAstExpressionBitandParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AstExpressionBitxor AstExpression:
		//	AstExpressionBitand ({AstExpressionBinary.left=current} operator='^' right=AstExpressionBitand)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AstExpressionBitand ({AstExpressionBinary.left=current} operator='^' right=AstExpressionBitand)*
		public Group getGroup() { return cGroup; }
		
		//AstExpressionBitand
		public RuleCall getAstExpressionBitandParserRuleCall_0() { return cAstExpressionBitandParserRuleCall_0; }
		
		//({AstExpressionBinary.left=current} operator='^' right=AstExpressionBitand)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AstExpressionBinary.left=current}
		public Action getAstExpressionBinaryLeftAction_1_0() { return cAstExpressionBinaryLeftAction_1_0; }
		
		//operator='^'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'^'
		public Keyword getOperatorCircumflexAccentKeyword_1_1_0() { return cOperatorCircumflexAccentKeyword_1_1_0; }
		
		//right=AstExpressionBitand
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AstExpressionBitand
		public RuleCall getRightAstExpressionBitandParserRuleCall_1_2_0() { return cRightAstExpressionBitandParserRuleCall_1_2_0; }
	}
	public class AstExpressionBitandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstExpressionBitand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAstExpressionEqParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAstExpressionBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorAmpersandKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAstExpressionEqParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AstExpressionBitand AstExpression:
		//	AstExpressionEq ({AstExpressionBinary.left=current} operator='&' right=AstExpressionEq)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AstExpressionEq ({AstExpressionBinary.left=current} operator='&' right=AstExpressionEq)*
		public Group getGroup() { return cGroup; }
		
		//AstExpressionEq
		public RuleCall getAstExpressionEqParserRuleCall_0() { return cAstExpressionEqParserRuleCall_0; }
		
		//({AstExpressionBinary.left=current} operator='&' right=AstExpressionEq)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AstExpressionBinary.left=current}
		public Action getAstExpressionBinaryLeftAction_1_0() { return cAstExpressionBinaryLeftAction_1_0; }
		
		//operator='&'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'&'
		public Keyword getOperatorAmpersandKeyword_1_1_0() { return cOperatorAmpersandKeyword_1_1_0; }
		
		//right=AstExpressionEq
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AstExpressionEq
		public RuleCall getRightAstExpressionEqParserRuleCall_1_2_0() { return cRightAstExpressionEqParserRuleCall_1_2_0; }
	}
	public class AstExpressionEqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstExpressionEq");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAstExpressionRelationalParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAstExpressionBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorEqualsSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAstExpressionRelationalParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AstExpressionEq AstExpression:
		//	AstExpressionRelational ({AstExpressionBinary.left=current} operator=('=' | '!=') right=AstExpressionRelational)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AstExpressionRelational ({AstExpressionBinary.left=current} operator=('=' | '!=') right=AstExpressionRelational)*
		public Group getGroup() { return cGroup; }
		
		//AstExpressionRelational
		public RuleCall getAstExpressionRelationalParserRuleCall_0() { return cAstExpressionRelationalParserRuleCall_0; }
		
		//({AstExpressionBinary.left=current} operator=('=' | '!=') right=AstExpressionRelational)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AstExpressionBinary.left=current}
		public Action getAstExpressionBinaryLeftAction_1_0() { return cAstExpressionBinaryLeftAction_1_0; }
		
		//operator=('=' | '!=')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('=' | '!=')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'='
		public Keyword getOperatorEqualsSignKeyword_1_1_0_0() { return cOperatorEqualsSignKeyword_1_1_0_0; }
		
		//'!='
		public Keyword getOperatorExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOperatorExclamationMarkEqualsSignKeyword_1_1_0_1; }
		
		//right=AstExpressionRelational
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AstExpressionRelational
		public RuleCall getRightAstExpressionRelationalParserRuleCall_1_2_0() { return cRightAstExpressionRelationalParserRuleCall_1_2_0; }
	}
	public class AstExpressionRelationalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstExpressionRelational");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAstExpressionShiftParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAstExpressionBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorLessThanSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorGreaterThanSignKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAstExpressionShiftParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AstExpressionRelational AstExpression:
		//	AstExpressionShift ({AstExpressionBinary.left=current} operator=('<' | '<=' | '>' | '>=') right=AstExpressionShift)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AstExpressionShift ({AstExpressionBinary.left=current} operator=('<' | '<=' | '>' | '>=') right=AstExpressionShift)*
		public Group getGroup() { return cGroup; }
		
		//AstExpressionShift
		public RuleCall getAstExpressionShiftParserRuleCall_0() { return cAstExpressionShiftParserRuleCall_0; }
		
		//({AstExpressionBinary.left=current} operator=('<' | '<=' | '>' | '>=') right=AstExpressionShift)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AstExpressionBinary.left=current}
		public Action getAstExpressionBinaryLeftAction_1_0() { return cAstExpressionBinaryLeftAction_1_0; }
		
		//operator=('<' | '<=' | '>' | '>=')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('<' | '<=' | '>' | '>=')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'<'
		public Keyword getOperatorLessThanSignKeyword_1_1_0_0() { return cOperatorLessThanSignKeyword_1_1_0_0; }
		
		//'<='
		public Keyword getOperatorLessThanSignEqualsSignKeyword_1_1_0_1() { return cOperatorLessThanSignEqualsSignKeyword_1_1_0_1; }
		
		//'>'
		public Keyword getOperatorGreaterThanSignKeyword_1_1_0_2() { return cOperatorGreaterThanSignKeyword_1_1_0_2; }
		
		//'>='
		public Keyword getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3() { return cOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3; }
		
		//right=AstExpressionShift
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AstExpressionShift
		public RuleCall getRightAstExpressionShiftParserRuleCall_1_2_0() { return cRightAstExpressionShiftParserRuleCall_1_2_0; }
	}
	public class AstExpressionShiftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstExpressionShift");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAstExpressionAdditiveParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAstExpressionBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorLessThanSignLessThanSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorGreaterThanSignGreaterThanSignKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAstExpressionAdditiveParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AstExpressionShift AstExpression:
		//	AstExpressionAdditive ({AstExpressionBinary.left=current} operator=('<<' | '>>' | '>>>')
		//	right=AstExpressionAdditive)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AstExpressionAdditive ({AstExpressionBinary.left=current} operator=('<<' | '>>' | '>>>') right=AstExpressionAdditive)*
		public Group getGroup() { return cGroup; }
		
		//AstExpressionAdditive
		public RuleCall getAstExpressionAdditiveParserRuleCall_0() { return cAstExpressionAdditiveParserRuleCall_0; }
		
		//({AstExpressionBinary.left=current} operator=('<<' | '>>' | '>>>') right=AstExpressionAdditive)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AstExpressionBinary.left=current}
		public Action getAstExpressionBinaryLeftAction_1_0() { return cAstExpressionBinaryLeftAction_1_0; }
		
		//operator=('<<' | '>>' | '>>>')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('<<' | '>>' | '>>>')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'<<'
		public Keyword getOperatorLessThanSignLessThanSignKeyword_1_1_0_0() { return cOperatorLessThanSignLessThanSignKeyword_1_1_0_0; }
		
		//'>>'
		public Keyword getOperatorGreaterThanSignGreaterThanSignKeyword_1_1_0_1() { return cOperatorGreaterThanSignGreaterThanSignKeyword_1_1_0_1; }
		
		//'>>>'
		public Keyword getOperatorGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_1_0_2() { return cOperatorGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_1_0_2; }
		
		//right=AstExpressionAdditive
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AstExpressionAdditive
		public RuleCall getRightAstExpressionAdditiveParserRuleCall_1_2_0() { return cRightAstExpressionAdditiveParserRuleCall_1_2_0; }
	}
	public class AstExpressionAdditiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstExpressionAdditive");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAstExpressionMultiplicativeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAstExpressionBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorPlusSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAstExpressionMultiplicativeParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AstExpressionAdditive AstExpression:
		//	AstExpressionMultiplicative ({AstExpressionBinary.left=current} operator=('+' | '-')
		//	right=AstExpressionMultiplicative)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AstExpressionMultiplicative ({AstExpressionBinary.left=current} operator=('+' | '-') right=AstExpressionMultiplicative)*
		public Group getGroup() { return cGroup; }
		
		//AstExpressionMultiplicative
		public RuleCall getAstExpressionMultiplicativeParserRuleCall_0() { return cAstExpressionMultiplicativeParserRuleCall_0; }
		
		//({AstExpressionBinary.left=current} operator=('+' | '-') right=AstExpressionMultiplicative)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AstExpressionBinary.left=current}
		public Action getAstExpressionBinaryLeftAction_1_0() { return cAstExpressionBinaryLeftAction_1_0; }
		
		//operator=('+' | '-')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('+' | '-')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'+'
		public Keyword getOperatorPlusSignKeyword_1_1_0_0() { return cOperatorPlusSignKeyword_1_1_0_0; }
		
		//'-'
		public Keyword getOperatorHyphenMinusKeyword_1_1_0_1() { return cOperatorHyphenMinusKeyword_1_1_0_1; }
		
		//right=AstExpressionMultiplicative
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AstExpressionMultiplicative
		public RuleCall getRightAstExpressionMultiplicativeParserRuleCall_1_2_0() { return cRightAstExpressionMultiplicativeParserRuleCall_1_2_0; }
	}
	public class AstExpressionMultiplicativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstExpressionMultiplicative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAstExpressionExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAstExpressionBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorAsteriskKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorSolidusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorDivKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOperatorModKeyword_1_1_0_3 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAstExpressionExpParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AstExpressionMultiplicative AstExpression:
		//	AstExpressionExp ({AstExpressionBinary.left=current} operator=('*' | '/' | 'div' | 'mod') right=AstExpressionExp)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AstExpressionExp ({AstExpressionBinary.left=current} operator=('*' | '/' | 'div' | 'mod') right=AstExpressionExp)*
		public Group getGroup() { return cGroup; }
		
		//AstExpressionExp
		public RuleCall getAstExpressionExpParserRuleCall_0() { return cAstExpressionExpParserRuleCall_0; }
		
		//({AstExpressionBinary.left=current} operator=('*' | '/' | 'div' | 'mod') right=AstExpressionExp)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AstExpressionBinary.left=current}
		public Action getAstExpressionBinaryLeftAction_1_0() { return cAstExpressionBinaryLeftAction_1_0; }
		
		//operator=('*' | '/' | 'div' | 'mod')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('*' | '/' | 'div' | 'mod')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOperatorAsteriskKeyword_1_1_0_0() { return cOperatorAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOperatorSolidusKeyword_1_1_0_1() { return cOperatorSolidusKeyword_1_1_0_1; }
		
		//'div'
		public Keyword getOperatorDivKeyword_1_1_0_2() { return cOperatorDivKeyword_1_1_0_2; }
		
		//'mod'
		public Keyword getOperatorModKeyword_1_1_0_3() { return cOperatorModKeyword_1_1_0_3; }
		
		//right=AstExpressionExp
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AstExpressionExp
		public RuleCall getRightAstExpressionExpParserRuleCall_1_2_0() { return cRightAstExpressionExpParserRuleCall_1_2_0; }
	}
	public class AstExpressionExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstExpressionExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAstExpressionUnaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAstExpressionBinaryLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorAsteriskAsteriskKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAstExpressionUnaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AstExpressionExp AstExpression:
		//	AstExpressionUnary ({AstExpressionBinary.left=current} operator='**' right=AstExpressionUnary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AstExpressionUnary ({AstExpressionBinary.left=current} operator='**' right=AstExpressionUnary)*
		public Group getGroup() { return cGroup; }
		
		//AstExpressionUnary
		public RuleCall getAstExpressionUnaryParserRuleCall_0() { return cAstExpressionUnaryParserRuleCall_0; }
		
		//({AstExpressionBinary.left=current} operator='**' right=AstExpressionUnary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AstExpressionBinary.left=current}
		public Action getAstExpressionBinaryLeftAction_1_0() { return cAstExpressionBinaryLeftAction_1_0; }
		
		//operator='**'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'**'
		public Keyword getOperatorAsteriskAsteriskKeyword_1_1_0() { return cOperatorAsteriskAsteriskKeyword_1_1_0; }
		
		//right=AstExpressionUnary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AstExpressionUnary
		public RuleCall getRightAstExpressionUnaryParserRuleCall_1_2_0() { return cRightAstExpressionUnaryParserRuleCall_1_2_0; }
	}
	public class AstExpressionUnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstExpressionUnary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAstExpressionUnaryAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cUnaryOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cUnaryOperatorAlternatives_0_1_0 = (Alternatives)cUnaryOperatorAssignment_0_1.eContents().get(0);
		private final Keyword cUnaryOperatorTildeKeyword_0_1_0_0 = (Keyword)cUnaryOperatorAlternatives_0_1_0.eContents().get(0);
		private final Keyword cUnaryOperatorHyphenMinusKeyword_0_1_0_1 = (Keyword)cUnaryOperatorAlternatives_0_1_0.eContents().get(1);
		private final Keyword cUnaryOperatorNotKeyword_0_1_0_2 = (Keyword)cUnaryOperatorAlternatives_0_1_0.eContents().get(2);
		private final Keyword cUnaryOperatorNumberSignKeyword_0_1_0_3 = (Keyword)cUnaryOperatorAlternatives_0_1_0.eContents().get(3);
		private final Keyword cUnaryOperatorOldKeyword_0_1_0_4 = (Keyword)cUnaryOperatorAlternatives_0_1_0.eContents().get(4);
		private final Assignment cExpressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionAstExpressionPostfixParserRuleCall_0_2_0 = (RuleCall)cExpressionAssignment_0_2.eContents().get(0);
		private final RuleCall cAstExpressionAssertionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AstExpressionUnary AstExpression:
		//	{AstExpressionUnary} unaryOperator=('~' | '-' | 'not' | '#' | 'old') expression=AstExpressionPostfix
		//	| AstExpressionAssertion;
		@Override public ParserRule getRule() { return rule; }
		
		//{AstExpressionUnary} unaryOperator=('~' | '-' | 'not' | '#' | 'old') expression=AstExpressionPostfix |
		//AstExpressionAssertion
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{AstExpressionUnary} unaryOperator=('~' | '-' | 'not' | '#' | 'old') expression=AstExpressionPostfix
		public Group getGroup_0() { return cGroup_0; }
		
		//{AstExpressionUnary}
		public Action getAstExpressionUnaryAction_0_0() { return cAstExpressionUnaryAction_0_0; }
		
		//unaryOperator=('~' | '-' | 'not' | '#' | 'old')
		public Assignment getUnaryOperatorAssignment_0_1() { return cUnaryOperatorAssignment_0_1; }
		
		//('~' | '-' | 'not' | '#' | 'old')
		public Alternatives getUnaryOperatorAlternatives_0_1_0() { return cUnaryOperatorAlternatives_0_1_0; }
		
		//'~'
		public Keyword getUnaryOperatorTildeKeyword_0_1_0_0() { return cUnaryOperatorTildeKeyword_0_1_0_0; }
		
		//'-'
		public Keyword getUnaryOperatorHyphenMinusKeyword_0_1_0_1() { return cUnaryOperatorHyphenMinusKeyword_0_1_0_1; }
		
		//'not'
		public Keyword getUnaryOperatorNotKeyword_0_1_0_2() { return cUnaryOperatorNotKeyword_0_1_0_2; }
		
		//'#'
		public Keyword getUnaryOperatorNumberSignKeyword_0_1_0_3() { return cUnaryOperatorNumberSignKeyword_0_1_0_3; }
		
		//'old'
		public Keyword getUnaryOperatorOldKeyword_0_1_0_4() { return cUnaryOperatorOldKeyword_0_1_0_4; }
		
		//expression=AstExpressionPostfix
		public Assignment getExpressionAssignment_0_2() { return cExpressionAssignment_0_2; }
		
		//AstExpressionPostfix
		public RuleCall getExpressionAstExpressionPostfixParserRuleCall_0_2_0() { return cExpressionAstExpressionPostfixParserRuleCall_0_2_0; }
		
		//AstExpressionAssertion
		public RuleCall getAstExpressionAssertionParserRuleCall_1() { return cAstExpressionAssertionParserRuleCall_1; }
	}
	public class AstExpressionAssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstExpressionAssertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAstExpressionPostfixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cAstExpressionAssertionTargetAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeAstTypeParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		
		//AstExpressionAssertion AstExpression:
		//	AstExpressionPostfix (=> ({AstExpressionAssertion.target=current} 'as') type=AstType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AstExpressionPostfix (=> ({AstExpressionAssertion.target=current} 'as') type=AstType)*
		public Group getGroup() { return cGroup; }
		
		//AstExpressionPostfix
		public RuleCall getAstExpressionPostfixParserRuleCall_0() { return cAstExpressionPostfixParserRuleCall_0; }
		
		//(=> ({AstExpressionAssertion.target=current} 'as') type=AstType)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({AstExpressionAssertion.target=current} 'as')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//({AstExpressionAssertion.target=current} 'as')
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{AstExpressionAssertion.target=current}
		public Action getAstExpressionAssertionTargetAction_1_0_0_0() { return cAstExpressionAssertionTargetAction_1_0_0_0; }
		
		//'as'
		public Keyword getAsKeyword_1_0_0_1() { return cAsKeyword_1_0_0_1; }
		
		//type=AstType
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//AstType
		public RuleCall getTypeAstTypeParserRuleCall_1_1_0() { return cTypeAstTypeParserRuleCall_1_1_0; }
	}
	public class AstExpressionPostfixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstExpressionPostfix");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAstExpressionListParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAstExpressionSymbolReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAstExpressionIfParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAstExpressionLambdaParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAstExpressionProcParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAstExpressionLetParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cAstExpressionMapParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cAstExpressionSetParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cAstExpressionCaseParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cAstExpressionLiteralParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Keyword cLeftParenthesisKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final RuleCall cAstExpressionParserRuleCall_10_1 = (RuleCall)cGroup_10.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		
		//AstExpressionPostfix AstExpression:
		//	AstExpressionList
		//	| AstExpressionSymbolReference
		//	| AstExpressionIf
		//	| AstExpressionLambda
		//	| AstExpressionProc
		//	| AstExpressionLet
		//	| AstExpressionMap
		//	| AstExpressionSet
		//	| AstExpressionCase
		//	| AstExpressionLiteral
		//	| '(' AstExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//AstExpressionList | AstExpressionSymbolReference | AstExpressionIf | AstExpressionLambda | AstExpressionProc |
		//AstExpressionLet | AstExpressionMap | AstExpressionSet | AstExpressionCase | AstExpressionLiteral | '(' AstExpression
		//')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AstExpressionList
		public RuleCall getAstExpressionListParserRuleCall_0() { return cAstExpressionListParserRuleCall_0; }
		
		//AstExpressionSymbolReference
		public RuleCall getAstExpressionSymbolReferenceParserRuleCall_1() { return cAstExpressionSymbolReferenceParserRuleCall_1; }
		
		//AstExpressionIf
		public RuleCall getAstExpressionIfParserRuleCall_2() { return cAstExpressionIfParserRuleCall_2; }
		
		//AstExpressionLambda
		public RuleCall getAstExpressionLambdaParserRuleCall_3() { return cAstExpressionLambdaParserRuleCall_3; }
		
		//AstExpressionProc
		public RuleCall getAstExpressionProcParserRuleCall_4() { return cAstExpressionProcParserRuleCall_4; }
		
		//AstExpressionLet
		public RuleCall getAstExpressionLetParserRuleCall_5() { return cAstExpressionLetParserRuleCall_5; }
		
		//AstExpressionMap
		public RuleCall getAstExpressionMapParserRuleCall_6() { return cAstExpressionMapParserRuleCall_6; }
		
		//AstExpressionSet
		public RuleCall getAstExpressionSetParserRuleCall_7() { return cAstExpressionSetParserRuleCall_7; }
		
		//AstExpressionCase
		public RuleCall getAstExpressionCaseParserRuleCall_8() { return cAstExpressionCaseParserRuleCall_8; }
		
		//AstExpressionLiteral
		public RuleCall getAstExpressionLiteralParserRuleCall_9() { return cAstExpressionLiteralParserRuleCall_9; }
		
		//'(' AstExpression ')'
		public Group getGroup_10() { return cGroup_10; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_10_0() { return cLeftParenthesisKeyword_10_0; }
		
		//AstExpression
		public RuleCall getAstExpressionParserRuleCall_10_1() { return cAstExpressionParserRuleCall_10_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_10_2() { return cRightParenthesisKeyword_10_2; }
	}
	public class AstExpressionSymbolReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstExpressionSymbolReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAstAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cSymbolAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSymbolAstVariableCrossReference_1_0 = (CrossReference)cSymbolAssignment_1.eContents().get(0);
		private final RuleCall cSymbolAstVariableIDTerminalRuleCall_1_0_1 = (RuleCall)cSymbolAstVariableCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIndexesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIndexesAstExpressionParserRuleCall_2_1_0 = (RuleCall)cIndexesAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cMemberAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMemberAstMemberAccessParserRuleCall_3_0 = (RuleCall)cMemberAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cCtorAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCtorIDTerminalRuleCall_4_1_0 = (RuleCall)cCtorAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cCallAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Keyword cCallLeftParenthesisKeyword_5_0_0 = (Keyword)cCallAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Assignment cParametersAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final RuleCall cParametersAstExpressionParserRuleCall_5_1_0_0 = (RuleCall)cParametersAssignment_5_1_0.eContents().get(0);
		private final Group cGroup_5_1_1 = (Group)cGroup_5_1.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_1_0 = (Keyword)cGroup_5_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_5_1_1_1 = (Assignment)cGroup_5_1_1.eContents().get(1);
		private final RuleCall cParametersAstExpressionParserRuleCall_5_1_1_1_0 = (RuleCall)cParametersAssignment_5_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//AstExpressionSymbolReference:
		//	annotations+=AstAnnotation*
		//	symbol=[AstVariable] ('[' indexes+=AstExpression ']')* member+=AstMemberAccess* ('::' ctor=ID)? (call?='('
		//	(parameters+=AstExpression (',' parameters+=AstExpression)*)? ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=AstAnnotation* symbol=[AstVariable] ('[' indexes+=AstExpression ']')* member+=AstMemberAccess* ('::'
		//ctor=ID)? (call?='(' (parameters+=AstExpression (',' parameters+=AstExpression)*)? ')')?
		public Group getGroup() { return cGroup; }
		
		//annotations+=AstAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//AstAnnotation
		public RuleCall getAnnotationsAstAnnotationParserRuleCall_0_0() { return cAnnotationsAstAnnotationParserRuleCall_0_0; }
		
		//symbol=[AstVariable]
		public Assignment getSymbolAssignment_1() { return cSymbolAssignment_1; }
		
		//[AstVariable]
		public CrossReference getSymbolAstVariableCrossReference_1_0() { return cSymbolAstVariableCrossReference_1_0; }
		
		//ID
		public RuleCall getSymbolAstVariableIDTerminalRuleCall_1_0_1() { return cSymbolAstVariableIDTerminalRuleCall_1_0_1; }
		
		//('[' indexes+=AstExpression ']')*
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//indexes+=AstExpression
		public Assignment getIndexesAssignment_2_1() { return cIndexesAssignment_2_1; }
		
		//AstExpression
		public RuleCall getIndexesAstExpressionParserRuleCall_2_1_0() { return cIndexesAstExpressionParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
		
		//member+=AstMemberAccess*
		public Assignment getMemberAssignment_3() { return cMemberAssignment_3; }
		
		//AstMemberAccess
		public RuleCall getMemberAstMemberAccessParserRuleCall_3_0() { return cMemberAstMemberAccessParserRuleCall_3_0; }
		
		//('::' ctor=ID)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'::'
		public Keyword getColonColonKeyword_4_0() { return cColonColonKeyword_4_0; }
		
		//ctor=ID
		public Assignment getCtorAssignment_4_1() { return cCtorAssignment_4_1; }
		
		//ID
		public RuleCall getCtorIDTerminalRuleCall_4_1_0() { return cCtorIDTerminalRuleCall_4_1_0; }
		
		//(call?='(' (parameters+=AstExpression (',' parameters+=AstExpression)*)? ')')?
		public Group getGroup_5() { return cGroup_5; }
		
		//call?='('
		public Assignment getCallAssignment_5_0() { return cCallAssignment_5_0; }
		
		//'('
		public Keyword getCallLeftParenthesisKeyword_5_0_0() { return cCallLeftParenthesisKeyword_5_0_0; }
		
		//(parameters+=AstExpression (',' parameters+=AstExpression)*)?
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//parameters+=AstExpression
		public Assignment getParametersAssignment_5_1_0() { return cParametersAssignment_5_1_0; }
		
		//AstExpression
		public RuleCall getParametersAstExpressionParserRuleCall_5_1_0_0() { return cParametersAstExpressionParserRuleCall_5_1_0_0; }
		
		//(',' parameters+=AstExpression)*
		public Group getGroup_5_1_1() { return cGroup_5_1_1; }
		
		//','
		public Keyword getCommaKeyword_5_1_1_0() { return cCommaKeyword_5_1_1_0; }
		
		//parameters+=AstExpression
		public Assignment getParametersAssignment_5_1_1_1() { return cParametersAssignment_5_1_1_1; }
		
		//AstExpression
		public RuleCall getParametersAstExpressionParserRuleCall_5_1_1_1_0() { return cParametersAstExpressionParserRuleCall_5_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }
	}
	public class AstExpressionIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstExpressionIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionAstExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenAstExpressionParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		private final Assignment cElsifsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElsifsAstExpressionElsifParserRuleCall_4_0 = (RuleCall)cElsifsAssignment_4.eContents().get(0);
		private final Keyword cElseKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cElseAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElseAstExpressionParserRuleCall_6_0 = (RuleCall)cElseAssignment_6.eContents().get(0);
		private final Keyword cEndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//AstExpressionIf:
		//	'if' condition=AstExpression
		//	'then' then=AstExpression
		//	elsifs+=AstExpressionElsif*
		//	'else' else=AstExpression
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'if' condition=AstExpression 'then' then=AstExpression elsifs+=AstExpressionElsif* 'else' else=AstExpression 'end'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//condition=AstExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//AstExpression
		public RuleCall getConditionAstExpressionParserRuleCall_1_0() { return cConditionAstExpressionParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//then=AstExpression
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }
		
		//AstExpression
		public RuleCall getThenAstExpressionParserRuleCall_3_0() { return cThenAstExpressionParserRuleCall_3_0; }
		
		//elsifs+=AstExpressionElsif*
		public Assignment getElsifsAssignment_4() { return cElsifsAssignment_4; }
		
		//AstExpressionElsif
		public RuleCall getElsifsAstExpressionElsifParserRuleCall_4_0() { return cElsifsAstExpressionElsifParserRuleCall_4_0; }
		
		//'else'
		public Keyword getElseKeyword_5() { return cElseKeyword_5; }
		
		//else=AstExpression
		public Assignment getElseAssignment_6() { return cElseAssignment_6; }
		
		//AstExpression
		public RuleCall getElseAstExpressionParserRuleCall_6_0() { return cElseAstExpressionParserRuleCall_6_0; }
		
		//'end'
		public Keyword getEndKeyword_7() { return cEndKeyword_7; }
	}
	public class AstExpressionElsifElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstExpressionElsif");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElsifKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionAstExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenAstExpressionParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		
		//AstExpressionElsif:
		//	'elsif' condition=AstExpression 'then'
		//	then=AstExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'elsif' condition=AstExpression 'then' then=AstExpression
		public Group getGroup() { return cGroup; }
		
		//'elsif'
		public Keyword getElsifKeyword_0() { return cElsifKeyword_0; }
		
		//condition=AstExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//AstExpression
		public RuleCall getConditionAstExpressionParserRuleCall_1_0() { return cConditionAstExpressionParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//then=AstExpression
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }
		
		//AstExpression
		public RuleCall getThenAstExpressionParserRuleCall_3_0() { return cThenAstExpressionParserRuleCall_3_0; }
	}
	public class AstExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstExpressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionsAstExpressionParserRuleCall_1_0 = (RuleCall)cExpressionsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionsAstExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cGeneratorsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cGeneratorsAstGeneratorParserRuleCall_3_1_0 = (RuleCall)cGeneratorsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cGeneratorsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cGeneratorsAstGeneratorParserRuleCall_3_2_1_0 = (RuleCall)cGeneratorsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AstExpressionList:
		//	'[' expressions+=AstExpression (',' expressions+=AstExpression)* (':' generators+=AstGenerator (','
		//	generators+=AstGenerator)*)? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' expressions+=AstExpression (',' expressions+=AstExpression)* (':' generators+=AstGenerator (','
		//generators+=AstGenerator)*)? ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//expressions+=AstExpression
		public Assignment getExpressionsAssignment_1() { return cExpressionsAssignment_1; }
		
		//AstExpression
		public RuleCall getExpressionsAstExpressionParserRuleCall_1_0() { return cExpressionsAstExpressionParserRuleCall_1_0; }
		
		//(',' expressions+=AstExpression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//expressions+=AstExpression
		public Assignment getExpressionsAssignment_2_1() { return cExpressionsAssignment_2_1; }
		
		//AstExpression
		public RuleCall getExpressionsAstExpressionParserRuleCall_2_1_0() { return cExpressionsAstExpressionParserRuleCall_2_1_0; }
		
		//(':' generators+=AstGenerator (',' generators+=AstGenerator)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//generators+=AstGenerator
		public Assignment getGeneratorsAssignment_3_1() { return cGeneratorsAssignment_3_1; }
		
		//AstGenerator
		public RuleCall getGeneratorsAstGeneratorParserRuleCall_3_1_0() { return cGeneratorsAstGeneratorParserRuleCall_3_1_0; }
		
		//(',' generators+=AstGenerator)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//generators+=AstGenerator
		public Assignment getGeneratorsAssignment_3_2_1() { return cGeneratorsAssignment_3_2_1; }
		
		//AstGenerator
		public RuleCall getGeneratorsAstGeneratorParserRuleCall_3_2_1_0() { return cGeneratorsAstGeneratorParserRuleCall_3_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class AstGeneratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstGenerator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableAstVariableDeclarationParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionAstExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFilterAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFilterAstExpressionParserRuleCall_4_1_0 = (RuleCall)cFilterAssignment_4_1.eContents().get(0);
		
		//AstGenerator:
		//	'for' variable=AstVariableDeclaration 'in' expression=AstExpression (',' filter+=AstExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'for' variable=AstVariableDeclaration 'in' expression=AstExpression (',' filter+=AstExpression)*
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//variable=AstVariableDeclaration
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//AstVariableDeclaration
		public RuleCall getVariableAstVariableDeclarationParserRuleCall_1_0() { return cVariableAstVariableDeclarationParserRuleCall_1_0; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//expression=AstExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//AstExpression
		public RuleCall getExpressionAstExpressionParserRuleCall_3_0() { return cExpressionAstExpressionParserRuleCall_3_0; }
		
		//(',' filter+=AstExpression)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//filter+=AstExpression
		public Assignment getFilterAssignment_4_1() { return cFilterAssignment_4_1; }
		
		//AstExpression
		public RuleCall getFilterAstExpressionParserRuleCall_4_1_0() { return cFilterAstExpressionParserRuleCall_4_1_0; }
	}
	public class AstExpressionSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstExpressionSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstExpressionSetAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExprsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExprsAstExpressionParserRuleCall_2_0_0 = (RuleCall)cExprsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cExprsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cExprsAstExpressionParserRuleCall_2_1_1_0 = (RuleCall)cExprsAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cGeneratorAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cGeneratorAstGeneratorParserRuleCall_3_1_0 = (RuleCall)cGeneratorAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AstExpressionSet:
		//	{AstExpressionSet} '{' (exprs+=AstExpression (',' exprs+=AstExpression))? (':' generator=AstGenerator)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{AstExpressionSet} '{' (exprs+=AstExpression (',' exprs+=AstExpression))? (':' generator=AstGenerator)? '}'
		public Group getGroup() { return cGroup; }
		
		//{AstExpressionSet}
		public Action getAstExpressionSetAction_0() { return cAstExpressionSetAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(exprs+=AstExpression (',' exprs+=AstExpression))?
		public Group getGroup_2() { return cGroup_2; }
		
		//exprs+=AstExpression
		public Assignment getExprsAssignment_2_0() { return cExprsAssignment_2_0; }
		
		//AstExpression
		public RuleCall getExprsAstExpressionParserRuleCall_2_0_0() { return cExprsAstExpressionParserRuleCall_2_0_0; }
		
		//(',' exprs+=AstExpression)
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//exprs+=AstExpression
		public Assignment getExprsAssignment_2_1_1() { return cExprsAssignment_2_1_1; }
		
		//AstExpression
		public RuleCall getExprsAstExpressionParserRuleCall_2_1_1_0() { return cExprsAstExpressionParserRuleCall_2_1_1_0; }
		
		//(':' generator=AstGenerator)?
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//generator=AstGenerator
		public Assignment getGeneratorAssignment_3_1() { return cGeneratorAssignment_3_1; }
		
		//AstGenerator
		public RuleCall getGeneratorAstGeneratorParserRuleCall_3_1_0() { return cGeneratorAstGeneratorParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class AstExpressionMapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstExpressionMap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstExpressionMapAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMapKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cMappingsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cMappingsMappingParserRuleCall_3_0_0 = (RuleCall)cMappingsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cMappingsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cMappingsMappingParserRuleCall_3_1_1_0 = (RuleCall)cMappingsAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cGeneratorAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cGeneratorAstGeneratorParserRuleCall_4_1_0 = (RuleCall)cGeneratorAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AstExpressionMap:
		//	{AstExpressionMap} 'map' '{' (mappings+=Mapping (',' mappings+=Mapping)*)? (':' generator=AstGenerator)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{AstExpressionMap} 'map' '{' (mappings+=Mapping (',' mappings+=Mapping)*)? (':' generator=AstGenerator)? '}'
		public Group getGroup() { return cGroup; }
		
		//{AstExpressionMap}
		public Action getAstExpressionMapAction_0() { return cAstExpressionMapAction_0; }
		
		//'map'
		public Keyword getMapKeyword_1() { return cMapKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(mappings+=Mapping (',' mappings+=Mapping)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//mappings+=Mapping
		public Assignment getMappingsAssignment_3_0() { return cMappingsAssignment_3_0; }
		
		//Mapping
		public RuleCall getMappingsMappingParserRuleCall_3_0_0() { return cMappingsMappingParserRuleCall_3_0_0; }
		
		//(',' mappings+=Mapping)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//mappings+=Mapping
		public Assignment getMappingsAssignment_3_1_1() { return cMappingsAssignment_3_1_1; }
		
		//Mapping
		public RuleCall getMappingsMappingParserRuleCall_3_1_1_0() { return cMappingsMappingParserRuleCall_3_1_1_0; }
		
		//(':' generator=AstGenerator)?
		public Group getGroup_4() { return cGroup_4; }
		
		//':'
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }
		
		//generator=AstGenerator
		public Assignment getGeneratorAssignment_4_1() { return cGeneratorAssignment_4_1; }
		
		//AstGenerator
		public RuleCall getGeneratorAstGeneratorParserRuleCall_4_1_0() { return cGeneratorAstGeneratorParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class MappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.Mapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyAstExpressionParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueAstExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Mapping:
		//	key=AstExpression '->' value=AstExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//key=AstExpression '->' value=AstExpression
		public Group getGroup() { return cGroup; }
		
		//key=AstExpression
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//AstExpression
		public RuleCall getKeyAstExpressionParserRuleCall_0_0() { return cKeyAstExpressionParserRuleCall_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//value=AstExpression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//AstExpression
		public RuleCall getValueAstExpressionParserRuleCall_2_0() { return cValueAstExpressionParserRuleCall_2_0; }
	}
	public class AstExpressionLetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstExpressionLet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cVariablesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cVariablesAstValuedVariableDeclarationParserRuleCall_1_0_0 = (RuleCall)cVariablesAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cVariablesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cVariablesAstValuedVariableDeclarationParserRuleCall_1_1_1_0 = (RuleCall)cVariablesAssignment_1_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprAstExpressionParserRuleCall_3_0 = (RuleCall)cExprAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cEndKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Keyword cEndletKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		
		//AstExpressionLet:
		//	'let' (variables+=AstValuedVariableDeclaration (',' variables+=AstValuedVariableDeclaration)*)? ':'
		//	expr=AstExpression ('end' | 'endlet');
		@Override public ParserRule getRule() { return rule; }
		
		//'let' (variables+=AstValuedVariableDeclaration (',' variables+=AstValuedVariableDeclaration)*)? ':' expr=AstExpression
		//('end' | 'endlet')
		public Group getGroup() { return cGroup; }
		
		//'let'
		public Keyword getLetKeyword_0() { return cLetKeyword_0; }
		
		//(variables+=AstValuedVariableDeclaration (',' variables+=AstValuedVariableDeclaration)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//variables+=AstValuedVariableDeclaration
		public Assignment getVariablesAssignment_1_0() { return cVariablesAssignment_1_0; }
		
		//AstValuedVariableDeclaration
		public RuleCall getVariablesAstValuedVariableDeclarationParserRuleCall_1_0_0() { return cVariablesAstValuedVariableDeclarationParserRuleCall_1_0_0; }
		
		//(',' variables+=AstValuedVariableDeclaration)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//variables+=AstValuedVariableDeclaration
		public Assignment getVariablesAssignment_1_1_1() { return cVariablesAssignment_1_1_1; }
		
		//AstValuedVariableDeclaration
		public RuleCall getVariablesAstValuedVariableDeclarationParserRuleCall_1_1_1_0() { return cVariablesAstValuedVariableDeclarationParserRuleCall_1_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//expr=AstExpression
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }
		
		//AstExpression
		public RuleCall getExprAstExpressionParserRuleCall_3_0() { return cExprAstExpressionParserRuleCall_3_0; }
		
		//('end' | 'endlet')
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//'end'
		public Keyword getEndKeyword_4_0() { return cEndKeyword_4_0; }
		
		//'endlet'
		public Keyword getEndletKeyword_4_1() { return cEndletKeyword_4_1; }
	}
	public class AstExpressionLambdaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstExpressionLambda");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLambdaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersAstVariableDeclarationParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersAstVariableDeclarationParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTypeAstTypeParserRuleCall_6_0 = (RuleCall)cTypeAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cVarKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cVariablesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cVariablesAstValuedVariableDeclarationParserRuleCall_7_1_0 = (RuleCall)cVariablesAssignment_7_1.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cCommaKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Assignment cVariablesAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final RuleCall cVariablesAstValuedVariableDeclarationParserRuleCall_7_2_1_0 = (RuleCall)cVariablesAssignment_7_2_1.eContents().get(0);
		private final Keyword cColonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cExpressionAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cExpressionAstExpressionParserRuleCall_9_0 = (RuleCall)cExpressionAssignment_9.eContents().get(0);
		private final Alternatives cAlternatives_10 = (Alternatives)cGroup.eContents().get(10);
		private final Keyword cEndKeyword_10_0 = (Keyword)cAlternatives_10.eContents().get(0);
		private final Keyword cEndlambdaKeyword_10_1 = (Keyword)cAlternatives_10.eContents().get(1);
		
		//AstExpressionLambda:
		//	'lambda' name=ID
		//	'(' (parameters+=AstVariableDeclaration (',' parameters+=AstVariableDeclaration)*)?
		//	')' '-->' type=AstType ('var'
		//	variables+=AstValuedVariableDeclaration (',' variables+=AstValuedVariableDeclaration)*)? ':'
		//	expression=AstExpression ('end' | 'endlambda');
		@Override public ParserRule getRule() { return rule; }
		
		//'lambda' name=ID '(' (parameters+=AstVariableDeclaration (',' parameters+=AstVariableDeclaration)*)? ')' '-->'
		//type=AstType ('var' variables+=AstValuedVariableDeclaration (',' variables+=AstValuedVariableDeclaration)*)? ':'
		//expression=AstExpression ('end' | 'endlambda')
		public Group getGroup() { return cGroup; }
		
		//'lambda'
		public Keyword getLambdaKeyword_0() { return cLambdaKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(parameters+=AstVariableDeclaration (',' parameters+=AstVariableDeclaration)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//parameters+=AstVariableDeclaration
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }
		
		//AstVariableDeclaration
		public RuleCall getParametersAstVariableDeclarationParserRuleCall_3_0_0() { return cParametersAstVariableDeclarationParserRuleCall_3_0_0; }
		
		//(',' parameters+=AstVariableDeclaration)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//parameters+=AstVariableDeclaration
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }
		
		//AstVariableDeclaration
		public RuleCall getParametersAstVariableDeclarationParserRuleCall_3_1_1_0() { return cParametersAstVariableDeclarationParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'-->'
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_5() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_5; }
		
		//type=AstType
		public Assignment getTypeAssignment_6() { return cTypeAssignment_6; }
		
		//AstType
		public RuleCall getTypeAstTypeParserRuleCall_6_0() { return cTypeAstTypeParserRuleCall_6_0; }
		
		//('var' variables+=AstValuedVariableDeclaration (',' variables+=AstValuedVariableDeclaration)*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'var'
		public Keyword getVarKeyword_7_0() { return cVarKeyword_7_0; }
		
		//variables+=AstValuedVariableDeclaration
		public Assignment getVariablesAssignment_7_1() { return cVariablesAssignment_7_1; }
		
		//AstValuedVariableDeclaration
		public RuleCall getVariablesAstValuedVariableDeclarationParserRuleCall_7_1_0() { return cVariablesAstValuedVariableDeclarationParserRuleCall_7_1_0; }
		
		//(',' variables+=AstValuedVariableDeclaration)*
		public Group getGroup_7_2() { return cGroup_7_2; }
		
		//','
		public Keyword getCommaKeyword_7_2_0() { return cCommaKeyword_7_2_0; }
		
		//variables+=AstValuedVariableDeclaration
		public Assignment getVariablesAssignment_7_2_1() { return cVariablesAssignment_7_2_1; }
		
		//AstValuedVariableDeclaration
		public RuleCall getVariablesAstValuedVariableDeclarationParserRuleCall_7_2_1_0() { return cVariablesAstValuedVariableDeclarationParserRuleCall_7_2_1_0; }
		
		//':'
		public Keyword getColonKeyword_8() { return cColonKeyword_8; }
		
		//expression=AstExpression
		public Assignment getExpressionAssignment_9() { return cExpressionAssignment_9; }
		
		//AstExpression
		public RuleCall getExpressionAstExpressionParserRuleCall_9_0() { return cExpressionAstExpressionParserRuleCall_9_0; }
		
		//('end' | 'endlambda')
		public Alternatives getAlternatives_10() { return cAlternatives_10; }
		
		//'end'
		public Keyword getEndKeyword_10_0() { return cEndKeyword_10_0; }
		
		//'endlambda'
		public Keyword getEndlambdaKeyword_10_1() { return cEndlambdaKeyword_10_1; }
	}
	public class AstExpressionProcElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstExpressionProc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersAstVariableDeclarationParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersAstVariableDeclarationParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cVarKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cVariablesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cVariablesAstValuedVariableDeclarationParserRuleCall_5_1_0 = (RuleCall)cVariablesAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cVariablesAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cVariablesAstValuedVariableDeclarationParserRuleCall_5_2_1_0 = (RuleCall)cVariablesAssignment_5_2_1.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Keyword cBeginKeyword_6_0 = (Keyword)cAlternatives_6.eContents().get(0);
		private final Keyword cDoKeyword_6_1 = (Keyword)cAlternatives_6.eContents().get(1);
		private final Assignment cStatementsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStatementsAstStatementParserRuleCall_7_0 = (RuleCall)cStatementsAssignment_7.eContents().get(0);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Keyword cEndKeyword_8_0 = (Keyword)cAlternatives_8.eContents().get(0);
		private final Keyword cEndprocKeyword_8_1 = (Keyword)cAlternatives_8.eContents().get(1);
		
		//AstExpressionProc:
		//	'proc' name=ID
		//	'(' (parameters+=AstVariableDeclaration (',' parameters+=AstVariableDeclaration)*)?
		//	')' ('var'
		//	variables+=AstValuedVariableDeclaration (',' variables+=AstValuedVariableDeclaration)*)? ('begin' | 'do')
		//	statements+=AstStatement* ('end' | 'endproc');
		@Override public ParserRule getRule() { return rule; }
		
		//'proc' name=ID '(' (parameters+=AstVariableDeclaration (',' parameters+=AstVariableDeclaration)*)? ')' ('var'
		//variables+=AstValuedVariableDeclaration (',' variables+=AstValuedVariableDeclaration)*)? ('begin' | 'do')
		//statements+=AstStatement* ('end' | 'endproc')
		public Group getGroup() { return cGroup; }
		
		//'proc'
		public Keyword getProcKeyword_0() { return cProcKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(parameters+=AstVariableDeclaration (',' parameters+=AstVariableDeclaration)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//parameters+=AstVariableDeclaration
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }
		
		//AstVariableDeclaration
		public RuleCall getParametersAstVariableDeclarationParserRuleCall_3_0_0() { return cParametersAstVariableDeclarationParserRuleCall_3_0_0; }
		
		//(',' parameters+=AstVariableDeclaration)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//parameters+=AstVariableDeclaration
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }
		
		//AstVariableDeclaration
		public RuleCall getParametersAstVariableDeclarationParserRuleCall_3_1_1_0() { return cParametersAstVariableDeclarationParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//('var' variables+=AstValuedVariableDeclaration (',' variables+=AstValuedVariableDeclaration)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'var'
		public Keyword getVarKeyword_5_0() { return cVarKeyword_5_0; }
		
		//variables+=AstValuedVariableDeclaration
		public Assignment getVariablesAssignment_5_1() { return cVariablesAssignment_5_1; }
		
		//AstValuedVariableDeclaration
		public RuleCall getVariablesAstValuedVariableDeclarationParserRuleCall_5_1_0() { return cVariablesAstValuedVariableDeclarationParserRuleCall_5_1_0; }
		
		//(',' variables+=AstValuedVariableDeclaration)*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//','
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }
		
		//variables+=AstValuedVariableDeclaration
		public Assignment getVariablesAssignment_5_2_1() { return cVariablesAssignment_5_2_1; }
		
		//AstValuedVariableDeclaration
		public RuleCall getVariablesAstValuedVariableDeclarationParserRuleCall_5_2_1_0() { return cVariablesAstValuedVariableDeclarationParserRuleCall_5_2_1_0; }
		
		//('begin' | 'do')
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//'begin'
		public Keyword getBeginKeyword_6_0() { return cBeginKeyword_6_0; }
		
		//'do'
		public Keyword getDoKeyword_6_1() { return cDoKeyword_6_1; }
		
		//statements+=AstStatement*
		public Assignment getStatementsAssignment_7() { return cStatementsAssignment_7; }
		
		//AstStatement
		public RuleCall getStatementsAstStatementParserRuleCall_7_0() { return cStatementsAstStatementParserRuleCall_7_0; }
		
		//('end' | 'endproc')
		public Alternatives getAlternatives_8() { return cAlternatives_8; }
		
		//'end'
		public Keyword getEndKeyword_8_0() { return cEndKeyword_8_0; }
		
		//'endproc'
		public Keyword getEndprocKeyword_8_1() { return cEndprocKeyword_8_1; }
	}
	public class AstExpressionCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstExpressionCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionAstExpressionSymbolReferenceParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCasesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCasesAstExpressionAlternativeParserRuleCall_3_0 = (RuleCall)cCasesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDefaultAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDefaultAstExpressionParserRuleCall_4_1_0 = (RuleCall)cDefaultAssignment_4_1.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AstExpressionCase:
		//	'case' expression=AstExpressionSymbolReference 'of'
		//	cases+=AstExpressionAlternative+ ('else' default=AstExpression)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'case' expression=AstExpressionSymbolReference 'of' cases+=AstExpressionAlternative+ ('else' default=AstExpression)?
		//'end'
		public Group getGroup() { return cGroup; }
		
		//'case'
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }
		
		//expression=AstExpressionSymbolReference
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//AstExpressionSymbolReference
		public RuleCall getExpressionAstExpressionSymbolReferenceParserRuleCall_1_0() { return cExpressionAstExpressionSymbolReferenceParserRuleCall_1_0; }
		
		//'of'
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//cases+=AstExpressionAlternative+
		public Assignment getCasesAssignment_3() { return cCasesAssignment_3; }
		
		//AstExpressionAlternative
		public RuleCall getCasesAstExpressionAlternativeParserRuleCall_3_0() { return cCasesAstExpressionAlternativeParserRuleCall_3_0; }
		
		//('else' default=AstExpression)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'else'
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }
		
		//default=AstExpression
		public Assignment getDefaultAssignment_4_1() { return cDefaultAssignment_4_1; }
		
		//AstExpression
		public RuleCall getDefaultAstExpressionParserRuleCall_4_1_0() { return cDefaultAstExpressionParserRuleCall_4_1_0; }
		
		//'end'
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}
	public class AstExpressionAlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstExpressionAlternative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPatternAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPatternAstPatternParserRuleCall_0_0 = (RuleCall)cPatternAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cGuardKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cGuardsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cGuardsAstExpressionParserRuleCall_1_1_0 = (RuleCall)cGuardsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cGuardsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cGuardsAstExpressionParserRuleCall_1_2_1_0 = (RuleCall)cGuardsAssignment_1_2_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionAstExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AstExpressionAlternative:
		//	pattern=AstPattern ('guard' guards+=AstExpression (',' guards+=AstExpression)*)?
		//	':' expression=AstExpression 'end';
		@Override public ParserRule getRule() { return rule; }
		
		//pattern=AstPattern ('guard' guards+=AstExpression (',' guards+=AstExpression)*)? ':' expression=AstExpression 'end'
		public Group getGroup() { return cGroup; }
		
		//pattern=AstPattern
		public Assignment getPatternAssignment_0() { return cPatternAssignment_0; }
		
		//AstPattern
		public RuleCall getPatternAstPatternParserRuleCall_0_0() { return cPatternAstPatternParserRuleCall_0_0; }
		
		//('guard' guards+=AstExpression (',' guards+=AstExpression)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'guard'
		public Keyword getGuardKeyword_1_0() { return cGuardKeyword_1_0; }
		
		//guards+=AstExpression
		public Assignment getGuardsAssignment_1_1() { return cGuardsAssignment_1_1; }
		
		//AstExpression
		public RuleCall getGuardsAstExpressionParserRuleCall_1_1_0() { return cGuardsAstExpressionParserRuleCall_1_1_0; }
		
		//(',' guards+=AstExpression)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//guards+=AstExpression
		public Assignment getGuardsAssignment_1_2_1() { return cGuardsAssignment_1_2_1; }
		
		//AstExpression
		public RuleCall getGuardsAstExpressionParserRuleCall_1_2_1_0() { return cGuardsAstExpressionParserRuleCall_1_2_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//expression=AstExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//AstExpression
		public RuleCall getExpressionAstExpressionParserRuleCall_3_0() { return cExpressionAstExpressionParserRuleCall_3_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class AstExpressionLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstExpressionLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAstExpressionBooleanParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAstExpressionFloatParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAstExpressionIntegerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAstExpressionStringParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// -- /////////////////////////////////////////////////////////////////////////////
		//// literal expressions
		//// -- /////////////////////////////////////////////////////////////////////////////
		//AstExpressionLiteral:
		//	AstExpressionBoolean
		//	| AstExpressionFloat
		//	| AstExpressionInteger
		//	| AstExpressionString;
		@Override public ParserRule getRule() { return rule; }
		
		//AstExpressionBoolean | AstExpressionFloat | AstExpressionInteger | AstExpressionString
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AstExpressionBoolean
		public RuleCall getAstExpressionBooleanParserRuleCall_0() { return cAstExpressionBooleanParserRuleCall_0; }
		
		//AstExpressionFloat
		public RuleCall getAstExpressionFloatParserRuleCall_1() { return cAstExpressionFloatParserRuleCall_1; }
		
		//AstExpressionInteger
		public RuleCall getAstExpressionIntegerParserRuleCall_2() { return cAstExpressionIntegerParserRuleCall_2; }
		
		//AstExpressionString
		public RuleCall getAstExpressionStringParserRuleCall_3() { return cAstExpressionStringParserRuleCall_3; }
	}
	public class AstExpressionBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstExpressionBoolean");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBOOLTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//AstExpressionBoolean:
		//	value=BOOL;
		@Override public ParserRule getRule() { return rule; }
		
		//value=BOOL
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//BOOL
		public RuleCall getValueBOOLTerminalRuleCall_0() { return cValueBOOLTerminalRuleCall_0; }
	}
	public class AstExpressionFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstExpressionFloat");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueREALTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//AstExpressionFloat:
		//	value=REAL;
		@Override public ParserRule getRule() { return rule; }
		
		//value=REAL
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//REAL
		public RuleCall getValueREALTerminalRuleCall_0() { return cValueREALTerminalRuleCall_0; }
	}
	public class AstExpressionIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstExpressionInteger");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final RuleCall cValueDECIMALTerminalRuleCall_0_0 = (RuleCall)cValueAlternatives_0.eContents().get(0);
		private final RuleCall cValueOCTALTerminalRuleCall_0_1 = (RuleCall)cValueAlternatives_0.eContents().get(1);
		private final RuleCall cValueHEXTerminalRuleCall_0_2 = (RuleCall)cValueAlternatives_0.eContents().get(2);
		
		//AstExpressionInteger:
		//	value=(DECIMAL | OCTAL | HEX);
		@Override public ParserRule getRule() { return rule; }
		
		//value=(DECIMAL | OCTAL | HEX)
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//(DECIMAL | OCTAL | HEX)
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//DECIMAL
		public RuleCall getValueDECIMALTerminalRuleCall_0_0() { return cValueDECIMALTerminalRuleCall_0_0; }
		
		//OCTAL
		public RuleCall getValueOCTALTerminalRuleCall_0_1() { return cValueOCTALTerminalRuleCall_0_1; }
		
		//HEX
		public RuleCall getValueHEXTerminalRuleCall_0_2() { return cValueHEXTerminalRuleCall_0_2; }
	}
	public class AstExpressionStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstExpressionString");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//AstExpressionString:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class AstPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstPattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAstPatternAlternativeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAstPatternAliasParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAstPatternDeconstructionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAstPatternListParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAstPatternDeclarationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAstPatternWildcardParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//// -- /////////////////////////////////////////////////////////////////////////////
		//// patterns
		//// -- /////////////////////////////////////////////////////////////////////////////
		//AstPattern:
		//	AstPatternAlternative
		//	| AstPatternAlias
		//	| AstPatternDeconstruction
		//	| AstPatternList
		//	| AstPatternDeclaration
		//	| AstPatternWildcard;
		@Override public ParserRule getRule() { return rule; }
		
		//AstPatternAlternative | AstPatternAlias | AstPatternDeconstruction | AstPatternList | AstPatternDeclaration |
		//AstPatternWildcard
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AstPatternAlternative
		public RuleCall getAstPatternAlternativeParserRuleCall_0() { return cAstPatternAlternativeParserRuleCall_0; }
		
		//AstPatternAlias
		public RuleCall getAstPatternAliasParserRuleCall_1() { return cAstPatternAliasParserRuleCall_1; }
		
		//AstPatternDeconstruction
		public RuleCall getAstPatternDeconstructionParserRuleCall_2() { return cAstPatternDeconstructionParserRuleCall_2; }
		
		//AstPatternList
		public RuleCall getAstPatternListParserRuleCall_3() { return cAstPatternListParserRuleCall_3; }
		
		//AstPatternDeclaration
		public RuleCall getAstPatternDeclarationParserRuleCall_4() { return cAstPatternDeclarationParserRuleCall_4; }
		
		//AstPatternWildcard
		public RuleCall getAstPatternWildcardParserRuleCall_5() { return cAstPatternWildcardParserRuleCall_5; }
	}
	public class AstPatternDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstPatternDeclaration");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVariableAstTokenParserRuleCall_0 = (RuleCall)cVariableAssignment.eContents().get(0);
		
		//AstPatternDeclaration AstPattern:
		//	variable=AstToken;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=AstToken
		public Assignment getVariableAssignment() { return cVariableAssignment; }
		
		//AstToken
		public RuleCall getVariableAstTokenParserRuleCall_0() { return cVariableAstTokenParserRuleCall_0; }
	}
	public class AstPatternWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstPatternWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstPatternAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword c_Keyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//AstPatternWildcard AstPattern:
		//	{AstPattern} '_';
		@Override public ParserRule getRule() { return rule; }
		
		//{AstPattern} '_'
		public Group getGroup() { return cGroup; }
		
		//{AstPattern}
		public Action getAstPatternAction_0() { return cAstPatternAction_0; }
		
		//'_'
		public Keyword get_Keyword_1() { return c_Keyword_1; }
	}
	public class AstPatternAlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstPatternAlternative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cPatternsAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cPatternsAstPatternLiteralParserRuleCall_0_0_0 = (RuleCall)cPatternsAssignment_0_0.eContents().get(0);
		private final Assignment cPatternsAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cPatternsAstPatternExpressionParserRuleCall_0_1_0 = (RuleCall)cPatternsAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cPatternsAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cPatternsAstPatternLiteralParserRuleCall_1_1_0_0 = (RuleCall)cPatternsAssignment_1_1_0.eContents().get(0);
		private final Assignment cPatternsAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cPatternsAstPatternExpressionParserRuleCall_1_1_1_0 = (RuleCall)cPatternsAssignment_1_1_1.eContents().get(0);
		
		//AstPatternAlternative AstPattern:
		//	(patterns+=AstPatternLiteral | patterns+=AstPatternExpression) ('|' (patterns+=AstPatternLiteral |
		//	patterns+=AstPatternExpression))*;
		@Override public ParserRule getRule() { return rule; }
		
		//(patterns+=AstPatternLiteral | patterns+=AstPatternExpression) ('|' (patterns+=AstPatternLiteral |
		//patterns+=AstPatternExpression))*
		public Group getGroup() { return cGroup; }
		
		//(patterns+=AstPatternLiteral | patterns+=AstPatternExpression)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//patterns+=AstPatternLiteral
		public Assignment getPatternsAssignment_0_0() { return cPatternsAssignment_0_0; }
		
		//AstPatternLiteral
		public RuleCall getPatternsAstPatternLiteralParserRuleCall_0_0_0() { return cPatternsAstPatternLiteralParserRuleCall_0_0_0; }
		
		//patterns+=AstPatternExpression
		public Assignment getPatternsAssignment_0_1() { return cPatternsAssignment_0_1; }
		
		//AstPatternExpression
		public RuleCall getPatternsAstPatternExpressionParserRuleCall_0_1_0() { return cPatternsAstPatternExpressionParserRuleCall_0_1_0; }
		
		//('|' (patterns+=AstPatternLiteral | patterns+=AstPatternExpression))*
		public Group getGroup_1() { return cGroup_1; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }
		
		//(patterns+=AstPatternLiteral | patterns+=AstPatternExpression)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//patterns+=AstPatternLiteral
		public Assignment getPatternsAssignment_1_1_0() { return cPatternsAssignment_1_1_0; }
		
		//AstPatternLiteral
		public RuleCall getPatternsAstPatternLiteralParserRuleCall_1_1_0_0() { return cPatternsAstPatternLiteralParserRuleCall_1_1_0_0; }
		
		//patterns+=AstPatternExpression
		public Assignment getPatternsAssignment_1_1_1() { return cPatternsAssignment_1_1_1; }
		
		//AstPatternExpression
		public RuleCall getPatternsAstPatternExpressionParserRuleCall_1_1_1_0() { return cPatternsAstPatternExpressionParserRuleCall_1_1_1_0; }
	}
	public class AstPatternAliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstPatternAlias");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAliasAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cAliasAlternatives_0_0 = (Alternatives)cAliasAssignment_0.eContents().get(0);
		private final RuleCall cAliasAstPatternDeclarationParserRuleCall_0_0_0 = (RuleCall)cAliasAlternatives_0_0.eContents().get(0);
		private final RuleCall cAliasAstPatternWildcardParserRuleCall_0_0_1 = (RuleCall)cAliasAlternatives_0_0.eContents().get(1);
		private final Keyword cCommercialAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionAstPatternExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//AstPatternAlias AstPattern:
		//	alias=(AstPatternDeclaration | AstPatternWildcard) '@' expression=AstPatternExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//alias=(AstPatternDeclaration | AstPatternWildcard) '@' expression=AstPatternExpression
		public Group getGroup() { return cGroup; }
		
		//alias=(AstPatternDeclaration | AstPatternWildcard)
		public Assignment getAliasAssignment_0() { return cAliasAssignment_0; }
		
		//(AstPatternDeclaration | AstPatternWildcard)
		public Alternatives getAliasAlternatives_0_0() { return cAliasAlternatives_0_0; }
		
		//AstPatternDeclaration
		public RuleCall getAliasAstPatternDeclarationParserRuleCall_0_0_0() { return cAliasAstPatternDeclarationParserRuleCall_0_0_0; }
		
		//AstPatternWildcard
		public RuleCall getAliasAstPatternWildcardParserRuleCall_0_0_1() { return cAliasAstPatternWildcardParserRuleCall_0_0_1; }
		
		//'@'
		public Keyword getCommercialAtKeyword_1() { return cCommercialAtKeyword_1; }
		
		//expression=AstPatternExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//AstPatternExpression
		public RuleCall getExpressionAstPatternExpressionParserRuleCall_2_0() { return cExpressionAstPatternExpressionParserRuleCall_2_0; }
	}
	public class AstPatternListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstPatternList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPatternsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPatternsAstPatternParserRuleCall_1_0 = (RuleCall)cPatternsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPatternsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPatternsAstPatternParserRuleCall_2_1_0 = (RuleCall)cPatternsAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AstPatternList AstPattern:
		//	'[' patterns+=AstPattern (',' patterns+=AstPattern)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' patterns+=AstPattern (',' patterns+=AstPattern)* ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//patterns+=AstPattern
		public Assignment getPatternsAssignment_1() { return cPatternsAssignment_1; }
		
		//AstPattern
		public RuleCall getPatternsAstPatternParserRuleCall_1_0() { return cPatternsAstPatternParserRuleCall_1_0; }
		
		//(',' patterns+=AstPattern)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//patterns+=AstPattern
		public Assignment getPatternsAssignment_2_1() { return cPatternsAssignment_2_1; }
		
		//AstPattern
		public RuleCall getPatternsAstPatternParserRuleCall_2_1_0() { return cPatternsAstPatternParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class AstPatternLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstPatternLiteral");
		private final Assignment cLiteralAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLiteralAstExpressionLiteralParserRuleCall_0 = (RuleCall)cLiteralAssignment.eContents().get(0);
		
		//AstPatternLiteral AstPattern:
		//	literal=AstExpressionLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//literal=AstExpressionLiteral
		public Assignment getLiteralAssignment() { return cLiteralAssignment; }
		
		//AstExpressionLiteral
		public RuleCall getLiteralAstExpressionLiteralParserRuleCall_0() { return cLiteralAstExpressionLiteralParserRuleCall_0; }
	}
	public class AstPatternExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstPatternExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGraveAccentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cExpressionAstExpressionParserRuleCall_1_0_1_0 = (RuleCall)cExpressionAssignment_1_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cExpressionAstExpressionSymbolReferenceParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		
		//AstPatternExpression AstPattern:
		//	"`" ('(' expression=AstExpression ')' | expression=AstExpressionSymbolReference);
		@Override public ParserRule getRule() { return rule; }
		
		//"`" ('(' expression=AstExpression ')' | expression=AstExpressionSymbolReference)
		public Group getGroup() { return cGroup; }
		
		//"`"
		public Keyword getGraveAccentKeyword_0() { return cGraveAccentKeyword_0; }
		
		//('(' expression=AstExpression ')' | expression=AstExpressionSymbolReference)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'(' expression=AstExpression ')'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0_0() { return cLeftParenthesisKeyword_1_0_0; }
		
		//expression=AstExpression
		public Assignment getExpressionAssignment_1_0_1() { return cExpressionAssignment_1_0_1; }
		
		//AstExpression
		public RuleCall getExpressionAstExpressionParserRuleCall_1_0_1_0() { return cExpressionAstExpressionParserRuleCall_1_0_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_0_2() { return cRightParenthesisKeyword_1_0_2; }
		
		//expression=AstExpressionSymbolReference
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }
		
		//AstExpressionSymbolReference
		public RuleCall getExpressionAstExpressionSymbolReferenceParserRuleCall_1_1_0() { return cExpressionAstExpressionSymbolReferenceParserRuleCall_1_1_0; }
	}
	public class AstPatternDeconstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstPatternDeconstruction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPatternsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPatternsAstPatternParserRuleCall_2_0 = (RuleCall)cPatternsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPatternsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPatternsAstPatternParserRuleCall_3_1_0 = (RuleCall)cPatternsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AstPatternDeconstruction AstPattern:
		//	name=ID '(' patterns+=AstPattern (',' patterns+=AstPattern)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '(' patterns+=AstPattern (',' patterns+=AstPattern)* ')'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//patterns+=AstPattern
		public Assignment getPatternsAssignment_2() { return cPatternsAssignment_2; }
		
		//AstPattern
		public RuleCall getPatternsAstPatternParserRuleCall_2_0() { return cPatternsAstPatternParserRuleCall_2_0; }
		
		//(',' patterns+=AstPattern)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//patterns+=AstPattern
		public Assignment getPatternsAssignment_3_1() { return cPatternsAssignment_3_1; }
		
		//AstPattern
		public RuleCall getPatternsAstPatternParserRuleCall_3_1_0() { return cPatternsAstPatternParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AstTypeUserElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstTypeUser");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstTypeUserAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// -- /////////////////////////////////////////////////////////////////////////////
		//// type and variable declarations
		//// -- /////////////////////////////////////////////////////////////////////////////
		//AstTypeUser AstVariable:
		//	{AstTypeUser} ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{AstTypeUser} ID
		public Group getGroup() { return cGroup; }
		
		//{AstTypeUser}
		public Action getAstTypeUserAction_0() { return cAstTypeUserAction_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class AstTypeBuiltInElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstTypeBuiltIn");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cUintKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFloatKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDoubleKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cBoolKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cListKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cStringKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cSetKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cMapKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//AstTypeBuiltIn:
		//	'int' | 'uint' | 'float' | 'double' | 'bool' | 'List' | 'String' | 'set' | 'map';
		@Override public ParserRule getRule() { return rule; }
		
		//'int' | 'uint' | 'float' | 'double' | 'bool' | 'List' | 'String' | 'set' | 'map'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'int'
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }
		
		//'uint'
		public Keyword getUintKeyword_1() { return cUintKeyword_1; }
		
		//'float'
		public Keyword getFloatKeyword_2() { return cFloatKeyword_2; }
		
		//'double'
		public Keyword getDoubleKeyword_3() { return cDoubleKeyword_3; }
		
		//'bool'
		public Keyword getBoolKeyword_4() { return cBoolKeyword_4; }
		
		//'List'
		public Keyword getListKeyword_5() { return cListKeyword_5; }
		
		//'String'
		public Keyword getStringKeyword_6() { return cStringKeyword_6; }
		
		//'set'
		public Keyword getSetKeyword_7() { return cSetKeyword_7; }
		
		//'map'
		public Keyword getMapKeyword_8() { return cMapKeyword_8; }
	}
	public class AstTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAstTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cBuiltinAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cBuiltinAstTypeBuiltInParserRuleCall_1_0_0_0 = (RuleCall)cBuiltinAssignment_1_0_0.eContents().get(0);
		private final Assignment cTypeParamsAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cTypeParamsAstTypeParameterListParserRuleCall_1_0_1_0 = (RuleCall)cTypeParamsAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Assignment cDimensionsAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cDimensionsAstExpressionParserRuleCall_1_0_2_1_0 = (RuleCall)cDimensionsAssignment_1_0_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_2_2 = (Keyword)cGroup_1_0_2.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cNameAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final CrossReference cNameAstTypeUserCrossReference_1_1_0_0 = (CrossReference)cNameAssignment_1_1_0.eContents().get(0);
		private final RuleCall cNameAstTypeUserIDTerminalRuleCall_1_1_0_0_1 = (RuleCall)cNameAstTypeUserCrossReference_1_1_0_0.eContents().get(1);
		private final Assignment cTypeParamsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cTypeParamsAstTypeParameterListParserRuleCall_1_1_1_0 = (RuleCall)cTypeParamsAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cDimensionsAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cDimensionsAstExpressionParserRuleCall_1_1_2_1_0 = (RuleCall)cDimensionsAssignment_1_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_2_2 = (Keyword)cGroup_1_1_2.eContents().get(2);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cGroup_1_2.eContents().get(1);
		private final Assignment cDomainAssignment_1_2_1_0 = (Assignment)cGroup_1_2_1.eContents().get(0);
		private final RuleCall cDomainAstTypeParserRuleCall_1_2_1_0_0 = (RuleCall)cDomainAssignment_1_2_1_0.eContents().get(0);
		private final Group cGroup_1_2_1_1 = (Group)cGroup_1_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_2_1_1_0 = (Keyword)cGroup_1_2_1_1.eContents().get(0);
		private final Assignment cDomainAssignment_1_2_1_1_1 = (Assignment)cGroup_1_2_1_1.eContents().get(1);
		private final RuleCall cDomainAstTypeParserRuleCall_1_2_1_1_1_0 = (RuleCall)cDomainAssignment_1_2_1_1_1.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		private final Assignment cCodomainAssignment_1_2_3 = (Assignment)cGroup_1_2.eContents().get(3);
		private final RuleCall cCodomainAstTypeParserRuleCall_1_2_3_0 = (RuleCall)cCodomainAssignment_1_2_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2_4 = (Keyword)cGroup_1_2.eContents().get(4);
		
		//AstType:
		//	{AstType} (builtin=AstTypeBuiltIn typeParams=AstTypeParameterList? ('[' dimensions+=AstExpression ']')*
		//	| name=[AstTypeUser] typeParams=AstTypeParameterList? ('[' dimensions+=AstExpression ']')*
		//	| '[' (domain+=AstType (',' domain+=AstType)*)? '-->' codomain=AstType? ']');
		@Override public ParserRule getRule() { return rule; }
		
		//{AstType} (builtin=AstTypeBuiltIn typeParams=AstTypeParameterList? ('[' dimensions+=AstExpression ']')* |
		//name=[AstTypeUser] typeParams=AstTypeParameterList? ('[' dimensions+=AstExpression ']')* | '[' (domain+=AstType (','
		//domain+=AstType)*)? '-->' codomain=AstType? ']')
		public Group getGroup() { return cGroup; }
		
		//{AstType}
		public Action getAstTypeAction_0() { return cAstTypeAction_0; }
		
		//(builtin=AstTypeBuiltIn typeParams=AstTypeParameterList? ('[' dimensions+=AstExpression ']')* | name=[AstTypeUser]
		//typeParams=AstTypeParameterList? ('[' dimensions+=AstExpression ']')* | '[' (domain+=AstType (',' domain+=AstType)*)?
		//'-->' codomain=AstType? ']')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//builtin=AstTypeBuiltIn typeParams=AstTypeParameterList? ('[' dimensions+=AstExpression ']')*
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//builtin=AstTypeBuiltIn
		public Assignment getBuiltinAssignment_1_0_0() { return cBuiltinAssignment_1_0_0; }
		
		//AstTypeBuiltIn
		public RuleCall getBuiltinAstTypeBuiltInParserRuleCall_1_0_0_0() { return cBuiltinAstTypeBuiltInParserRuleCall_1_0_0_0; }
		
		//typeParams=AstTypeParameterList?
		public Assignment getTypeParamsAssignment_1_0_1() { return cTypeParamsAssignment_1_0_1; }
		
		//AstTypeParameterList
		public RuleCall getTypeParamsAstTypeParameterListParserRuleCall_1_0_1_0() { return cTypeParamsAstTypeParameterListParserRuleCall_1_0_1_0; }
		
		//('[' dimensions+=AstExpression ']')*
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0_2_0() { return cLeftSquareBracketKeyword_1_0_2_0; }
		
		//dimensions+=AstExpression
		public Assignment getDimensionsAssignment_1_0_2_1() { return cDimensionsAssignment_1_0_2_1; }
		
		//AstExpression
		public RuleCall getDimensionsAstExpressionParserRuleCall_1_0_2_1_0() { return cDimensionsAstExpressionParserRuleCall_1_0_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_0_2_2() { return cRightSquareBracketKeyword_1_0_2_2; }
		
		//name=[AstTypeUser] typeParams=AstTypeParameterList? ('[' dimensions+=AstExpression ']')*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//name=[AstTypeUser]
		public Assignment getNameAssignment_1_1_0() { return cNameAssignment_1_1_0; }
		
		//[AstTypeUser]
		public CrossReference getNameAstTypeUserCrossReference_1_1_0_0() { return cNameAstTypeUserCrossReference_1_1_0_0; }
		
		//ID
		public RuleCall getNameAstTypeUserIDTerminalRuleCall_1_1_0_0_1() { return cNameAstTypeUserIDTerminalRuleCall_1_1_0_0_1; }
		
		//typeParams=AstTypeParameterList?
		public Assignment getTypeParamsAssignment_1_1_1() { return cTypeParamsAssignment_1_1_1; }
		
		//AstTypeParameterList
		public RuleCall getTypeParamsAstTypeParameterListParserRuleCall_1_1_1_0() { return cTypeParamsAstTypeParameterListParserRuleCall_1_1_1_0; }
		
		//('[' dimensions+=AstExpression ']')*
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1_2_0() { return cLeftSquareBracketKeyword_1_1_2_0; }
		
		//dimensions+=AstExpression
		public Assignment getDimensionsAssignment_1_1_2_1() { return cDimensionsAssignment_1_1_2_1; }
		
		//AstExpression
		public RuleCall getDimensionsAstExpressionParserRuleCall_1_1_2_1_0() { return cDimensionsAstExpressionParserRuleCall_1_1_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_1_2_2() { return cRightSquareBracketKeyword_1_1_2_2; }
		
		//'[' (domain+=AstType (',' domain+=AstType)*)? '-->' codomain=AstType? ']'
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_2_0() { return cLeftSquareBracketKeyword_1_2_0; }
		
		//(domain+=AstType (',' domain+=AstType)*)?
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }
		
		//domain+=AstType
		public Assignment getDomainAssignment_1_2_1_0() { return cDomainAssignment_1_2_1_0; }
		
		//AstType
		public RuleCall getDomainAstTypeParserRuleCall_1_2_1_0_0() { return cDomainAstTypeParserRuleCall_1_2_1_0_0; }
		
		//(',' domain+=AstType)*
		public Group getGroup_1_2_1_1() { return cGroup_1_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_2_1_1_0() { return cCommaKeyword_1_2_1_1_0; }
		
		//domain+=AstType
		public Assignment getDomainAssignment_1_2_1_1_1() { return cDomainAssignment_1_2_1_1_1; }
		
		//AstType
		public RuleCall getDomainAstTypeParserRuleCall_1_2_1_1_1_0() { return cDomainAstTypeParserRuleCall_1_2_1_1_1_0; }
		
		//'-->'
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_1_2_2() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_1_2_2; }
		
		//codomain=AstType?
		public Assignment getCodomainAssignment_1_2_3() { return cCodomainAssignment_1_2_3; }
		
		//AstType
		public RuleCall getCodomainAstTypeParserRuleCall_1_2_3_0() { return cCodomainAstTypeParserRuleCall_1_2_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2_4() { return cRightSquareBracketKeyword_1_2_4; }
	}
	public class AstTypeParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstTypeParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParamsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamsAstTypeParamParserRuleCall_1_0 = (RuleCall)cParamsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamsAstTypeParamParserRuleCall_2_1_0 = (RuleCall)cParamsAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AstTypeParameterList:
		//	'(' params+=AstTypeParam (',' params+=AstTypeParam)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' params+=AstTypeParam (',' params+=AstTypeParam)* ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//params+=AstTypeParam
		public Assignment getParamsAssignment_1() { return cParamsAssignment_1; }
		
		//AstTypeParam
		public RuleCall getParamsAstTypeParamParserRuleCall_1_0() { return cParamsAstTypeParamParserRuleCall_1_0; }
		
		//(',' params+=AstTypeParam)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//params+=AstTypeParam
		public Assignment getParamsAssignment_2_1() { return cParamsAssignment_2_1; }
		
		//AstTypeParam
		public RuleCall getParamsAstTypeParamParserRuleCall_2_1_0() { return cParamsAstTypeParamParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class AstTypeParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstTypeParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValueAstExpressionParserRuleCall_0_2_0 = (RuleCall)cValueAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cNameAlternatives_1_0_0 = (Alternatives)cNameAssignment_1_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0_0 = (RuleCall)cNameAlternatives_1_0_0.eContents().get(0);
		private final Keyword cNameTypeKeyword_1_0_0_1 = (Keyword)cNameAlternatives_1_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTypeAstTypeParserRuleCall_1_2_0 = (RuleCall)cTypeAssignment_1_2.eContents().get(0);
		
		//AstTypeParam:
		//	name=ID '=' value=AstExpression | name=(ID | 'type') ':' type=AstType;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '=' value=AstExpression | name=(ID | 'type') ':' type=AstType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=ID '=' value=AstExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//value=AstExpression
		public Assignment getValueAssignment_0_2() { return cValueAssignment_0_2; }
		
		//AstExpression
		public RuleCall getValueAstExpressionParserRuleCall_0_2_0() { return cValueAstExpressionParserRuleCall_0_2_0; }
		
		//name=(ID | 'type') ':' type=AstType
		public Group getGroup_1() { return cGroup_1; }
		
		//name=(ID | 'type')
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//(ID | 'type')
		public Alternatives getNameAlternatives_1_0_0() { return cNameAlternatives_1_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0_0() { return cNameIDTerminalRuleCall_1_0_0_0; }
		
		//'type'
		public Keyword getNameTypeKeyword_1_0_0_1() { return cNameTypeKeyword_1_0_0_1; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//type=AstType
		public Assignment getTypeAssignment_1_2() { return cTypeAssignment_1_2; }
		
		//AstType
		public RuleCall getTypeAstTypeParserRuleCall_1_2_0() { return cTypeAstTypeParserRuleCall_1_2_0; }
	}
	public class AstVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAstAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeAstTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDimensionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDimensionsAstExpressionParserRuleCall_3_1_0 = (RuleCall)cDimensionsAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//AstVariableDeclaration AstVariable:
		//	annotations+=AstAnnotation*
		//	type=AstType name=ID ('[' dimensions+=AstExpression ']')*;
		@Override public ParserRule getRule() { return rule; }
		
		//annotations+=AstAnnotation* type=AstType name=ID ('[' dimensions+=AstExpression ']')*
		public Group getGroup() { return cGroup; }
		
		//annotations+=AstAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }
		
		//AstAnnotation
		public RuleCall getAnnotationsAstAnnotationParserRuleCall_0_0() { return cAnnotationsAstAnnotationParserRuleCall_0_0; }
		
		//type=AstType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//AstType
		public RuleCall getTypeAstTypeParserRuleCall_1_0() { return cTypeAstTypeParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('[' dimensions+=AstExpression ']')*
		public Group getGroup_3() { return cGroup_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }
		
		//dimensions+=AstExpression
		public Assignment getDimensionsAssignment_3_1() { return cDimensionsAssignment_3_1; }
		
		//AstExpression
		public RuleCall getDimensionsAstExpressionParserRuleCall_3_1_0() { return cDimensionsAstExpressionParserRuleCall_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }
	}
	public class AstValuedVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstValuedVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAstVariableDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cConstantAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final Keyword cConstantEqualsSignKeyword_1_0_0_0 = (Keyword)cConstantAssignment_1_0_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueAstExpressionParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//AstValuedVariableDeclaration AstVariable:
		//	AstVariableDeclaration ((constant?='=' | ':=') value=AstExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//AstVariableDeclaration ((constant?='=' | ':=') value=AstExpression)?
		public Group getGroup() { return cGroup; }
		
		//AstVariableDeclaration
		public RuleCall getAstVariableDeclarationParserRuleCall_0() { return cAstVariableDeclarationParserRuleCall_0; }
		
		//((constant?='=' | ':=') value=AstExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//(constant?='=' | ':=')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//constant?='='
		public Assignment getConstantAssignment_1_0_0() { return cConstantAssignment_1_0_0; }
		
		//'='
		public Keyword getConstantEqualsSignKeyword_1_0_0_0() { return cConstantEqualsSignKeyword_1_0_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1_0_1() { return cColonEqualsSignKeyword_1_0_1; }
		
		//value=AstExpression
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//AstExpression
		public RuleCall getValueAstExpressionParserRuleCall_1_1_0() { return cValueAstExpressionParserRuleCall_1_1_0; }
	}
	public class AstMemberAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstMemberAccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMemberIndexAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMemberIndexAstExpressionParserRuleCall_2_1_0 = (RuleCall)cMemberIndexAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//AstMemberAccess:
		//	'.' name=ID ('[' memberIndex+=AstExpression ']')*;
		@Override public ParserRule getRule() { return rule; }
		
		//'.' name=ID ('[' memberIndex+=AstExpression ']')*
		public Group getGroup() { return cGroup; }
		
		//'.'
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('[' memberIndex+=AstExpression ']')*
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//memberIndex+=AstExpression
		public Assignment getMemberIndexAssignment_2_1() { return cMemberIndexAssignment_2_1; }
		
		//AstExpression
		public RuleCall getMemberIndexAstExpressionParserRuleCall_2_1_0() { return cMemberIndexAstExpressionParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
	}
	public class AstAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArgumentsAstAnnotationArgumentParserRuleCall_2_1_0 = (RuleCall)cArgumentsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cArgumentsAstAnnotationArgumentParserRuleCall_2_2_1_0 = (RuleCall)cArgumentsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//// -- /////////////////////////////////////////////////////////////////////////////
		//// annotations
		//// -- /////////////////////////////////////////////////////////////////////////////
		//AstAnnotation:
		//	'@' name=ID ('(' arguments+=AstAnnotationArgument (',' arguments+=AstAnnotationArgument)* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'@' name=ID ('(' arguments+=AstAnnotationArgument (',' arguments+=AstAnnotationArgument)* ')')?
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('(' arguments+=AstAnnotationArgument (',' arguments+=AstAnnotationArgument)* ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//arguments+=AstAnnotationArgument
		public Assignment getArgumentsAssignment_2_1() { return cArgumentsAssignment_2_1; }
		
		//AstAnnotationArgument
		public RuleCall getArgumentsAstAnnotationArgumentParserRuleCall_2_1_0() { return cArgumentsAstAnnotationArgumentParserRuleCall_2_1_0; }
		
		//(',' arguments+=AstAnnotationArgument)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//arguments+=AstAnnotationArgument
		public Assignment getArgumentsAssignment_2_2_1() { return cArgumentsAssignment_2_2_1; }
		
		//AstAnnotationArgument
		public RuleCall getArgumentsAstAnnotationArgumentParserRuleCall_2_2_1_0() { return cArgumentsAstAnnotationArgumentParserRuleCall_2_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}
	public class AstAnnotationArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.AstAnnotationArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//AstAnnotationArgument:
		//	name=ID '=' value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '=' value=STRING
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	
	public class ImportKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.ImportKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cVAREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cVARVarKeyword_0_0 = (Keyword)cVAREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTYPEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTYPETypeKeyword_1_0 = (Keyword)cTYPEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cENTITYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cENTITYEntityKeyword_2_0 = (Keyword)cENTITYEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ImportKind:
		//	VAR='var' | TYPE='type' | ENTITY='entity';
		public EnumRule getRule() { return rule; }
		
		//VAR='var' | TYPE='type' | ENTITY='entity'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VAR='var'
		public EnumLiteralDeclaration getVAREnumLiteralDeclaration_0() { return cVAREnumLiteralDeclaration_0; }
		
		//'var'
		public Keyword getVARVarKeyword_0_0() { return cVARVarKeyword_0_0; }
		
		//TYPE='type'
		public EnumLiteralDeclaration getTYPEEnumLiteralDeclaration_1() { return cTYPEEnumLiteralDeclaration_1; }
		
		//'type'
		public Keyword getTYPETypeKeyword_1_0() { return cTYPETypeKeyword_1_0; }
		
		//ENTITY='entity'
		public EnumLiteralDeclaration getENTITYEnumLiteralDeclaration_2() { return cENTITYEnumLiteralDeclaration_2; }
		
		//'entity'
		public Keyword getENTITYEntityKeyword_2_0() { return cENTITYEntityKeyword_2_0; }
	}
	
	private final CompilationUnitElements pCompilationUnit;
	private final AstPackageElements pAstPackage;
	private final AstUnitElements pAstUnit;
	private final AstNamespaceElements pAstNamespace;
	private final AstEntityElements pAstEntity;
	private final AstAbstractActorElements pAstAbstractActor;
	private final ImportElements pImport;
	private final RvcImportElements pRvcImport;
	private final GroupImportTailElements pGroupImportTail;
	private final SingleImportTailElements pSingleImportTail;
	private final ImportKindElements eImportKind;
	private final QualifiedNameElements pQualifiedName;
	private final QualifiedNameWithWildCardElements pQualifiedNameWithWildCard;
	private final AstNetworkElements pAstNetwork;
	private final AstEntityDeclarationElements pAstEntityDeclaration;
	private final AstEntityExprElements pAstEntityExpr;
	private final AstEntityInstanceExprElements pAstEntityInstanceExpr;
	private final AstAssignParameterElements pAstAssignParameter;
	private final AstEntityIfExprElements pAstEntityIfExpr;
	private final AstEntityListExprElements pAstEntityListExpr;
	private final AstStructureElements pAstStructure;
	private final AstStructureStatementElements pAstStructureStatement;
	private final AstStructureStatementConnectionElements pAstStructureStatementConnection;
	private final AstEntityVariableReferenceElements pAstEntityVariableReference;
	private final AstConnectionAttributeElements pAstConnectionAttribute;
	private final AstStructureStatementForeachElements pAstStructureStatementForeach;
	private final AstStructureStatementIfElements pAstStructureStatementIf;
	private final AstStructureStatementElsifElements pAstStructureStatementElsif;
	private final AstConstantVariableElements pAstConstantVariable;
	private final AstExternalVariableElements pAstExternalVariable;
	private final AstTypeDefinitionElements pAstTypeDefinition;
	private final AstTypeDefinitionParameterElements pAstTypeDefinitionParameter;
	private final AstTypeDefinitionTypeParameterElements pAstTypeDefinitionTypeParameter;
	private final AstTaggedTupleElements pAstTaggedTuple;
	private final AstTupleElements pAstTuple;
	private final AstActorElements pAstActor;
	private final AstProcessDescriptionElements pAstProcessDescription;
	private final AstPortElements pAstPort;
	private final AstFunctionElements pAstFunction;
	private final AstExternalFunctionElements pAstExternalFunction;
	private final AstProcedureElements pAstProcedure;
	private final AstExternalProcedureElements pAstExternalProcedure;
	private final AstParameterElements pAstParameter;
	private final AstStateVariableElements pAstStateVariable;
	private final AstTagElements pAstTag;
	private final AstInvariantElements pAstInvariant;
	private final AstExternalActorElements pAstExternalActor;
	private final AstInequalityElements pAstInequality;
	private final AstPriorityElements pAstPriority;
	private final AstScheduleElements pAstSchedule;
	private final AstTransitionElements pAstTransition;
	private final AstStateElements pAstState;
	private final AstScheduleRegExpElements pAstScheduleRegExp;
	private final RegExpElements pRegExp;
	private final RegExpConcatenationElements pRegExpConcatenation;
	private final RegExpPostfixElements pRegExpPostfix;
	private final RegExpGroupingElements pRegExpGrouping;
	private final RegExpTerminalElements pRegExpTerminal;
	private final AstActionElements pAstAction;
	private final AstInitializeElements pAstInitialize;
	private final AstInputPatternElements pAstInputPattern;
	private final AstTokenElements pAstToken;
	private final AstOutputExpressionElements pAstOutputExpression;
	private final AstStatementAssignElements pAstStatementAssign;
	private final AstStatementCallElements pAstStatementCall;
	private final AstStatementForeachElements pAstStatementForeach;
	private final AstForeachGeneratorElements pAstForeachGenerator;
	private final AstStatementBlockElements pAstStatementBlock;
	private final AstStatementIfElements pAstStatementIf;
	private final AstStatementElsifElements pAstStatementElsif;
	private final AstStatementWhileElements pAstStatementWhile;
	private final AstStatementReadElements pAstStatementRead;
	private final AstStatementWriteElements pAstStatementWrite;
	private final AstLValueElements pAstLValue;
	private final AstStatementCaseElements pAstStatementCase;
	private final AstStatementAlternativeElements pAstStatementAlternative;
	private final AstStatementElements pAstStatement;
	private final AstExpressionElements pAstExpression;
	private final AstExpressionAndElements pAstExpressionAnd;
	private final AstExpressionBitorElements pAstExpressionBitor;
	private final AstExpressionBitxorElements pAstExpressionBitxor;
	private final AstExpressionBitandElements pAstExpressionBitand;
	private final AstExpressionEqElements pAstExpressionEq;
	private final AstExpressionRelationalElements pAstExpressionRelational;
	private final AstExpressionShiftElements pAstExpressionShift;
	private final AstExpressionAdditiveElements pAstExpressionAdditive;
	private final AstExpressionMultiplicativeElements pAstExpressionMultiplicative;
	private final AstExpressionExpElements pAstExpressionExp;
	private final AstExpressionUnaryElements pAstExpressionUnary;
	private final AstExpressionAssertionElements pAstExpressionAssertion;
	private final AstExpressionPostfixElements pAstExpressionPostfix;
	private final AstExpressionSymbolReferenceElements pAstExpressionSymbolReference;
	private final AstExpressionIfElements pAstExpressionIf;
	private final AstExpressionElsifElements pAstExpressionElsif;
	private final AstExpressionListElements pAstExpressionList;
	private final AstGeneratorElements pAstGenerator;
	private final AstExpressionSetElements pAstExpressionSet;
	private final AstExpressionMapElements pAstExpressionMap;
	private final MappingElements pMapping;
	private final AstExpressionLetElements pAstExpressionLet;
	private final AstExpressionLambdaElements pAstExpressionLambda;
	private final AstExpressionProcElements pAstExpressionProc;
	private final AstExpressionCaseElements pAstExpressionCase;
	private final AstExpressionAlternativeElements pAstExpressionAlternative;
	private final AstExpressionLiteralElements pAstExpressionLiteral;
	private final AstExpressionBooleanElements pAstExpressionBoolean;
	private final TerminalRule tBOOL;
	private final AstExpressionFloatElements pAstExpressionFloat;
	private final TerminalRule tREAL;
	private final AstExpressionIntegerElements pAstExpressionInteger;
	private final TerminalRule tDECIMAL;
	private final TerminalRule tOCTAL;
	private final TerminalRule tHEX;
	private final AstExpressionStringElements pAstExpressionString;
	private final TerminalRule tSTRING;
	private final TerminalRule tID;
	private final AstPatternElements pAstPattern;
	private final AstPatternDeclarationElements pAstPatternDeclaration;
	private final AstPatternWildcardElements pAstPatternWildcard;
	private final AstPatternAlternativeElements pAstPatternAlternative;
	private final AstPatternAliasElements pAstPatternAlias;
	private final AstPatternListElements pAstPatternList;
	private final AstPatternLiteralElements pAstPatternLiteral;
	private final AstPatternExpressionElements pAstPatternExpression;
	private final AstPatternDeconstructionElements pAstPatternDeconstruction;
	private final AstTypeUserElements pAstTypeUser;
	private final AstTypeBuiltInElements pAstTypeBuiltIn;
	private final AstTypeElements pAstType;
	private final AstTypeParameterListElements pAstTypeParameterList;
	private final AstTypeParamElements pAstTypeParam;
	private final AstVariableDeclarationElements pAstVariableDeclaration;
	private final AstValuedVariableDeclarationElements pAstValuedVariableDeclaration;
	private final AstMemberAccessElements pAstMemberAccess;
	private final AstAnnotationElements pAstAnnotation;
	private final AstAnnotationArgumentElements pAstAnnotationArgument;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public CalGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pCompilationUnit = new CompilationUnitElements();
		this.pAstPackage = new AstPackageElements();
		this.pAstUnit = new AstUnitElements();
		this.pAstNamespace = new AstNamespaceElements();
		this.pAstEntity = new AstEntityElements();
		this.pAstAbstractActor = new AstAbstractActorElements();
		this.pImport = new ImportElements();
		this.pRvcImport = new RvcImportElements();
		this.pGroupImportTail = new GroupImportTailElements();
		this.pSingleImportTail = new SingleImportTailElements();
		this.eImportKind = new ImportKindElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pQualifiedNameWithWildCard = new QualifiedNameWithWildCardElements();
		this.pAstNetwork = new AstNetworkElements();
		this.pAstEntityDeclaration = new AstEntityDeclarationElements();
		this.pAstEntityExpr = new AstEntityExprElements();
		this.pAstEntityInstanceExpr = new AstEntityInstanceExprElements();
		this.pAstAssignParameter = new AstAssignParameterElements();
		this.pAstEntityIfExpr = new AstEntityIfExprElements();
		this.pAstEntityListExpr = new AstEntityListExprElements();
		this.pAstStructure = new AstStructureElements();
		this.pAstStructureStatement = new AstStructureStatementElements();
		this.pAstStructureStatementConnection = new AstStructureStatementConnectionElements();
		this.pAstEntityVariableReference = new AstEntityVariableReferenceElements();
		this.pAstConnectionAttribute = new AstConnectionAttributeElements();
		this.pAstStructureStatementForeach = new AstStructureStatementForeachElements();
		this.pAstStructureStatementIf = new AstStructureStatementIfElements();
		this.pAstStructureStatementElsif = new AstStructureStatementElsifElements();
		this.pAstConstantVariable = new AstConstantVariableElements();
		this.pAstExternalVariable = new AstExternalVariableElements();
		this.pAstTypeDefinition = new AstTypeDefinitionElements();
		this.pAstTypeDefinitionParameter = new AstTypeDefinitionParameterElements();
		this.pAstTypeDefinitionTypeParameter = new AstTypeDefinitionTypeParameterElements();
		this.pAstTaggedTuple = new AstTaggedTupleElements();
		this.pAstTuple = new AstTupleElements();
		this.pAstActor = new AstActorElements();
		this.pAstProcessDescription = new AstProcessDescriptionElements();
		this.pAstPort = new AstPortElements();
		this.pAstFunction = new AstFunctionElements();
		this.pAstExternalFunction = new AstExternalFunctionElements();
		this.pAstProcedure = new AstProcedureElements();
		this.pAstExternalProcedure = new AstExternalProcedureElements();
		this.pAstParameter = new AstParameterElements();
		this.pAstStateVariable = new AstStateVariableElements();
		this.pAstTag = new AstTagElements();
		this.pAstInvariant = new AstInvariantElements();
		this.pAstExternalActor = new AstExternalActorElements();
		this.pAstInequality = new AstInequalityElements();
		this.pAstPriority = new AstPriorityElements();
		this.pAstSchedule = new AstScheduleElements();
		this.pAstTransition = new AstTransitionElements();
		this.pAstState = new AstStateElements();
		this.pAstScheduleRegExp = new AstScheduleRegExpElements();
		this.pRegExp = new RegExpElements();
		this.pRegExpConcatenation = new RegExpConcatenationElements();
		this.pRegExpPostfix = new RegExpPostfixElements();
		this.pRegExpGrouping = new RegExpGroupingElements();
		this.pRegExpTerminal = new RegExpTerminalElements();
		this.pAstAction = new AstActionElements();
		this.pAstInitialize = new AstInitializeElements();
		this.pAstInputPattern = new AstInputPatternElements();
		this.pAstToken = new AstTokenElements();
		this.pAstOutputExpression = new AstOutputExpressionElements();
		this.pAstStatementAssign = new AstStatementAssignElements();
		this.pAstStatementCall = new AstStatementCallElements();
		this.pAstStatementForeach = new AstStatementForeachElements();
		this.pAstForeachGenerator = new AstForeachGeneratorElements();
		this.pAstStatementBlock = new AstStatementBlockElements();
		this.pAstStatementIf = new AstStatementIfElements();
		this.pAstStatementElsif = new AstStatementElsifElements();
		this.pAstStatementWhile = new AstStatementWhileElements();
		this.pAstStatementRead = new AstStatementReadElements();
		this.pAstStatementWrite = new AstStatementWriteElements();
		this.pAstLValue = new AstLValueElements();
		this.pAstStatementCase = new AstStatementCaseElements();
		this.pAstStatementAlternative = new AstStatementAlternativeElements();
		this.pAstStatement = new AstStatementElements();
		this.pAstExpression = new AstExpressionElements();
		this.pAstExpressionAnd = new AstExpressionAndElements();
		this.pAstExpressionBitor = new AstExpressionBitorElements();
		this.pAstExpressionBitxor = new AstExpressionBitxorElements();
		this.pAstExpressionBitand = new AstExpressionBitandElements();
		this.pAstExpressionEq = new AstExpressionEqElements();
		this.pAstExpressionRelational = new AstExpressionRelationalElements();
		this.pAstExpressionShift = new AstExpressionShiftElements();
		this.pAstExpressionAdditive = new AstExpressionAdditiveElements();
		this.pAstExpressionMultiplicative = new AstExpressionMultiplicativeElements();
		this.pAstExpressionExp = new AstExpressionExpElements();
		this.pAstExpressionUnary = new AstExpressionUnaryElements();
		this.pAstExpressionAssertion = new AstExpressionAssertionElements();
		this.pAstExpressionPostfix = new AstExpressionPostfixElements();
		this.pAstExpressionSymbolReference = new AstExpressionSymbolReferenceElements();
		this.pAstExpressionIf = new AstExpressionIfElements();
		this.pAstExpressionElsif = new AstExpressionElsifElements();
		this.pAstExpressionList = new AstExpressionListElements();
		this.pAstGenerator = new AstGeneratorElements();
		this.pAstExpressionSet = new AstExpressionSetElements();
		this.pAstExpressionMap = new AstExpressionMapElements();
		this.pMapping = new MappingElements();
		this.pAstExpressionLet = new AstExpressionLetElements();
		this.pAstExpressionLambda = new AstExpressionLambdaElements();
		this.pAstExpressionProc = new AstExpressionProcElements();
		this.pAstExpressionCase = new AstExpressionCaseElements();
		this.pAstExpressionAlternative = new AstExpressionAlternativeElements();
		this.pAstExpressionLiteral = new AstExpressionLiteralElements();
		this.pAstExpressionBoolean = new AstExpressionBooleanElements();
		this.tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.BOOL");
		this.pAstExpressionFloat = new AstExpressionFloatElements();
		this.tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.REAL");
		this.pAstExpressionInteger = new AstExpressionIntegerElements();
		this.tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.DECIMAL");
		this.tOCTAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.OCTAL");
		this.tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.HEX");
		this.pAstExpressionString = new AstExpressionStringElements();
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.STRING");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.ID");
		this.pAstPattern = new AstPatternElements();
		this.pAstPatternDeclaration = new AstPatternDeclarationElements();
		this.pAstPatternWildcard = new AstPatternWildcardElements();
		this.pAstPatternAlternative = new AstPatternAlternativeElements();
		this.pAstPatternAlias = new AstPatternAliasElements();
		this.pAstPatternList = new AstPatternListElements();
		this.pAstPatternLiteral = new AstPatternLiteralElements();
		this.pAstPatternExpression = new AstPatternExpressionElements();
		this.pAstPatternDeconstruction = new AstPatternDeconstructionElements();
		this.pAstTypeUser = new AstTypeUserElements();
		this.pAstTypeBuiltIn = new AstTypeBuiltInElements();
		this.pAstType = new AstTypeElements();
		this.pAstTypeParameterList = new AstTypeParameterListElements();
		this.pAstTypeParam = new AstTypeParamElements();
		this.pAstVariableDeclaration = new AstVariableDeclarationElements();
		this.pAstValuedVariableDeclaration = new AstValuedVariableDeclarationElements();
		this.pAstMemberAccess = new AstMemberAccessElements();
		this.pAstAnnotation = new AstAnnotationElements();
		this.pAstAnnotationArgument = new AstAnnotationArgumentElements();
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "streamblocks.eclipse.cal.Cal.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("streamblocks.eclipse.cal.Cal".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//// -- /////////////////////////////////////////////////////////////////////////////
	//// RVC compatibility layer
	//// -- /////////////////////////////////////////////////////////////////////////////
	//CompilationUnit:
	//	AstPackage | AstNamespace;
	public CompilationUnitElements getCompilationUnitAccess() {
		return pCompilationUnit;
	}
	
	public ParserRule getCompilationUnitRule() {
		return getCompilationUnitAccess().getRule();
	}
	
	//AstPackage:
	//	{AstNamespace} rvc?='package' name=QualifiedName ';' (entities+=AstEntity
	//	| imports+=RvcImport
	//	| units+=AstUnit)*;
	public AstPackageElements getAstPackageAccess() {
		return pAstPackage;
	}
	
	public ParserRule getAstPackageRule() {
		return getAstPackageAccess().getRule();
	}
	
	//AstUnit:
	//	{AstNamespace} rvc?='unit' name=QualifiedName ':' (functions+=AstFunction
	//	| procedures+=AstProcedure
	//	| variables+=AstConstantVariable
	//	| externals+=(AstExternalVariable | AstExternalFunction | AstExternalProcedure))*
	//	'end';
	public AstUnitElements getAstUnitAccess() {
		return pAstUnit;
	}
	
	public ParserRule getAstUnitRule() {
		return getAstUnitAccess().getRule();
	}
	
	//// -- /////////////////////////////////////////////////////////////////////////////
	//// -- Namespace
	//// -- /////////////////////////////////////////////////////////////////////////////
	//AstNamespace:
	//	annotations+=AstAnnotation*
	//	'namespace' name=QualifiedName ':' (functions+=AstFunction
	//	| procedures+=AstProcedure
	//	| variables+=AstConstantVariable
	//	| externals+=(AstExternalVariable | AstExternalFunction | AstExternalProcedure) | typedefs+=AstTypeDefinition
	//	| imports+=Import
	//	| entities+=AstEntity
	//	| namespaces+=AstNamespace)*
	//	'end';
	public AstNamespaceElements getAstNamespaceAccess() {
		return pAstNamespace;
	}
	
	public ParserRule getAstNamespaceRule() {
		return getAstNamespaceAccess().getRule();
	}
	
	//AstEntity:
	//	annotations+=AstAnnotation*
	//	actor=AstAbstractActor;
	public AstEntityElements getAstEntityAccess() {
		return pAstEntity;
	}
	
	public ParserRule getAstEntityRule() {
		return getAstEntityAccess().getRule();
	}
	
	//AstAbstractActor:
	//	AstActor | AstNetwork | AstExternalActor;
	public AstAbstractActorElements getAstAbstractActorAccess() {
		return pAstAbstractActor;
	}
	
	public ParserRule getAstAbstractActorRule() {
		return getAstAbstractActorAccess().getRule();
	}
	
	//Import:
	//	'import' (GroupImportTail | SingleImportTail) ';';
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//RvcImport:
	//	'import' importedNamespace=QualifiedNameWithWildCard ';';
	public RvcImportElements getRvcImportAccess() {
		return pRvcImport;
	}
	
	public ParserRule getRvcImportRule() {
		return getRvcImportAccess().getRule();
	}
	
	//GroupImportTail:
	//	'all' kind=ImportKind? importedNamespace=QualifiedName;
	public GroupImportTailElements getGroupImportTailAccess() {
		return pGroupImportTail;
	}
	
	public ParserRule getGroupImportTailRule() {
		return getGroupImportTailAccess().getRule();
	}
	
	//SingleImportTail:
	//	kind=ImportKind? importedNamespace=QualifiedName ('=' localNameToken=ID)?;
	public SingleImportTailElements getSingleImportTailAccess() {
		return pSingleImportTail;
	}
	
	public ParserRule getSingleImportTailRule() {
		return getSingleImportTailAccess().getRule();
	}
	
	//enum ImportKind:
	//	VAR='var' | TYPE='type' | ENTITY='entity';
	public ImportKindElements getImportKindAccess() {
		return eImportKind;
	}
	
	public EnumRule getImportKindRule() {
		return getImportKindAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//QualifiedNameWithWildCard:
	//	QualifiedName '.*'?;
	public QualifiedNameWithWildCardElements getQualifiedNameWithWildCardAccess() {
		return pQualifiedNameWithWildCard;
	}
	
	public ParserRule getQualifiedNameWithWildCardRule() {
		return getQualifiedNameWithWildCardAccess().getRule();
	}
	
	//// -- /////////////////////////////////////////////////////////////////////////////
	//// -- Network
	//// -- /////////////////////////////////////////////////////////////////////////////
	//AstNetwork:
	//	{AstNetwork}
	//	'network' name=ID
	//	'(' (parameters+=AstParameter (',' parameters+=AstParameter)*)? ')' (inputs+=AstPort (',' inputs+=AstPort)*)? '==>'
	//	(outputs+=AstPort (',' outputs+=AstPort)*)? ':' ('var'
	//	variables+=AstValuedVariableDeclaration ';' (variables+=AstValuedVariableDeclaration ';')*)?
	//	'entities'
	//	entities+=AstEntityDeclaration+
	//	structure=AstStructure?
	//	'end';
	public AstNetworkElements getAstNetworkAccess() {
		return pAstNetwork;
	}
	
	public ParserRule getAstNetworkRule() {
		return getAstNetworkAccess().getRule();
	}
	
	//// -- AstExprEntity
	//AstEntityDeclaration AstEntityVariable:
	//	name=ID '=' entity=AstEntityExpr ';';
	public AstEntityDeclarationElements getAstEntityDeclarationAccess() {
		return pAstEntityDeclaration;
	}
	
	public ParserRule getAstEntityDeclarationRule() {
		return getAstEntityDeclarationAccess().getRule();
	}
	
	//AstEntityExpr:
	//	AstEntityInstanceExpr
	//	| AstEntityIfExpr
	//	| AstEntityListExpr;
	public AstEntityExprElements getAstEntityExprAccess() {
		return pAstEntityExpr;
	}
	
	public ParserRule getAstEntityExprRule() {
		return getAstEntityExprAccess().getRule();
	}
	
	//AstEntityInstanceExpr:
	//	type=[AstEntity|QualifiedName] '(' (parameters+=AstAssignParameter (',' parameters+=AstAssignParameter)*)? ')';
	public AstEntityInstanceExprElements getAstEntityInstanceExprAccess() {
		return pAstEntityInstanceExpr;
	}
	
	public ParserRule getAstEntityInstanceExprRule() {
		return getAstEntityInstanceExprAccess().getRule();
	}
	
	//AstAssignParameter:
	//	name=ID "=" value=AstExpression;
	public AstAssignParameterElements getAstAssignParameterAccess() {
		return pAstAssignParameter;
	}
	
	public ParserRule getAstAssignParameterRule() {
		return getAstAssignParameterAccess().getRule();
	}
	
	//AstEntityIfExpr:
	//	'if'
	//	condition=AstExpression
	//	'then'
	//	trueEntity=AstEntityExpr
	//	'else'
	//	falseEntity=AstEntityExpr
	//	'end';
	public AstEntityIfExprElements getAstEntityIfExprAccess() {
		return pAstEntityIfExpr;
	}
	
	public ParserRule getAstEntityIfExprRule() {
		return getAstEntityIfExprAccess().getRule();
	}
	
	//AstEntityListExpr:
	//	'[' exprs+=AstEntityExpr (',' exprs+=AstEntityExpr)* (':' generator=AstGenerator)? ']';
	public AstEntityListExprElements getAstEntityListExprAccess() {
		return pAstEntityListExpr;
	}
	
	public ParserRule getAstEntityListExprRule() {
		return getAstEntityListExprAccess().getRule();
	}
	
	//// -- AstStructure	
	//AstStructure:
	//	'structure'
	//	connections+=AstStructureStatement+;
	public AstStructureElements getAstStructureAccess() {
		return pAstStructure;
	}
	
	public ParserRule getAstStructureRule() {
		return getAstStructureAccess().getRule();
	}
	
	//AstStructureStatement:
	//	AstStructureStatementConnection | AstStructureStatementForeach | AstStructureStatementIf;
	public AstStructureStatementElements getAstStructureStatementAccess() {
		return pAstStructureStatement;
	}
	
	public ParserRule getAstStructureStatementRule() {
		return getAstStructureStatementAccess().getRule();
	}
	
	//AstStructureStatementConnection:
	//	(from=AstEntityVariableReference ('[' fromIndexes+=AstExpression ']')* '.')? outPort=ID
	//	'-->' (to=AstEntityVariableReference ('[' fromIndexes+=AstExpression ']')* '.')? inPort=ID ('{'
	//	attribute+=AstConnectionAttribute* '}')? ';';
	public AstStructureStatementConnectionElements getAstStructureStatementConnectionAccess() {
		return pAstStructureStatementConnection;
	}
	
	public ParserRule getAstStructureStatementConnectionRule() {
		return getAstStructureStatementConnectionAccess().getRule();
	}
	
	//AstEntityVariableReference:
	//	variable=[AstEntityVariable];
	public AstEntityVariableReferenceElements getAstEntityVariableReferenceAccess() {
		return pAstEntityVariableReference;
	}
	
	public ParserRule getAstEntityVariableReferenceRule() {
		return getAstEntityVariableReferenceAccess().getRule();
	}
	
	//AstConnectionAttribute:
	//	name=ID '=' value=AstExpression ";";
	public AstConnectionAttributeElements getAstConnectionAttributeAccess() {
		return pAstConnectionAttribute;
	}
	
	public ParserRule getAstConnectionAttributeRule() {
		return getAstConnectionAttributeAccess().getRule();
	}
	
	//AstStructureStatementForeach:
	//	'foreach' generators+=AstForeachGenerator ("," generators+=AstForeachGenerator)* 'do' ('var'
	//	variables+=AstValuedVariableDeclaration (',' variables+=AstValuedVariableDeclaration)*)?
	//	statements+=AstStructureStatement*
	//	'end';
	public AstStructureStatementForeachElements getAstStructureStatementForeachAccess() {
		return pAstStructureStatementForeach;
	}
	
	public ParserRule getAstStructureStatementForeachRule() {
		return getAstStructureStatementForeachAccess().getRule();
	}
	
	//AstStructureStatementIf:
	//	'if' condition=AstExpression 'then'
	//	then+=AstStructureStatement*
	//	elsifs+=AstStructureStatementElsif* ('else' else+=AstStructureStatement*)?
	//	'end';
	public AstStructureStatementIfElements getAstStructureStatementIfAccess() {
		return pAstStructureStatementIf;
	}
	
	public ParserRule getAstStructureStatementIfRule() {
		return getAstStructureStatementIfAccess().getRule();
	}
	
	//AstStructureStatementElsif:
	//	'elsif' condition=AstExpression 'then'
	//	then+=AstStructureStatement*;
	public AstStructureStatementElsifElements getAstStructureStatementElsifAccess() {
		return pAstStructureStatementElsif;
	}
	
	public ParserRule getAstStructureStatementElsifRule() {
		return getAstStructureStatementElsifAccess().getRule();
	}
	
	//AstConstantVariable AstVariable:
	//	AstVariableDeclaration constant?='=' value=AstExpression ';';
	public AstConstantVariableElements getAstConstantVariableAccess() {
		return pAstConstantVariable;
	}
	
	public ParserRule getAstConstantVariableRule() {
		return getAstConstantVariableAccess().getRule();
	}
	
	//AstExternalVariable AstVariable:
	//	'external' AstVariableDeclaration ';';
	public AstExternalVariableElements getAstExternalVariableAccess() {
		return pAstExternalVariable;
	}
	
	public ParserRule getAstExternalVariableRule() {
		return getAstExternalVariableAccess().getRule();
	}
	
	//// -- /////////////////////////////////////////////////////////////////////////////
	//// type definitions
	//// -- /////////////////////////////////////////////////////////////////////////////
	//AstTypeDefinition AstTypeUser:
	//	definition?='type' name=ID ('(' (parameters+=AstTypeDefinitionParameter (','
	//	parameters+=AstTypeDefinitionParameter)*)? ')')?
	//	':' (tuples+=AstTuple
	//	| tuples+=AstTaggedTuple ('|' tuples+=AstTaggedTuple)*)
	//	'end';
	public AstTypeDefinitionElements getAstTypeDefinitionAccess() {
		return pAstTypeDefinition;
	}
	
	public ParserRule getAstTypeDefinitionRule() {
		return getAstTypeDefinitionAccess().getRule();
	}
	
	//AstTypeDefinitionParameter:
	//	value=AstVariableDeclaration | type=AstTypeDefinitionTypeParameter;
	public AstTypeDefinitionParameterElements getAstTypeDefinitionParameterAccess() {
		return pAstTypeDefinitionParameter;
	}
	
	public ParserRule getAstTypeDefinitionParameterRule() {
		return getAstTypeDefinitionParameterAccess().getRule();
	}
	
	//AstTypeDefinitionTypeParameter AstTypeUser:
	//	variable?='type' name=ID;
	public AstTypeDefinitionTypeParameterElements getAstTypeDefinitionTypeParameterAccess() {
		return pAstTypeDefinitionTypeParameter;
	}
	
	public ParserRule getAstTypeDefinitionTypeParameterRule() {
		return getAstTypeDefinitionTypeParameterAccess().getRule();
	}
	
	//AstTaggedTuple:
	//	name=ID ('(' (fields+=AstValuedVariableDeclaration (',' fields+=AstValuedVariableDeclaration)*)? ')')?;
	public AstTaggedTupleElements getAstTaggedTupleAccess() {
		return pAstTaggedTuple;
	}
	
	public ParserRule getAstTaggedTupleRule() {
		return getAstTaggedTupleAccess().getRule();
	}
	
	//AstTuple AstTaggedTuple:
	//	{AstTuple} ('(' (fields+=AstValuedVariableDeclaration (',' fields+=AstValuedVariableDeclaration)*)? ')');
	public AstTupleElements getAstTupleAccess() {
		return pAstTuple;
	}
	
	public ParserRule getAstTupleRule() {
		return getAstTupleAccess().getRule();
	}
	
	//// -- /////////////////////////////////////////////////////////////////////////////
	//// actor
	//// -- /////////////////////////////////////////////////////////////////////////////
	//AstActor:
	//	{AstActor}
	//	'actor' name=ID
	//	'(' (parameters+=AstParameter (',' parameters+=AstParameter)*)? ')' (inputs+=AstPort (',' inputs+=AstPort)*)? '==>'
	//	(outputs+=AstPort (',' outputs+=AstPort)*)? ':' (functions+=AstFunction
	//	| procedures+=AstProcedure
	//	| invariants+=AstInvariant
	//	| actions+=AstAction
	//	| processes+=AstProcessDescription
	//	| initializes+=AstInitialize
	//	| stateVariables+=AstStateVariable)* (schedules=AstSchedule | scheduleRegExp=AstScheduleRegExp)?
	//	priorities+=AstPriority*
	//	'end';
	public AstActorElements getAstActorAccess() {
		return pAstActor;
	}
	
	public ParserRule getAstActorRule() {
		return getAstActorAccess().getRule();
	}
	
	//AstProcessDescription:
	//	{AstProcessDescription} (repeated?='repeat' | 'do') statements+=AstStatement*
	//	'end';
	public AstProcessDescriptionElements getAstProcessDescriptionAccess() {
		return pAstProcessDescription;
	}
	
	public ParserRule getAstProcessDescriptionRule() {
		return getAstProcessDescriptionAccess().getRule();
	}
	
	//AstPort:
	//	annotations+=AstAnnotation* type=AstType name=ID;
	public AstPortElements getAstPortAccess() {
		return pAstPort;
	}
	
	public ParserRule getAstPortRule() {
		return getAstPortAccess().getRule();
	}
	
	//AstFunction AstVariable:
	//	{AstFunction} annotations+=AstAnnotation*
	//	'function' name=ID
	//	'(' (parameters+=AstVariableDeclaration (',' parameters+=AstVariableDeclaration)*)?
	//	')' '-->' type=AstType ('var'
	//	variables+=AstValuedVariableDeclaration (',' variables+=AstValuedVariableDeclaration)*)? (':'
	//	expression=AstExpression)?
	//	'end';
	public AstFunctionElements getAstFunctionAccess() {
		return pAstFunction;
	}
	
	public ParserRule getAstFunctionRule() {
		return getAstFunctionAccess().getRule();
	}
	
	//AstExternalFunction:
	//	{AstFunction} annotations+=AstAnnotation*
	//	'external' 'function' name=ID
	//	'(' (parameters+=AstVariableDeclaration (',' parameters+=AstVariableDeclaration)*)?
	//	')' '-->' type=AstType 'end';
	public AstExternalFunctionElements getAstExternalFunctionAccess() {
		return pAstExternalFunction;
	}
	
	public ParserRule getAstExternalFunctionRule() {
		return getAstExternalFunctionAccess().getRule();
	}
	
	//AstProcedure AstVariable:
	//	{AstProcedure} annotations+=AstAnnotation*
	//	'procedure' name=ID
	//	'(' (parameters+=AstVariableDeclaration (',' parameters+=AstVariableDeclaration)*)?
	//	')' ('var'
	//	variables+=AstValuedVariableDeclaration (',' variables+=AstValuedVariableDeclaration)*)? ('begin'
	//	statements+=AstStatement*)?
	//	'end';
	public AstProcedureElements getAstProcedureAccess() {
		return pAstProcedure;
	}
	
	public ParserRule getAstProcedureRule() {
		return getAstProcedureAccess().getRule();
	}
	
	//AstExternalProcedure:
	//	{AstProcedure} annotations+=AstAnnotation*
	//	'external' 'procedure' name=ID
	//	'(' (parameters+=AstVariableDeclaration (',' parameters+=AstVariableDeclaration)*)?
	//	')' 'end';
	public AstExternalProcedureElements getAstExternalProcedureAccess() {
		return pAstExternalProcedure;
	}
	
	public ParserRule getAstExternalProcedureRule() {
		return getAstExternalProcedureAccess().getRule();
	}
	
	//AstParameter AstVariable:
	//	AstVariableDeclaration ('=' value=AstExpression)?;
	public AstParameterElements getAstParameterAccess() {
		return pAstParameter;
	}
	
	public ParserRule getAstParameterRule() {
		return getAstParameterAccess().getRule();
	}
	
	//AstStateVariable AstVariable:
	//	AstValuedVariableDeclaration ';';
	public AstStateVariableElements getAstStateVariableAccess() {
		return pAstStateVariable;
	}
	
	public ParserRule getAstStateVariableRule() {
		return getAstStateVariableAccess().getRule();
	}
	
	//AstTag:
	//	identifiers+=ID ('.' identifiers+=ID)*;
	public AstTagElements getAstTagAccess() {
		return pAstTag;
	}
	
	public ParserRule getAstTagRule() {
		return getAstTagAccess().getRule();
	}
	
	//AstInvariant:
	//	'invariant'
	//	invariants+=AstExpression (',' invariants+=AstExpression)* ('end' | 'endinvariant');
	public AstInvariantElements getAstInvariantAccess() {
		return pAstInvariant;
	}
	
	public ParserRule getAstInvariantRule() {
		return getAstInvariantAccess().getRule();
	}
	
	//// -- /////////////////////////////////////////////////////////////////////////////
	//// external entities
	//// -- /////////////////////////////////////////////////////////////////////////////
	//AstExternalActor:
	//	{AstExternalActor}
	//	'external' 'actor' name=ID
	//	'(' (parameters+=AstParameter (',' parameters+=AstParameter)*)? ')' (inputs+=AstPort (',' inputs+=AstPort)*)? '==>'
	//	(outputs+=AstPort (',' outputs+=AstPort)*)? ';';
	public AstExternalActorElements getAstExternalActorAccess() {
		return pAstExternalActor;
	}
	
	public ParserRule getAstExternalActorRule() {
		return getAstExternalActorAccess().getRule();
	}
	
	//// -- /////////////////////////////////////////////////////////////////////////////
	//// -- Priorities
	//// -- /////////////////////////////////////////////////////////////////////////////
	//AstInequality:
	//	tags+=AstTag ('>' tags+=AstTag)+ ';';
	public AstInequalityElements getAstInequalityAccess() {
		return pAstInequality;
	}
	
	public ParserRule getAstInequalityRule() {
		return getAstInequalityAccess().getRule();
	}
	
	//AstPriority:
	//	{AstPriority}
	//	'priority'
	//	inequalities+=AstInequality*
	//	'end';
	public AstPriorityElements getAstPriorityAccess() {
		return pAstPriority;
	}
	
	public ParserRule getAstPriorityRule() {
		return getAstPriorityAccess().getRule();
	}
	
	//// -- /////////////////////////////////////////////////////////////////////////////
	//// -- Schedule
	//// -- /////////////////////////////////////////////////////////////////////////////
	//AstSchedule:
	//	'schedule' 'fsm' initialState=[AstState] ':'
	//	transitions+=AstTransition* ('end' | 'endschedule');
	public AstScheduleElements getAstScheduleAccess() {
		return pAstSchedule;
	}
	
	public ParserRule getAstScheduleRule() {
		return getAstScheduleAccess().getRule();
	}
	
	//AstTransition:
	//	source=[AstState] '(' tags+=AstTag (',' tags+=AstTag)* ')' '-->' target=[AstState] ';';
	public AstTransitionElements getAstTransitionAccess() {
		return pAstTransition;
	}
	
	public ParserRule getAstTransitionRule() {
		return getAstTransitionAccess().getRule();
	}
	
	//AstState:
	//	name=ID;
	public AstStateElements getAstStateAccess() {
		return pAstState;
	}
	
	public ParserRule getAstStateRule() {
		return getAstStateAccess().getRule();
	}
	
	//// regular expression schedule
	//AstScheduleRegExp RegExp:
	//	'schedule' 'regexp' exp=RegExp 'end';
	public AstScheduleRegExpElements getAstScheduleRegExpAccess() {
		return pAstScheduleRegExp;
	}
	
	public ParserRule getAstScheduleRegExpRule() {
		return getAstScheduleRegExpAccess().getRule();
	}
	
	//RegExp:
	//	RegExpConcatenation ({RegExpBinary.left=current} operator='|' right=RegExpConcatenation)*;
	public RegExpElements getRegExpAccess() {
		return pRegExp;
	}
	
	public ParserRule getRegExpRule() {
		return getRegExpAccess().getRule();
	}
	
	//RegExpConcatenation RegExp:
	//	RegExpPostfix ({RegExpBinary.left=current} right=RegExpPostfix)*;
	public RegExpConcatenationElements getRegExpConcatenationAccess() {
		return pRegExpConcatenation;
	}
	
	public ParserRule getRegExpConcatenationRule() {
		return getRegExpConcatenationAccess().getRule();
	}
	
	//RegExpPostfix RegExp:
	//	RegExpGrouping ({RegExpUnary.child=current} unaryOperator=('*' | '?'))*;
	public RegExpPostfixElements getRegExpPostfixAccess() {
		return pRegExpPostfix;
	}
	
	public ParserRule getRegExpPostfixRule() {
		return getRegExpPostfixAccess().getRule();
	}
	
	//RegExpGrouping RegExp:
	//	RegExpTerminal
	//	| '(' RegExp ')';
	public RegExpGroupingElements getRegExpGroupingAccess() {
		return pRegExpGrouping;
	}
	
	public ParserRule getRegExpGroupingRule() {
		return getRegExpGroupingAccess().getRule();
	}
	
	//RegExpTerminal RegExp:
	//	{RegExpTag} tag=AstTag;
	public RegExpTerminalElements getRegExpTerminalAccess() {
		return pRegExpTerminal;
	}
	
	public ParserRule getRegExpTerminalRule() {
		return getRegExpTerminalAccess().getRule();
	}
	
	//// -- /////////////////////////////////////////////////////////////////////////////
	//// -- Actions
	//// -- /////////////////////////////////////////////////////////////////////////////
	//AstAction:
	//	{AstAction} annotations+=AstAnnotation* (tag=AstTag ':')?
	//	'action' (inputs+=AstInputPattern (',' inputs+=AstInputPattern)*)?
	//	'==>' (outputs+=AstOutputExpression (',' outputs+=AstOutputExpression)*)? ('guard' guards+=AstExpression (','
	//	guards+=AstExpression)*)? ('var'
	//	variables+=AstValuedVariableDeclaration (',' variables+=AstValuedVariableDeclaration)*)? ('do'
	//	statements+=AstStatement*)?
	//	'end';
	public AstActionElements getAstActionAccess() {
		return pAstAction;
	}
	
	public ParserRule getAstActionRule() {
		return getAstActionAccess().getRule();
	}
	
	//AstInitialize AstAction:
	//	{AstInitialize} annotations+=AstAnnotation* (tag=AstTag ':')?
	//	'initialize'
	//	'==>' (outputs+=AstOutputExpression (',' outputs+=AstOutputExpression)*)? ('guard' guards+=AstExpression (','
	//	guards+=AstExpression)*)? ('var'
	//	variables+=AstValuedVariableDeclaration (',' variables+=AstValuedVariableDeclaration)*)? ('do'
	//	statements+=AstStatement*)?
	//	'end';
	public AstInitializeElements getAstInitializeAccess() {
		return pAstInitialize;
	}
	
	public ParserRule getAstInitializeRule() {
		return getAstInitializeAccess().getRule();
	}
	
	//AstInputPattern:
	//	(port=[AstPort] ':')? '[' tokens+=AstPattern (',' tokens+=AstPattern)* ']' ('repeat' repeat=AstExpression)?;
	public AstInputPatternElements getAstInputPatternAccess() {
		return pAstInputPattern;
	}
	
	public ParserRule getAstInputPatternRule() {
		return getAstInputPatternAccess().getRule();
	}
	
	//AstToken AstVariable:
	//	name=ID;
	public AstTokenElements getAstTokenAccess() {
		return pAstToken;
	}
	
	public ParserRule getAstTokenRule() {
		return getAstTokenAccess().getRule();
	}
	
	//AstOutputExpression:
	//	(port=[AstPort] ':')? '[' values+=AstExpression (',' values+=AstExpression)* ']' ('repeat' repeat=AstExpression)?;
	public AstOutputExpressionElements getAstOutputExpressionAccess() {
		return pAstOutputExpression;
	}
	
	public ParserRule getAstOutputExpressionRule() {
		return getAstOutputExpressionAccess().getRule();
	}
	
	//// -- /////////////////////////////////////////////////////////////////////////////
	//// statements
	//// -- /////////////////////////////////////////////////////////////////////////////
	//AstStatementAssign:
	//	lvalue=AstLValue ':=' value=AstExpression ';';
	public AstStatementAssignElements getAstStatementAssignAccess() {
		return pAstStatementAssign;
	}
	
	public ParserRule getAstStatementAssignRule() {
		return getAstStatementAssignAccess().getRule();
	}
	
	//AstStatementCall:
	//	annotations+=AstAnnotation*
	//	procedure=[AstProcedure]
	//	'(' (parameters+=AstExpression (',' parameters+=AstExpression)*)? ')' ';';
	public AstStatementCallElements getAstStatementCallAccess() {
		return pAstStatementCall;
	}
	
	public ParserRule getAstStatementCallRule() {
		return getAstStatementCallAccess().getRule();
	}
	
	//AstStatementForeach:
	//	'foreach' generators+=AstForeachGenerator ("," generators+=AstForeachGenerator)* ('var'
	//	variables+=AstValuedVariableDeclaration (',' variables+=AstValuedVariableDeclaration)*)?
	//	'do'
	//	statements+=AstStatement*
	//	'end';
	public AstStatementForeachElements getAstStatementForeachAccess() {
		return pAstStatementForeach;
	}
	
	public ParserRule getAstStatementForeachRule() {
		return getAstStatementForeachAccess().getRule();
	}
	
	//AstForeachGenerator:
	//	variable=AstVariableDeclaration 'in' expression=AstExpression;
	public AstForeachGeneratorElements getAstForeachGeneratorAccess() {
		return pAstForeachGenerator;
	}
	
	public ParserRule getAstForeachGeneratorRule() {
		return getAstForeachGeneratorAccess().getRule();
	}
	
	//AstStatementBlock:
	//	{AstStatementBlock}
	//	'begin' ('var'
	//	variables+=AstValuedVariableDeclaration (',' variables+=AstValuedVariableDeclaration)*
	//	'do')?
	//	statements+=AstStatement*
	//	'end';
	public AstStatementBlockElements getAstStatementBlockAccess() {
		return pAstStatementBlock;
	}
	
	public ParserRule getAstStatementBlockRule() {
		return getAstStatementBlockAccess().getRule();
	}
	
	//AstStatementIf:
	//	'if' condition=AstExpression 'then'
	//	then+=AstStatement*
	//	elsifs+=AstStatementElsif* ('else' else+=AstStatement*)?
	//	'end';
	public AstStatementIfElements getAstStatementIfAccess() {
		return pAstStatementIf;
	}
	
	public ParserRule getAstStatementIfRule() {
		return getAstStatementIfAccess().getRule();
	}
	
	//AstStatementElsif:
	//	'elsif' condition=AstExpression 'then'
	//	then+=AstStatement*;
	public AstStatementElsifElements getAstStatementElsifAccess() {
		return pAstStatementElsif;
	}
	
	public ParserRule getAstStatementElsifRule() {
		return getAstStatementElsifAccess().getRule();
	}
	
	//AstStatementWhile:
	//	'while' condition=AstExpression 'do'
	//	statements+=AstStatement*
	//	'end';
	public AstStatementWhileElements getAstStatementWhileAccess() {
		return pAstStatementWhile;
	}
	
	public ParserRule getAstStatementWhileRule() {
		return getAstStatementWhileAccess().getRule();
	}
	
	//AstStatementRead:
	//	port=[AstPort] '-->' lvalues+=AstLValue (',' lvalues+=AstLValue)* ('repeat' repeat=AstExpression)? ';';
	public AstStatementReadElements getAstStatementReadAccess() {
		return pAstStatementRead;
	}
	
	public ParserRule getAstStatementReadRule() {
		return getAstStatementReadAccess().getRule();
	}
	
	//AstStatementWrite:
	//	port=[AstPort] => '<--' values+=AstExpression (',' values+=AstExpression)* ('repeat' repeat=AstExpression)? ';';
	public AstStatementWriteElements getAstStatementWriteAccess() {
		return pAstStatementWrite;
	}
	
	public ParserRule getAstStatementWriteRule() {
		return getAstStatementWriteAccess().getRule();
	}
	
	//AstLValue:
	//	target=[AstVariable] ('[' indexes+=AstExpression ']')* member+=AstMemberAccess*;
	public AstLValueElements getAstLValueAccess() {
		return pAstLValue;
	}
	
	public ParserRule getAstLValueRule() {
		return getAstLValueAccess().getRule();
	}
	
	//AstStatementCase:
	//	'case' expression=AstExpressionSymbolReference 'of'
	//	cases+=AstStatementAlternative+ ('else' default=AstStatement)?
	//	'end';
	public AstStatementCaseElements getAstStatementCaseAccess() {
		return pAstStatementCase;
	}
	
	public ParserRule getAstStatementCaseRule() {
		return getAstStatementCaseAccess().getRule();
	}
	
	//AstStatementAlternative:
	//	pattern=AstPattern ('guard' guards+=AstExpression (',' guards+=AstExpression)*)?
	//	'do' statements+=AstStatement* 'end';
	public AstStatementAlternativeElements getAstStatementAlternativeAccess() {
		return pAstStatementAlternative;
	}
	
	public ParserRule getAstStatementAlternativeRule() {
		return getAstStatementAlternativeAccess().getRule();
	}
	
	//AstStatement:
	//	AstStatementAssign
	//	| AstStatementCall
	//	| AstStatementForeach
	//	| AstStatementIf
	//	| AstStatementRead
	//	| AstStatementWrite
	//	| AstStatementWhile
	//	| AstStatementBlock
	//	| AstStatementCase;
	public AstStatementElements getAstStatementAccess() {
		return pAstStatement;
	}
	
	public ParserRule getAstStatementRule() {
		return getAstStatementAccess().getRule();
	}
	
	//// -- /////////////////////////////////////////////////////////////////////////////
	//// expressions
	//// -- /////////////////////////////////////////////////////////////////////////////
	//AstExpression:
	//	AstExpressionAnd ({AstExpressionBinary.left=current} operator=('||' | 'or' | '..') right=AstExpressionAnd)*;
	public AstExpressionElements getAstExpressionAccess() {
		return pAstExpression;
	}
	
	public ParserRule getAstExpressionRule() {
		return getAstExpressionAccess().getRule();
	}
	
	//AstExpressionAnd AstExpression:
	//	AstExpressionBitor ({AstExpressionBinary.left=current} operator=('&&' | 'and') right=AstExpressionBitor)*;
	public AstExpressionAndElements getAstExpressionAndAccess() {
		return pAstExpressionAnd;
	}
	
	public ParserRule getAstExpressionAndRule() {
		return getAstExpressionAndAccess().getRule();
	}
	
	//AstExpressionBitor AstExpression:
	//	AstExpressionBitxor ({AstExpressionBinary.left=current} operator='|' right=AstExpressionBitxor)*;
	public AstExpressionBitorElements getAstExpressionBitorAccess() {
		return pAstExpressionBitor;
	}
	
	public ParserRule getAstExpressionBitorRule() {
		return getAstExpressionBitorAccess().getRule();
	}
	
	//AstExpressionBitxor AstExpression:
	//	AstExpressionBitand ({AstExpressionBinary.left=current} operator='^' right=AstExpressionBitand)*;
	public AstExpressionBitxorElements getAstExpressionBitxorAccess() {
		return pAstExpressionBitxor;
	}
	
	public ParserRule getAstExpressionBitxorRule() {
		return getAstExpressionBitxorAccess().getRule();
	}
	
	//AstExpressionBitand AstExpression:
	//	AstExpressionEq ({AstExpressionBinary.left=current} operator='&' right=AstExpressionEq)*;
	public AstExpressionBitandElements getAstExpressionBitandAccess() {
		return pAstExpressionBitand;
	}
	
	public ParserRule getAstExpressionBitandRule() {
		return getAstExpressionBitandAccess().getRule();
	}
	
	//AstExpressionEq AstExpression:
	//	AstExpressionRelational ({AstExpressionBinary.left=current} operator=('=' | '!=') right=AstExpressionRelational)*;
	public AstExpressionEqElements getAstExpressionEqAccess() {
		return pAstExpressionEq;
	}
	
	public ParserRule getAstExpressionEqRule() {
		return getAstExpressionEqAccess().getRule();
	}
	
	//AstExpressionRelational AstExpression:
	//	AstExpressionShift ({AstExpressionBinary.left=current} operator=('<' | '<=' | '>' | '>=') right=AstExpressionShift)*;
	public AstExpressionRelationalElements getAstExpressionRelationalAccess() {
		return pAstExpressionRelational;
	}
	
	public ParserRule getAstExpressionRelationalRule() {
		return getAstExpressionRelationalAccess().getRule();
	}
	
	//AstExpressionShift AstExpression:
	//	AstExpressionAdditive ({AstExpressionBinary.left=current} operator=('<<' | '>>' | '>>>')
	//	right=AstExpressionAdditive)*;
	public AstExpressionShiftElements getAstExpressionShiftAccess() {
		return pAstExpressionShift;
	}
	
	public ParserRule getAstExpressionShiftRule() {
		return getAstExpressionShiftAccess().getRule();
	}
	
	//AstExpressionAdditive AstExpression:
	//	AstExpressionMultiplicative ({AstExpressionBinary.left=current} operator=('+' | '-')
	//	right=AstExpressionMultiplicative)*;
	public AstExpressionAdditiveElements getAstExpressionAdditiveAccess() {
		return pAstExpressionAdditive;
	}
	
	public ParserRule getAstExpressionAdditiveRule() {
		return getAstExpressionAdditiveAccess().getRule();
	}
	
	//AstExpressionMultiplicative AstExpression:
	//	AstExpressionExp ({AstExpressionBinary.left=current} operator=('*' | '/' | 'div' | 'mod') right=AstExpressionExp)*;
	public AstExpressionMultiplicativeElements getAstExpressionMultiplicativeAccess() {
		return pAstExpressionMultiplicative;
	}
	
	public ParserRule getAstExpressionMultiplicativeRule() {
		return getAstExpressionMultiplicativeAccess().getRule();
	}
	
	//AstExpressionExp AstExpression:
	//	AstExpressionUnary ({AstExpressionBinary.left=current} operator='**' right=AstExpressionUnary)*;
	public AstExpressionExpElements getAstExpressionExpAccess() {
		return pAstExpressionExp;
	}
	
	public ParserRule getAstExpressionExpRule() {
		return getAstExpressionExpAccess().getRule();
	}
	
	//AstExpressionUnary AstExpression:
	//	{AstExpressionUnary} unaryOperator=('~' | '-' | 'not' | '#' | 'old') expression=AstExpressionPostfix
	//	| AstExpressionAssertion;
	public AstExpressionUnaryElements getAstExpressionUnaryAccess() {
		return pAstExpressionUnary;
	}
	
	public ParserRule getAstExpressionUnaryRule() {
		return getAstExpressionUnaryAccess().getRule();
	}
	
	//AstExpressionAssertion AstExpression:
	//	AstExpressionPostfix (=> ({AstExpressionAssertion.target=current} 'as') type=AstType)*;
	public AstExpressionAssertionElements getAstExpressionAssertionAccess() {
		return pAstExpressionAssertion;
	}
	
	public ParserRule getAstExpressionAssertionRule() {
		return getAstExpressionAssertionAccess().getRule();
	}
	
	//AstExpressionPostfix AstExpression:
	//	AstExpressionList
	//	| AstExpressionSymbolReference
	//	| AstExpressionIf
	//	| AstExpressionLambda
	//	| AstExpressionProc
	//	| AstExpressionLet
	//	| AstExpressionMap
	//	| AstExpressionSet
	//	| AstExpressionCase
	//	| AstExpressionLiteral
	//	| '(' AstExpression ')';
	public AstExpressionPostfixElements getAstExpressionPostfixAccess() {
		return pAstExpressionPostfix;
	}
	
	public ParserRule getAstExpressionPostfixRule() {
		return getAstExpressionPostfixAccess().getRule();
	}
	
	//AstExpressionSymbolReference:
	//	annotations+=AstAnnotation*
	//	symbol=[AstVariable] ('[' indexes+=AstExpression ']')* member+=AstMemberAccess* ('::' ctor=ID)? (call?='('
	//	(parameters+=AstExpression (',' parameters+=AstExpression)*)? ')')?;
	public AstExpressionSymbolReferenceElements getAstExpressionSymbolReferenceAccess() {
		return pAstExpressionSymbolReference;
	}
	
	public ParserRule getAstExpressionSymbolReferenceRule() {
		return getAstExpressionSymbolReferenceAccess().getRule();
	}
	
	//AstExpressionIf:
	//	'if' condition=AstExpression
	//	'then' then=AstExpression
	//	elsifs+=AstExpressionElsif*
	//	'else' else=AstExpression
	//	'end';
	public AstExpressionIfElements getAstExpressionIfAccess() {
		return pAstExpressionIf;
	}
	
	public ParserRule getAstExpressionIfRule() {
		return getAstExpressionIfAccess().getRule();
	}
	
	//AstExpressionElsif:
	//	'elsif' condition=AstExpression 'then'
	//	then=AstExpression;
	public AstExpressionElsifElements getAstExpressionElsifAccess() {
		return pAstExpressionElsif;
	}
	
	public ParserRule getAstExpressionElsifRule() {
		return getAstExpressionElsifAccess().getRule();
	}
	
	//AstExpressionList:
	//	'[' expressions+=AstExpression (',' expressions+=AstExpression)* (':' generators+=AstGenerator (','
	//	generators+=AstGenerator)*)? ']';
	public AstExpressionListElements getAstExpressionListAccess() {
		return pAstExpressionList;
	}
	
	public ParserRule getAstExpressionListRule() {
		return getAstExpressionListAccess().getRule();
	}
	
	//AstGenerator:
	//	'for' variable=AstVariableDeclaration 'in' expression=AstExpression (',' filter+=AstExpression)*;
	public AstGeneratorElements getAstGeneratorAccess() {
		return pAstGenerator;
	}
	
	public ParserRule getAstGeneratorRule() {
		return getAstGeneratorAccess().getRule();
	}
	
	//AstExpressionSet:
	//	{AstExpressionSet} '{' (exprs+=AstExpression (',' exprs+=AstExpression))? (':' generator=AstGenerator)? '}';
	public AstExpressionSetElements getAstExpressionSetAccess() {
		return pAstExpressionSet;
	}
	
	public ParserRule getAstExpressionSetRule() {
		return getAstExpressionSetAccess().getRule();
	}
	
	//AstExpressionMap:
	//	{AstExpressionMap} 'map' '{' (mappings+=Mapping (',' mappings+=Mapping)*)? (':' generator=AstGenerator)? '}';
	public AstExpressionMapElements getAstExpressionMapAccess() {
		return pAstExpressionMap;
	}
	
	public ParserRule getAstExpressionMapRule() {
		return getAstExpressionMapAccess().getRule();
	}
	
	//Mapping:
	//	key=AstExpression '->' value=AstExpression;
	public MappingElements getMappingAccess() {
		return pMapping;
	}
	
	public ParserRule getMappingRule() {
		return getMappingAccess().getRule();
	}
	
	//AstExpressionLet:
	//	'let' (variables+=AstValuedVariableDeclaration (',' variables+=AstValuedVariableDeclaration)*)? ':'
	//	expr=AstExpression ('end' | 'endlet');
	public AstExpressionLetElements getAstExpressionLetAccess() {
		return pAstExpressionLet;
	}
	
	public ParserRule getAstExpressionLetRule() {
		return getAstExpressionLetAccess().getRule();
	}
	
	//AstExpressionLambda:
	//	'lambda' name=ID
	//	'(' (parameters+=AstVariableDeclaration (',' parameters+=AstVariableDeclaration)*)?
	//	')' '-->' type=AstType ('var'
	//	variables+=AstValuedVariableDeclaration (',' variables+=AstValuedVariableDeclaration)*)? ':'
	//	expression=AstExpression ('end' | 'endlambda');
	public AstExpressionLambdaElements getAstExpressionLambdaAccess() {
		return pAstExpressionLambda;
	}
	
	public ParserRule getAstExpressionLambdaRule() {
		return getAstExpressionLambdaAccess().getRule();
	}
	
	//AstExpressionProc:
	//	'proc' name=ID
	//	'(' (parameters+=AstVariableDeclaration (',' parameters+=AstVariableDeclaration)*)?
	//	')' ('var'
	//	variables+=AstValuedVariableDeclaration (',' variables+=AstValuedVariableDeclaration)*)? ('begin' | 'do')
	//	statements+=AstStatement* ('end' | 'endproc');
	public AstExpressionProcElements getAstExpressionProcAccess() {
		return pAstExpressionProc;
	}
	
	public ParserRule getAstExpressionProcRule() {
		return getAstExpressionProcAccess().getRule();
	}
	
	//AstExpressionCase:
	//	'case' expression=AstExpressionSymbolReference 'of'
	//	cases+=AstExpressionAlternative+ ('else' default=AstExpression)?
	//	'end';
	public AstExpressionCaseElements getAstExpressionCaseAccess() {
		return pAstExpressionCase;
	}
	
	public ParserRule getAstExpressionCaseRule() {
		return getAstExpressionCaseAccess().getRule();
	}
	
	//AstExpressionAlternative:
	//	pattern=AstPattern ('guard' guards+=AstExpression (',' guards+=AstExpression)*)?
	//	':' expression=AstExpression 'end';
	public AstExpressionAlternativeElements getAstExpressionAlternativeAccess() {
		return pAstExpressionAlternative;
	}
	
	public ParserRule getAstExpressionAlternativeRule() {
		return getAstExpressionAlternativeAccess().getRule();
	}
	
	//// -- /////////////////////////////////////////////////////////////////////////////
	//// literal expressions
	//// -- /////////////////////////////////////////////////////////////////////////////
	//AstExpressionLiteral:
	//	AstExpressionBoolean
	//	| AstExpressionFloat
	//	| AstExpressionInteger
	//	| AstExpressionString;
	public AstExpressionLiteralElements getAstExpressionLiteralAccess() {
		return pAstExpressionLiteral;
	}
	
	public ParserRule getAstExpressionLiteralRule() {
		return getAstExpressionLiteralAccess().getRule();
	}
	
	//AstExpressionBoolean:
	//	value=BOOL;
	public AstExpressionBooleanElements getAstExpressionBooleanAccess() {
		return pAstExpressionBoolean;
	}
	
	public ParserRule getAstExpressionBooleanRule() {
		return getAstExpressionBooleanAccess().getRule();
	}
	
	//terminal BOOL returns ecore::EBoolean:
	//	'true' | 'false';
	public TerminalRule getBOOLRule() {
		return tBOOL;
	}
	
	//AstExpressionFloat:
	//	value=REAL;
	public AstExpressionFloatElements getAstExpressionFloatAccess() {
		return pAstExpressionFloat;
	}
	
	public ParserRule getAstExpressionFloatRule() {
		return getAstExpressionFloatAccess().getRule();
	}
	
	//terminal REAL returns ecore::EFloat:
	//	'0'..'9'+ '.' '0'..'9'* (('e' | 'E') ('+' | '-')? '0'..'9'+)?
	//	| '.' '0'..'9'+ (('e' | 'E') ('+' | '-')? '0'..'9'+)?
	//	| '0'..'9'+ ('e' | 'E') ('+' | '-')? '0'..'9'+;
	public TerminalRule getREALRule() {
		return tREAL;
	}
	
	//AstExpressionInteger:
	//	value=(DECIMAL | OCTAL | HEX);
	public AstExpressionIntegerElements getAstExpressionIntegerAccess() {
		return pAstExpressionInteger;
	}
	
	public ParserRule getAstExpressionIntegerRule() {
		return getAstExpressionIntegerAccess().getRule();
	}
	
	//terminal DECIMAL returns ecore::EBigInteger:
	//	'1'..'9' '0'..'9'*;
	public TerminalRule getDECIMALRule() {
		return tDECIMAL;
	}
	
	//terminal OCTAL returns ecore::EBigInteger:
	//	'0' '0'..'7'*;
	public TerminalRule getOCTALRule() {
		return tOCTAL;
	}
	
	//terminal HEX returns ecore::EBigInteger:
	//	'0' ('x' | 'X') ('0'..'9' | 'a'..'f' | 'A'..'F')+;
	public TerminalRule getHEXRule() {
		return tHEX;
	}
	
	//AstExpressionString:
	//	value=STRING;
	public AstExpressionStringElements getAstExpressionStringAccess() {
		return pAstExpressionString;
	}
	
	public ParserRule getAstExpressionStringRule() {
		return getAstExpressionStringAccess().getRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ID:
	//	('a'..'z' | 'A'..'Z' | '_' | '$') ('a'..'z' | 'A'..'Z' | '0'..'9' | '_' | '$')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//// -- /////////////////////////////////////////////////////////////////////////////
	//// patterns
	//// -- /////////////////////////////////////////////////////////////////////////////
	//AstPattern:
	//	AstPatternAlternative
	//	| AstPatternAlias
	//	| AstPatternDeconstruction
	//	| AstPatternList
	//	| AstPatternDeclaration
	//	| AstPatternWildcard;
	public AstPatternElements getAstPatternAccess() {
		return pAstPattern;
	}
	
	public ParserRule getAstPatternRule() {
		return getAstPatternAccess().getRule();
	}
	
	//AstPatternDeclaration AstPattern:
	//	variable=AstToken;
	public AstPatternDeclarationElements getAstPatternDeclarationAccess() {
		return pAstPatternDeclaration;
	}
	
	public ParserRule getAstPatternDeclarationRule() {
		return getAstPatternDeclarationAccess().getRule();
	}
	
	//AstPatternWildcard AstPattern:
	//	{AstPattern} '_';
	public AstPatternWildcardElements getAstPatternWildcardAccess() {
		return pAstPatternWildcard;
	}
	
	public ParserRule getAstPatternWildcardRule() {
		return getAstPatternWildcardAccess().getRule();
	}
	
	//AstPatternAlternative AstPattern:
	//	(patterns+=AstPatternLiteral | patterns+=AstPatternExpression) ('|' (patterns+=AstPatternLiteral |
	//	patterns+=AstPatternExpression))*;
	public AstPatternAlternativeElements getAstPatternAlternativeAccess() {
		return pAstPatternAlternative;
	}
	
	public ParserRule getAstPatternAlternativeRule() {
		return getAstPatternAlternativeAccess().getRule();
	}
	
	//AstPatternAlias AstPattern:
	//	alias=(AstPatternDeclaration | AstPatternWildcard) '@' expression=AstPatternExpression;
	public AstPatternAliasElements getAstPatternAliasAccess() {
		return pAstPatternAlias;
	}
	
	public ParserRule getAstPatternAliasRule() {
		return getAstPatternAliasAccess().getRule();
	}
	
	//AstPatternList AstPattern:
	//	'[' patterns+=AstPattern (',' patterns+=AstPattern)* ']';
	public AstPatternListElements getAstPatternListAccess() {
		return pAstPatternList;
	}
	
	public ParserRule getAstPatternListRule() {
		return getAstPatternListAccess().getRule();
	}
	
	//AstPatternLiteral AstPattern:
	//	literal=AstExpressionLiteral;
	public AstPatternLiteralElements getAstPatternLiteralAccess() {
		return pAstPatternLiteral;
	}
	
	public ParserRule getAstPatternLiteralRule() {
		return getAstPatternLiteralAccess().getRule();
	}
	
	//AstPatternExpression AstPattern:
	//	"`" ('(' expression=AstExpression ')' | expression=AstExpressionSymbolReference);
	public AstPatternExpressionElements getAstPatternExpressionAccess() {
		return pAstPatternExpression;
	}
	
	public ParserRule getAstPatternExpressionRule() {
		return getAstPatternExpressionAccess().getRule();
	}
	
	//AstPatternDeconstruction AstPattern:
	//	name=ID '(' patterns+=AstPattern (',' patterns+=AstPattern)* ')';
	public AstPatternDeconstructionElements getAstPatternDeconstructionAccess() {
		return pAstPatternDeconstruction;
	}
	
	public ParserRule getAstPatternDeconstructionRule() {
		return getAstPatternDeconstructionAccess().getRule();
	}
	
	//// -- /////////////////////////////////////////////////////////////////////////////
	//// type and variable declarations
	//// -- /////////////////////////////////////////////////////////////////////////////
	//AstTypeUser AstVariable:
	//	{AstTypeUser} ID;
	public AstTypeUserElements getAstTypeUserAccess() {
		return pAstTypeUser;
	}
	
	public ParserRule getAstTypeUserRule() {
		return getAstTypeUserAccess().getRule();
	}
	
	//AstTypeBuiltIn:
	//	'int' | 'uint' | 'float' | 'double' | 'bool' | 'List' | 'String' | 'set' | 'map';
	public AstTypeBuiltInElements getAstTypeBuiltInAccess() {
		return pAstTypeBuiltIn;
	}
	
	public ParserRule getAstTypeBuiltInRule() {
		return getAstTypeBuiltInAccess().getRule();
	}
	
	//AstType:
	//	{AstType} (builtin=AstTypeBuiltIn typeParams=AstTypeParameterList? ('[' dimensions+=AstExpression ']')*
	//	| name=[AstTypeUser] typeParams=AstTypeParameterList? ('[' dimensions+=AstExpression ']')*
	//	| '[' (domain+=AstType (',' domain+=AstType)*)? '-->' codomain=AstType? ']');
	public AstTypeElements getAstTypeAccess() {
		return pAstType;
	}
	
	public ParserRule getAstTypeRule() {
		return getAstTypeAccess().getRule();
	}
	
	//AstTypeParameterList:
	//	'(' params+=AstTypeParam (',' params+=AstTypeParam)* ')';
	public AstTypeParameterListElements getAstTypeParameterListAccess() {
		return pAstTypeParameterList;
	}
	
	public ParserRule getAstTypeParameterListRule() {
		return getAstTypeParameterListAccess().getRule();
	}
	
	//AstTypeParam:
	//	name=ID '=' value=AstExpression | name=(ID | 'type') ':' type=AstType;
	public AstTypeParamElements getAstTypeParamAccess() {
		return pAstTypeParam;
	}
	
	public ParserRule getAstTypeParamRule() {
		return getAstTypeParamAccess().getRule();
	}
	
	//AstVariableDeclaration AstVariable:
	//	annotations+=AstAnnotation*
	//	type=AstType name=ID ('[' dimensions+=AstExpression ']')*;
	public AstVariableDeclarationElements getAstVariableDeclarationAccess() {
		return pAstVariableDeclaration;
	}
	
	public ParserRule getAstVariableDeclarationRule() {
		return getAstVariableDeclarationAccess().getRule();
	}
	
	//AstValuedVariableDeclaration AstVariable:
	//	AstVariableDeclaration ((constant?='=' | ':=') value=AstExpression)?;
	public AstValuedVariableDeclarationElements getAstValuedVariableDeclarationAccess() {
		return pAstValuedVariableDeclaration;
	}
	
	public ParserRule getAstValuedVariableDeclarationRule() {
		return getAstValuedVariableDeclarationAccess().getRule();
	}
	
	//AstMemberAccess:
	//	'.' name=ID ('[' memberIndex+=AstExpression ']')*;
	public AstMemberAccessElements getAstMemberAccessAccess() {
		return pAstMemberAccess;
	}
	
	public ParserRule getAstMemberAccessRule() {
		return getAstMemberAccessAccess().getRule();
	}
	
	//// -- /////////////////////////////////////////////////////////////////////////////
	//// annotations
	//// -- /////////////////////////////////////////////////////////////////////////////
	//AstAnnotation:
	//	'@' name=ID ('(' arguments+=AstAnnotationArgument (',' arguments+=AstAnnotationArgument)* ')')?;
	public AstAnnotationElements getAstAnnotationAccess() {
		return pAstAnnotation;
	}
	
	public ParserRule getAstAnnotationRule() {
		return getAstAnnotationAccess().getRule();
	}
	
	//AstAnnotationArgument:
	//	name=ID '=' value=STRING;
	public AstAnnotationArgumentElements getAstAnnotationArgumentAccess() {
		return pAstAnnotationArgument;
	}
	
	public ParserRule getAstAnnotationArgumentRule() {
		return getAstAnnotationArgumentAccess().getRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
